<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ComponentPro.Terminal</name>
    </assembly>
    <members>
        <member name="T:ComponentPro.Net.Terminal.ShellPromptType">
            <summary>
            Defines the shell prompt type.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ShellPromptType.RegularText">
            <summary>
            Regular text. 
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ShellPromptType.Regex">
            <summary>
            Regex.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ShellPromptType.Mask">
            <summary>
            Masks.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TerminalCursorStyles">
            <summary>
            Specifies how a terminal control display the cursor.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalCursorStyles.Underline">
            <summary>
            Underlined cursor.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalCursorStyles.Block">
            <summary>
            Block cursor.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalCursorStyles.Invisible">
            <summary>
            Cursor is not shown.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.IShellConnection">
            <summary>
            Defines the required members for a Shell connection.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.IShellConnection.Timeout">
            <summary>
            Gets or sets the timeout.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.IShellConnection.Proxy">
            <summary>
            Gets or sets the proxy object.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.ITerminal">
            <summary>
            Defines the shared interface for <see cref="T:ComponentPro.Net.Terminal.TerminalControl" /> and <see cref="T:ComponentPro.Net.Terminal.VirtualTerminal" />.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.DetectPrompt">
            <summary>
            Detects the prompt which the server currently uses and sets the <see cref="P:ComponentPro.Net.Terminal.ITerminal.Prompt"/> property.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.KeepAlive">
            <summary>
            Keeps the session alive.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.Send(System.String)">
            <summary>
            Sends text to the server.
            </summary>
            <param name="text">Text to be sent.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.Send(System.ConsoleKeyInfo)">
            <summary>
            Sends a key to the server. This is used for sending simple keys or combinations such as Ctrl+C.
            </summary>
            <param name="key">Key to be sent.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.Send(ComponentPro.Net.Terminal.FunctionKey)">
            <summary>
            Sends a key to the server. This is used for sending function keys such as Enter or F10.
            </summary>
            <param name="key">Key to be sent.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.Send(ComponentPro.Net.Terminal.FunctionKey,System.ConsoleModifiers)">
            <summary>
            Sends a key to the server. 
            </summary>
            <param name="key">Key to be sent.</param>
            <param name="modifiers">Modifiers for the key such as Alt, Shift or Ctrl.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.Send(System.ConsoleKey,System.ConsoleModifiers)">
            <summary>
            Sends a key to the server. 
            </summary>
            <param name="key">Key to be sent.</param>
            <param name="modifiers">Modifiers for the key such as Alt, Shift or Ctrl.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.SendData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends raw data to the server.
            </summary>
            <param name="data">Data array to by sent.</param>
            <param name="offset">Offset of the data in the array.</param>
            <param name="count">Length of the data in the data array.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.SendBreak(System.Int32)">
            <summary>
            Sends a break request to the server. This may or may not have an effect, depending on the server. Sending Ctrl+C using <see cref="M:ComponentPro.Net.Terminal.ITerminal.Send(System.ConsoleKey,System.ConsoleModifiers)"/> is usually more reliable.
            </summary>
            <param name="breakLength">Break length, in milliseconds (if supported by the underlying channel).</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.SendCommand(System.String)">
            <summary>
            Sends a command to the server and waits for the server to accept it.
            </summary>
            <param name="command">Command to be sent.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.Execute(System.String,ComponentPro.Net.Terminal.ScriptEvent[])">
            <summary>
            Executes the specified command on the server within the specified amount of time (in miliseconds).
            </summary>
            <param name="command">The command to send to the server.</param>
            <param name="events">The conditions that can occur and be checked.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.ReadChar">
            <summary>
            Receives a printable character from the server.
            </summary>
            <returns>A character received from the server.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.ReadLine">
            <summary>
            Receives response from the server until and end-of-line sequence is received.
            </summary>
            <returns>A line received from the server.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.ReadUntil(ComponentPro.Net.Terminal.ScriptEvent)">
            <summary>
            Receives response from the server until the specified condition is met.
            </summary>
            <param name="scriptEvent">Condition to be met.</param>
            <returns>The response received from the server.</returns>
            <remarks>
            If <see cref="P:ComponentPro.Net.Terminal.ITerminal.TrimReadUntilResponse"/> property is set to true, the prompt sequence is removed from the returned value if it was one of the specified conditions.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.ReadUntil(ComponentPro.Net.Terminal.ScriptEvent[])">
            <summary>
            Reads the response from previously sent command until the criteria are met. The events are processed as if the OR operator was applied.
            </summary>
            <param name="events">Criteria to be met.</param>
            <returns>Response of the previously sent command until the criteria are met. If ScriptEvent.Timeout was not set, 
            it can throw timeout exception if the criteria are not met.</returns>
            <remarks>
            If <see cref="P:ComponentPro.Net.Terminal.ITerminal.TrimReadUntilResponse"/> property is set to true, the prompt sequence is removed from the returned value if it was one of the specified conditions.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.ReadUntilPrompt">
            <summary>
            Receives response from the server until the <see cref="P:ComponentPro.Net.Terminal.ITerminal.Prompt"/> is received.
            </summary>
            <returns>The response received from the server.</returns>
            <remarks>
            If <see cref="P:ComponentPro.Net.Terminal.ITerminal.TrimReadUntilResponse"/> property is set, the prompt sequence is removed from the returned value.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.WaitFor(ComponentPro.Net.Terminal.ScriptEvent)">
            <summary>
            Receives response from the server until a condition is met.
            </summary>
            <param name="evt">Condition to be met.</param>
            <returns>Result of the check.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.WaitFor(ComponentPro.Net.Terminal.ScriptEvent[])">
            <summary>
            Processes response from the server until a condition is met. The events are processed as if the OR operator was applied.
            </summary>
            <param name="events">Condition to be met.</param>
            <returns>Result of the check.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.WaitForData">
            <summary>
            Processes response from the server. If no data is availableto be received, waits until the <see cref="P:ComponentPro.Net.Terminal.ITerminal.ShellTimeout"/> interval expires.
            </summary>
            <returns>Current state of the terminal.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.WaitForData(System.Int32)">
            <summary>
            Processes response from the server. If no data is available to be received, waits until the specified interval expires.
            </summary>
            <param name="timeout">A maximum amount of time (in miliseconds) to wait if no data is currently available.</param>
            <returns>Current state of the terminal.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.CheckFor(ComponentPro.Net.Terminal.ScriptEvent)">
            <summary>
            Checks whether the specified condition is currently met.
            </summary>
            <param name="scriptEvent">Condition to be met.</param>
            <returns>Result of the check.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.CheckFor(ComponentPro.Net.Terminal.ScriptEvent[])">
            <summary>
            Processes response from the server until any condition is met. The events are processed as if the OR operator was applied.
            </summary>
            <param name="events">Condition to be met.</param>
            <returns>Result of the check.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.Attach(ComponentPro.Net.Terminal.IShellConnection)">
            <summary>
            Binds the terminal to the specified shell channel factory - usually an instance of ComponentPro.Net.Ssh class.
            </summary>
            <param name="factory">Shell channel factory.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.Save(System.String,ComponentPro.Net.Terminal.ScreenshotFileFormat)">
            <summary>
            Saves the content of the terminal screen to the specified file in the specified format.
            </summary>
            <param name="path">Path to a local file.</param>
            <param name="format">Capture format.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.Save(System.IO.Stream,ComponentPro.Net.Terminal.ScreenshotFileFormat)">
            <summary>
            Saves the content of the terminal screen to the specified stream in the specified format.
            </summary>
            <param name="output">Output stream.</param>
            <param name="format">Capture format.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.Save(System.String,ComponentPro.Net.Terminal.ScreenshotFileFormat,ComponentPro.Net.Terminal.ScreenshotOptions)">
            <summary>
            Saves the content of the terminal screen to the specified file in the specified format with the specified options.
            </summary>
            <param name="path">Path to a local file.</param>
            <param name="format">Capture format.</param>
            <param name="options">Capture options.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.Save(System.IO.Stream,ComponentPro.Net.Terminal.ScreenshotFileFormat,ComponentPro.Net.Terminal.ScreenshotOptions)">
            <summary>
            Saves the content of the terminal screen to the specified stream in the specified format with the specified options.
            </summary>
            <param name="output">Output stream.</param>
            <param name="format">Capture format.</param>
            <param name="options">Capture options.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.SetScreenSize(System.Int32,System.Int32)">
            <summary>
            Sets a new screen size.
            </summary>
            <param name="columns">Horizontal size in character columns.</param>
            <param name="rows">Vertical size in character rows.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ITerminal.Detach">
            <summary>
            Unbinds the terminal from the current channel and closes the channel.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.TerminalName">
            <summary>
            Gets or sets the terminal name.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.TerminalType">
            <summary>
            Gets or sets the terminal type.
            </summary>
            <value>Terminal type.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.Encoding">
            <summary>
            Gets or sets the character encoding for incoming and outgoing data.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.AutoWrap">
            <summary>
            Gets or sets the auto wrap mode.
            </summary>
            <remarks>
            It defines the behavior of a character received when the cursor is at the last column.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.BreakSequence">
            <summary>
            Gets or sets which break sequence to use - defines the behavior of the <see cref="M:ComponentPro.Net.Terminal.TerminalControl.SendBreak(System.Int32)"/> method.
            </summary>
            <value>Break sequence.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.LocalEcho">
            <summary>
            Gets or sets a boolean value indicating whether the local echo is enabled or disabled.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.NewLineType">
            <summary>
            Gets or sets a new line type for outgoing data.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.BackspaceKey">
            <summary>
            Gets or sets a Backspace key sequence for outgoing data.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.CursorKeys">
            <summary>
            Gets or sets the cursor key mode.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.IgnoreCursorKeyModeChange">
            <summary>
            Specifies whether to ignore cursor key mode change requests from the server.
            </summary>
            <value>True to ignore cursor key mode change requests; false to allow.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.HomeAndEndKeys">
            <summary>
            Gets or sets the behavior of Home and End keys.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.CursorStyles">
            <summary>
            Gets or sets the cursor style.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.KeysMode">
            <summary>
            Gets or sets the keys mode.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.ImplicitCarriageReturnInLinefeed">
            <summary>
            Gets or sets a value indicating whether a CR character is implied in any received LF.
            </summary>
            <value>True to imply CR in every LF; false to not imply.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.DestructiveBackspace">
            <summary>
            Gets or sets a value indicating whether to treat the incoming destructive backspace characters (7F) as non-destructive backspace (08).
            </summary>
            <value>True to treat destructive backspace as non-destructive, false to allow destructive backspace.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.IgnoreSubstituteCharacter">
            <summary>
            Gets or sets a value indicating whether to ignore incoming substitute characters (1A) or replace them with replaced by a question mark.
            </summary>
            <value>True to ignore substitute characters; false to replace them with a question mark.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.PersistColorsOnSelectGraphicRendition">
            <summary>
            Specifies whether escape sequence of the Select Graphic Rendition also clears the color of the pen.
            </summary>
            <value>True to persist last set color; false to reset color of the pen.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.ColorScheme">
            <summary>
            Gets or sets the color scheme.
            </summary>
            <value>Color scheme.</value>
            <remarks>To ensure color changes are applied immediately to the terminal control, you have to call the <see cref="M:System.Windows.Forms.Control.Refresh"/> method.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.BlinkingText">
            <summary>
            Gets or sets the blinking text appereance.
            </summary>
            <value>Blinking text appereance.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.BackColorIndex">
            <summary>
            Gets or sets the standard background color.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.ForeColorIndex">
            <summary>
            Gets or sets the standard foreground color - text color.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.BoldTextColorIndex">
            <summary>
            Gets or sets the bold text color.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.GrayedTextColorIndex">
            <summary>
            Gets or sets the faint text color.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.ItalicTextColorIndex">
            <summary>
            Gets or sets the italic text color.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.SingleUnderlinedTextColorIndex">
            <summary>
            Gets or sets the single underline text color.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.DoubleUnderlinedTextColorIndex">
            <summary>
            Gets or sets the double underline text color.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.NormalCursorColorIndex">
            <summary>
            Gets or sets the normal cursor color index.
            </summary>
            <value>The normal cursor color index.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.IsBound">
            <summary>
            Indicates whether the control is bound to a shell connection.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.IsConnected">
            <summary>
            Indicates whether the control is connected to the server.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.AutoMatchPrompt">
            <summary>
            Gets or sets whether to automatically match prompt in <see cref="M:ComponentPro.Net.Terminal.ITerminal.WaitFor(ComponentPro.Net.Terminal.ScriptEvent)"/>, <see cref="M:ComponentPro.Net.Terminal.ITerminal.ReadUntil(ComponentPro.Net.Terminal.ScriptEvent)"/>, 
            <see cref="M:ComponentPro.Net.Terminal.ITerminal.ReadUntilPrompt"/>, <see cref="M:ComponentPro.Net.Terminal.ITerminal.ReadLine"/>, <see cref="M:ComponentPro.Net.Terminal.ITerminal.ReadChar"/> and <see cref="M:ComponentPro.Net.Terminal.ITerminal.CheckFor(ComponentPro.Net.Terminal.ScriptEvent)"/> methods.
            The default value is false.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.FinalExitCode">
            <summary>
            Gets the exit code of the receiving channel when the connection was closed.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.HoldReceivedData">
            <summary>
            Gets or sets a value indicating whether to hold received data in <see cref="P:ComponentPro.Net.Terminal.ITerminal.ReceivedData"/> property.
            The default value is true.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.LastResult">
            <summary>
            Gets the result of last called <see cref="M:ComponentPro.Net.Terminal.ITerminal.ReadUntilPrompt"/>, <see cref="M:ComponentPro.Net.Terminal.ITerminal.ReadLine"/>, <see cref="M:ComponentPro.Net.Terminal.ITerminal.ReadChar"/> or <see cref="M:ComponentPro.Net.Terminal.ITerminal.ReadUntil(ComponentPro.Net.Terminal.ScriptEvent)"/> method. Please note that calling other scripting methods reset this to null.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.Prompt">
            <summary>
            Gets or sets the sequence that is used to detect command prompt.
            To use regular expressions, prepend the string with "regex:".
            To use wildcards, prepend the string with "mask:".
            Prompt sequence is used by <see cref="M:ComponentPro.Net.Terminal.ITerminal.ReadUntilPrompt"/> method (and other methods if <see cref="P:ComponentPro.Net.Terminal.ScriptEvent.Prompt"/> is specified).
            To detect the current prompt automatically , use <see cref="M:ComponentPro.Net.Terminal.ITerminal.DetectPrompt"/> method.
            </summary>
            <value>Prompt sequence.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.ReceivedData">
            <summary>
            Gets data received since the previous data-receiving method.
            If <see cref="P:ComponentPro.Net.Terminal.ITerminal.HoldReceivedData"/> is set to false, this returns null.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.ShellTimeout">
            <summary>
            Gets or sets the timeout for receiving data.
            The default value is one minute.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.TrimReadUntilResponse">
            <summary>
            Gets or sets a value indicating whether <see cref="M:ComponentPro.Net.Terminal.ITerminal.ReadUntilPrompt"/>, <see cref="M:ComponentPro.Net.Terminal.ITerminal.ReadLine"/>, 
            <see cref="M:ComponentPro.Net.Terminal.ITerminal.ReadChar"/> and <see cref="M:ComponentPro.Net.Terminal.ITerminal.ReadUntil(ComponentPro.Net.Terminal.ScriptEvent)"/> methods remove the prompt or end-of-line from the returned value.
            The default value is true.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.ShellObject">
            <summary>
            Gets the shell object.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.CellSize">
            <summary>
            Gets the size of a character cell.
            </summary>
            <value>Size of character cell.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.HistoryLength">
            <summary>
            Gets the current history buffer length.
            </summary>
            <value>Current history length.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.IsDisposed">
            <summary>
            Gets a value indicating whether the terminal is disposed.
            </summary>
            <value>True if disposed; false if not disposed.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.Palette">
            <summary>
            Gets or sets the terminal palette.
            </summary>
            <value>Terminal palette.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.Recorder">
            <summary>
            Gets or sets incoming data recorder.
            </summary>
            <value>Incoming data recorder.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.Screen">
            <summary>
            Gets the terminal screen object.
            </summary>
            <value>Terminal screen.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.TerminalFont">
            <summary>
            Gets or sets the terminal font. Setting the font may also cause the screen size to be adjusted to fit into the control area.
            </summary>
            <value>Terminal font.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ITerminal.Transfers">
            <summary>
            Gets the object which allows file transferring.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.ITerminal.ServerInstructionReceived">
            <summary>
            Occurs when a specific client action is requested by the server.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.ITerminal.DataReceived">
            <summary>
            Occurs when the data are received from the server.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.ITerminal.StateChanged">
            <summary>
            Occurs when the state of the Terminal Control object is changed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.ITerminal.RemoteResize">
            <summary>
            Occurs when the screen resize is requested by the server.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.SshClient">
            <summary>
            Provides methods for communication with SSH shell servers.
            </summary>
            <remarks>All members of this class are thread-safe.</remarks>
        </member>
        <member name="F:ComponentPro.Net.Terminal.SshClient.DefaultPort">
            <summary>
            Default SSH port (22).
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.#ctor">
            <summary>
            Initializes a new instance of the Ssh class.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.ReuseConnection(ComponentPro.Net.SecureShellConnection)">
            <summary>
            Binds the <see cref="T:ComponentPro.Net.Terminal.SshClient" /> object to an underlying SSH session. This can be used instead of <see cref="M:ComponentPro.Net.Terminal.SshClient.Connect(System.String)" />/<see cref="M:ComponentPro.Net.Terminal.SshClient.Authenticate(System.String,System.String)" /> methods.
            </summary>
            <param name="session">SSH session (already connected and authenticated).</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.CheckSession">
            <summary>
            Checks whether the SSH session is still connected. Throws an exception on error.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.Connect(System.String)">
            <summary>
            Connects to the SSH server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.Connect(System.String,System.Int32)">
            <summary>
            Connects to the SSH server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 22).</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.Connect(System.String,System.Int32,ComponentPro.Net.SecureShellConfig)">
            <summary>
            Connects to the SSH server with the specified security parameters.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string IP address.</param>
            <param name="serverPort">The server port (eg. 22).</param>
            <param name="parameters">Security parameters.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.Disconnect">
            <summary>
            Informs the server that the connection is about to close and
            terminates the connection.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.Dispose">
            <summary>
            Disposes the <see cref="T:ComponentPro.Net.Terminal.SshClient" /> object and all the socket objects.
            </summary>
            <remarks>
            Calling this method ensures that all resources are freed.
            It is not necessary to call this method if the SSH session is
            successfully closed using <see cref="M:ComponentPro.Net.Terminal.SshClient.Disconnect">Disconnect</see> method.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:ComponentPro.Net.Terminal.SshClient" /> object
            and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.Finalize">
            <summary>
            Finalizer. Called by garbage collector during object destruction.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.GetSessionStatus">
            <summary>
            Checks whether the SSH session is still connected and returns its state.
            </summary>
            <returns>Connection state.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.Authenticate(ComponentPro.Net.SecureShellGssApiCredentials)">
            <summary>
            Authenticates to the server using GSSAPI. Kerberos and NTLM methods are supported.
            </summary>
            <param name="credentials">Credentials.</param>
            <remarks>
            Only supported on Windows platforms.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.Authenticate(System.String,System.String)">
            <summary>
            Authenticates the user to the server and initializes the SSH session.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the specified username.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.Authenticate(System.String,ComponentPro.Net.SecureShellPrivateKey)">
            <summary>
            Authenticates the user to the server using his private key and initializes the SSH session.
            </summary>
            <param name="userName">The username.</param>
            <param name="privateKey">RSA or DSA private key for key-based authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.Authenticate(System.String,System.String,ComponentPro.Net.SecureShellPrivateKey)">
            <summary>
            Authenticates the user to the server using a combination of password and public key and initializes the SSH session.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the specified username.</param>
            <param name="privateKey">RSA or DSA private key for key-based authentication.</param>
            <remarks>Please note that some servers don't support both password and private key specified at the same time.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.SetSocketFactory(ComponentPro.Net.ISocketFactory)">
            <summary>
            Sets the socket factory to be used to create communication sockets.
            </summary>
            <param name="factory">Socket factory.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.StartIncomingTunnel(System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Starts a new incoming tunnel. Connections to remote endpoint will be tunneled from the SSH server through the local machine to the specified target.
            </summary>
            <param name="remoteEndPoint">Remote endpoint from which to tunnel connections.</param>
            <param name="targetEndPoint">Local endpoint to which to tunnel connections.</param>
            <returns>A tunnel instance.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.StartIncomingTunnel(System.String,System.Int32,System.Net.IPEndPoint)">
            <summary>
            Starts a new incoming tunnel. Connections to remote address/port will be tunneled from the SSH server through the local machine to the specified target.
            </summary>
            <param name="remoteAddress">Remote address from which to tunnel connections.</param>
            <param name="remotePort">Remote port from which to tunnel connections.</param>
            <param name="targetEndPoint">Local endpoint to which to tunnel connections.</param>
            <returns>A tunnel instance.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.StartIncomingTunnel(System.Net.IPEndPoint,System.String,System.Int32)">
            <summary>
            Starts a new incoming tunnel. Connections to remote endpoint will be tunneled from the SSH server through the local machine to the specified target.
            </summary>
            <param name="remoteEndPoint">Remote endpoint from which to tunnel connections.</param>
            <param name="targetHostName">Local address to which to tunnel connections.</param>
            <param name="targetPort">Local port to which to tunnel connections.</param>
            <returns>A tunnel instance.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.StartIncomingTunnel(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Starts a new incoming tunnel. Connections to remote endpoint will be tunneled from the SSH server through the local machine to the specified target.
            </summary>
            <param name="remoteAddress">Remote address from which to tunnel connections.</param>
            <param name="remotePort">Remote port from which to tunnel connections.</param>
            <param name="targetHostName">Local address to which to tunnel connections.</param>
            <param name="targetPort">Local port to which to tunnel connections.</param>
            <returns>A tunnel instance.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.StartOutgoingTunnel(System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Starts a new outgoing tunnel. Connections to local endpoint will be tunneled through the SSH server to the specified remote endpoint.
            </summary>
            <param name="localEndPoint">Local endpoint to listen at.</param>
            <param name="targetEndPoint">Target endpoint to which to tunnel connections.</param>
            <returns>A tunnel instance.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.StartOutgoingTunnel(System.Net.IPEndPoint,System.String,System.Int32)">
            <summary>
            Starts a new outgoing tunnel. Connections to local endpoint will be tunneled through the SSH server to the specified remote host/port.
            </summary>
            <param name="localEndPoint">Local endpoint to listen at.</param>
            <param name="targetHostName">Target hostname to which to tunnel connections.</param>
            <param name="targetPort">Target port to which to tunnel connections.</param>
            <returns>A tunnel instance.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.StartOutgoingTunnel(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Starts a new outgoing tunnel. Connections to local host/port will be tunneled through the SSH server to the specified remote host/port.
            </summary>
            <param name="localHostName">Local hostname to listen at.</param>
            <param name="localPort">Local port to listen at.</param>
            <param name="targetHostName">Target hostname to which to tunnel connections.</param>
            <param name="targetPort">Target port to which to tunnel connections.</param>
            <returns>A tunnel instance.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>A string representing this object</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.OnChangePasswordCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.Net.SecureShellChangePasswordResult})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.SshClient.ChangePasswordCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.ChangePasswordAsync(System.String,System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.SecureShellChangePasswordResult},System.Object)">
            <summary>
            Asynchronously changes the specified user's password on the SSH server and authenticates.
            </summary>
            <param name="userName">The name of the user to change his password.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.ChangePasswordAsync(System.String,System.String,System.String,System.Object)">
            <summary>
            Asynchronously changes the specified user's password on the SSH server and authenticates.
            </summary>
            <param name="userName">The name of the user to change his password.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.OnAuthenticateCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.SshClient.AuthenticateCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.AuthenticateAsync(ComponentPro.Net.SecureShellGssApiCredentials,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates to the server using GSSAPI.
            </summary>
            <param name="credentials">The GSSAPI authentication settings.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.AuthenticateAsync(ComponentPro.Net.SecureShellGssApiCredentials,System.Object)">
            <summary>
            Asynchronously authenticates to the server using GSSAPI.
            </summary>
            <param name="credentials">The GSSAPI authentication settings.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.AuthenticateAsync(System.String,System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SSH server.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is a null reference (Nothing in VB.NET).</exception>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.AuthenticateAsync(System.String,System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SSH server.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is a null reference (Nothing in VB.NET).</exception>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.AuthenticateAsync(System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SSH server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.AuthenticateAsync(System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SSH server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.AuthenticateAsync(System.String,System.String,ComponentPro.Net.SecureShellPrivateKey,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SSH server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated, or null reference (Nothing in VB.NET).</param>
            <param name="privateKey">An RSA or DSA private key for key-based authentication.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> or <paramref name="privateKey"/> is empty, or neither private key or password is not specified.</exception>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.AuthenticateAsync(System.String,System.String,ComponentPro.Net.SecureShellPrivateKey,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SSH server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated, or null reference (Nothing in VB.NET).</param>
            <param name="privateKey">An RSA or DSA private key for key-based authentication.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> or <paramref name="privateKey"/> is empty, or neither private key or password is not specified.</exception>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.AuthenticateAsync(System.String,ComponentPro.Net.SecureShellPrivateKey,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SSH server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="privateKey">An RSA or DSA private key for key-based authentication.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> or <paramref name="privateKey"/> is empty, or neither private key or password is not specified.</exception>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.AuthenticateAsync(System.String,ComponentPro.Net.SecureShellPrivateKey,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SSH server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="privateKey">An RSA or DSA private key for key-based authentication.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> or <paramref name="privateKey"/> is empty, or neither private key or password is not specified.</exception>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.AuthenticateAsync(System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous operation to authenticate the user to the SSH server.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.AuthenticateAsync(System.String,System.String,System.Object)">
            <summary>
            Begins an asynchronous operation to authenticate the user to the SSH server.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.OnConnectCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.SshClient.ConnectCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.ConnectAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Initiates an asynchronous operation to an SSH server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.ConnectAsync(System.String,System.Object)">
            <summary>
            Initiates an asynchronous operation to connect to an SSH server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.ConnectAsync(System.String,System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Initiates an asynchronous operation to an SSH server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 22).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.ConnectAsync(System.String,System.Int32,System.Object)">
            <summary>
            Initiates an asynchronous operation to connect to an SSH server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 22).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.OnDisconnectCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.SshClient.DisconnectCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.DisconnectAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous operation to inform the server that the connection is about to close and
            terminates the connection.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.DisconnectAsync(System.Object)">
            <summary>
            Initiates an asynchronous operation to inform the server that the connection is about to close and
            terminates the connection.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.OnKeepAliveCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.SshClient.KeepAliveCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.KeepAliveAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous operation to sends the NOOP command to the server to keep the connection alive.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.KeepAliveAsync(System.Object)">
            <summary>
            Begins an asynchronous operation to sends the NOOP command to the server to keep the connection alive.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.OnCreateShellCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.Net.Terminal.TerminalShell})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.SshClient.CreateShellCompleted"/> event.
            </summary>
            <param name="sender">The sender object</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.CreateShellAsync(System.Boolean,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Terminal.TerminalShell},System.Object)">
            <summary>
            Asynchronously creates a remote shell.
            </summary>
            <param name="autoProcessing">Indicates whether to auto-process command and response.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.CreateShellAsync(System.Boolean,System.Object)">
            <summary>
            Asynchronously creates a remote shell.
            </summary>
            <param name="autoProcessing">Indicates whether to auto-process command and response.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.CreateShellAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Terminal.TerminalShell},System.Object)">
            <summary>
            Asynchronously creates a remote shell and writes the specified remote command.
            </summary>
            <param name="command">Command to execute.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.CreateShellAsync(System.String,System.Object)">
            <summary>
            Asynchronously creates a remote shell and writes the specified remote command.
            </summary>
            <param name="command">Command to execute.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.OnBanner(System.Object,ComponentPro.Net.BannerEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.SshClient.Banner"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.BannerEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.OnHostKeyVerifying(System.Object,ComponentPro.Net.HostKeyVerifyingEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.SshClient.HostKeyVerifying"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.HostKeyVerifyingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.OnKeyboardInteractiveAuthentication(System.Object,ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.SshClient.KeyboardInteractiveAuthentication"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.OnPasswordChangeRequest(System.Object,ComponentPro.Net.PasswordChangeRequestEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.SshClient.PasswordChangeRequest"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.PasswordChangeRequestEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.Authenticate(System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler)">
            <summary>
            Authenticates the user to the SSH server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <exception cref="T:ComponentPro.Net.SecureShellException">An error occured while authenticating the user.</exception>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.Authenticate(System.String,System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler)">
            <summary>
            Authenticates the user to the SSH server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <exception cref="T:ComponentPro.Net.SecureShellException">An error occured while authenticating the user.</exception>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.CreateShell(System.String)">
            <summary>
            Creates a remote shell and writes the specified remote command.
            </summary>
            <param name="command">Command to execute.</param>
            <returns>Shell object.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.CreateShell(System.Boolean)">
            <summary>
            Creates a remote shell.
            </summary>
            <param name="autoProcessing">Indicates whether to auto-process command and response.</param>
            <returns>Shell object.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.ReuseConnection(ComponentPro.Net.ISecureShellClient)">
            <summary>
            Binds the <see cref="T:ComponentPro.Net.Terminal.SshClient"/> object to an underlying SSH session. This can be used instead of <see cref="O:Connect"/> and <see cref="O:Authenticate"/> methods.
            </summary>
            <param name="sshClient">SSH session (already connected and authenticated).</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.KeepAlive">
            <summary>
            Sends a data packet to the server to keep the connection alive.
            </summary>
            <remarks>
            This is useful with some firewalls or routers that drop inactive connection.
            </remarks>
            <exception cref="T:ComponentPro.Net.SecureShellException">An error occurred while sending a packet to the server to keep the connection alive.</exception>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshClient.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Changes the specified user's password on the SSH server and authenticates.
            </summary>
            <param name="userName">The name of the user to change his password.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <returns>Password change result.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/>, <paramref name="oldPassword"/>, or <paramref name="newPassword"/> is a null reference.</exception>
            <exception cref="T:System.ObjectDisposedException">The current object is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The client is not connected to the server.</exception>
            <exception cref="T:ComponentPro.Net.SecureShellException">An error occurred while changing the password.</exception>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshClient.Encoding">
            <summary>
            Gets or sets the <see cref="T:System.Text.Encoding">Encoding</see> to use to encode and decode command parameters and server responses.
            </summary>
            <value>The <see cref="T:System.Text.Encoding">Encoding</see> to use to encode and decode command parameters and server responses. Default is <see cref="T:System.Text.Encoding">Encoding.Default</see>.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshClient.HostKey">
            <summary>
            Gets the server public key fingerprint.
            </summary>
            <value>Server fingerprint.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshClient.IsAuthenticated">
            <summary>
            Gets a value indicating whether the session is authenticated.
            </summary>
            <value>True if authenticated; false otherwise.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshClient.IsConnected">
            <summary>
            Gets a value indicating whether the session is connected.
            </summary>
            <remarks>
            <p>
            This property returns the latest known state of the session. 
            When it returns false, the session was either never connected, or no longer connected. 
            When it returns true, the session was connected at the time of the last I/O operation.
            </p>
            <p>
            <b>Note:</b> There is no guarantee that the session is still connected even though
            <see cref="P:ComponentPro.Net.Terminal.SshClient.IsConnected" /> returns true.
            </p>
            </remarks>
            <value>True if connected; false otherwise.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshClient.IsDisposed">
            <summary>
            Gets a value indicating whether the object is disposed.
            </summary>
            <value>True if disposed; false if not disposed.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshClient.LocalEndPoint">
            <summary>
            Gets the local client <see cref="T:System.Net.EndPoint" />.
            </summary>
            <value>The local client <see cref="T:System.Net.EndPoint" />.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshClient.Proxy">
            <summary>
            Gets or sets the network proxy to use to access a remote server.
            </summary>
            <value>The <see cref="P:ComponentPro.Net.Terminal.SshClient.Proxy" /> to use to access a remote server.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshClient.RemoteEndPoint">
            <summary>
            Gets the remote server <see cref="T:System.Net.EndPoint" />.
            </summary>
            <value>The remote server <see cref="T:System.Net.EndPoint" />.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshClient.Connection">
            <summary>
            Gets or sets the SSH session used by this SSH session.
            </summary>
            <value>SSH session.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshClient.Config">
            <summary>
            Gets or sets SSH object settings.
            </summary>
            <value>SSH object settings.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshClient.Timeout">
            <summary>
            Gets or sets the length of time in milliseconds before the operation times out (specify -1 or 0 to indicate that the request does not time out).
            </summary>
            <value>
            The length of time, in milliseconds, until the operation times out,
            or the value -1 or 0 to indicate that the request does not time out.
            Default is 60000 (60 seconds).
            </value>
            <remarks>
            <p>
            The internal timeout counter is reset every time data is sent
            or received from the server. This also means that data transfers only
            time out after x milliseconds of inactivity, not after x milliseconds
            from the start of the transfer.
            </p>
            <p>
            Minimal value is 1000. Setting this to a value lower than 1000 will set it to 1000.
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshClient.Version">
            <summary>
            Gets the version of the SSH component.
            </summary>
            <value>The version of the SSH component.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshClient.InvokeFromCurrentThreads">
            <summary>
            Gets a value indicating whether to raise events from the current thread or 
            to use a <see cref="T:System.Threading.SynchronizationContext" /> object available when an asynchronous operation was started.
            The default value is <c>false</c>.
            </summary>
            <value><c>true</c> to raise events directly from the current working thread; 
            <c>false</c> to raise them using a <see cref="T:System.Threading.SynchronizationContext" /> object.</value>
            <remarks>
            Synchronous methods always raise events from the current working thread.
            </remarks>
        </member>
        <member name="E:ComponentPro.Net.Terminal.SshClient.ChangePasswordCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ChangePasswordAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.SshClient.AuthenticateCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:AuthenticateAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.SshClient.ConnectCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ConnectAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.SshClient.DisconnectCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:DisconnectAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.SshClient.KeepAliveCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:KeepAliveAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.SshClient.CreateShellCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:CreateShellAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.SshClient.Banner">
            <summary>
            Occurs when a banner message is received from the server.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.SshClient.HostKeyVerifying">
            <summary>
            Occurs when a fingerprint is received from the server and needs to be validated.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.SshClient.KeyboardInteractiveAuthentication">
            <summary>
            Occurs when an authentication request is received from the server that cannot be answered programatically.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.SshClient.PasswordChangeRequest">
            <summary>
            Occurs when user's password need to be changed.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshClient.IsBusy">
            <summary>
            Indicates whether the client is busy.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshClient.ServerId">
            <summary>
            Gets the server Id (welcome message) returned after a successful connection.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshClient.TraceSource">
            <summary>
            Gets or sets the source object for all log messages generated by this object. If not set, the property returns the current object.
            </summary>
            <remarks>
            It is handy to set this property to a different object other than this object in some situation where all log messages should come from a single source.
            For example, in a build system, uploading files is just a child task of a main one, by assigning this property to the main task, 
            you can categorize all messages that come from the main task.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshClient.TraceListenerManager">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Net.Terminal.SshClient.TraceListenerManager"/> object to which the log messages generated by this object are sent. 
            If not set, the <see cref="F:ComponentPro.Diagnostics.XTrace.Default"/> trace listener manager is used. If this property is set to null, all messages from this object wont be logged.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.SshConnectionState">
            <summary>
            Represents the <see cref="T:ComponentPro.Net.Terminal.SshClient">Ssh</see> object connection state.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshConnectionState.Connected">
            <summary>
            Returns a value indicating whether the object is connected.
            </summary>
            <value>True if connected; oherwise false.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshConnectionState.NativeErrorCode">
            <summary>
            Gets the Win32 socket error code.
            </summary>
            <value>Win32 error code.</value>
            <remarks>Returns 0 if no socket error code is available.</remarks>
        </member>
        <member name="T:ComponentPro.Net.Terminal.SshConfig">
            <summary>
            Specifies various SSH settings.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshConfig.#ctor">
            <summary>
            Creates a new instance of <see cref="T:ComponentPro.Net.Terminal.SshConfig"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshConfig.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of the current instance.</returns>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshConfig.EnableSignaturePadding">
            <summary>
            Enable padding of RSA private key signatures (workaround for SSH servers that got the padding wrong).
            </summary>
            <value>True to enable signature padding; false to disable it.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshConfig.PostponeChannelClose">
            <summary>
            Postpone channel close requests (workaround for older versions of ssh.com and Cisco SSH servers).
            </summary>
            <remarks>Not supported on Windows store Apps platfors.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshConfig.RaiseEventsFromCurrentThread">
            <summary>
            Specifies whether to raise asynchronous events from the current working thread or 
            whether to raise them using a <see cref="T:System.Threading.SynchronizationContext" /> available when an asynchronous operation was started.
            </summary>
            <value>False (default) to raise events using <see cref="T:System.Threading.SynchronizationContext" />; true to raise them directly form the current working thread.</value>
            <remarks>Events of synchronous methods are always raised from the current working thread.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshConfig.SecureShellConfig">
            <summary>
            Gets or sets SSH session parameters.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshConfig.TryPasswordFirst">
            <summary>
            When authenticating using both password and private key, try password authentication first (default is to try the private key first).
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshConfig.WaitForServerWelcomeMessage">
            <summary>
            Wait for server SSH protocol welcome message before sending the client one.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TerminalShell">
            <summary>
            Represents a Unix-like or DOS-like shell.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalShell.EndOfResponse">
            <summary>
            A character that is used by the <see cref="M:ComponentPro.Net.Terminal.TerminalShell.ReadChar" /> method to represent an end of response.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.#ctor(ComponentPro.Net.Terminal.ShellChannel)">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.Terminal.TerminalShell" /> class based on the specified channel.
            </summary>
            <param name="channel">Communication channel.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.Close">
            <summary>
            Closed the communication channel.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.DetectKnownShell">
            <summary>
            This method is a part of the component infrastructure and is not intended to be used directly by user code.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.GetExitCode">
            <summary>
            Gets the exit code of the last command, if available. Only supported in ComponentPro SSH Shell with WellKnownShellMode
            and for Ssh.StartCommand method. Not supported in ComponentPro Telnet.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ReadToEnd">
            <summary>
            Reads a multi-line response from the server. 
            Returns null reference (Nothing in Visual Basic) if the end of response has been reached without any preceding data.
            </summary>
            <returns>Multi-line response if available; or null reference (Nothing in Visual Basic).</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ReadToEnd(System.String[])">
            <summary>
            Reads a multi-line response from the server. 
            Returns if either the question prompt has been received (and no other data are pending) 
            or the end of response has been reached.
            Returns null reference (Nothing in Visual Basic) if the end of response has been reached without any preceding data.
            </summary>
            <returns>Multi-line response if available; or null reference (Nothing in Visual Basic).</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ReadChar">
            <summary>
            Reads a character from the server. Returns an <see cref="F:ComponentPro.Net.Terminal.TerminalShell.EndOfResponse" /> character if the end of response has been reached.
            </summary>
            <returns>A response character if available; or <see cref="F:ComponentPro.Net.Terminal.TerminalShell.EndOfResponse" />.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ReadLine">
            <summary>
            Reads a single line of response from the server. 
            Returns null reference (Nothing in Visual Basic) if the end of response has been reached without any preceding data.
            </summary>
            <returns>Single line of response if available; or null reference (Nothing in Visual Basic).</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ReadLine(System.String[])">
            <summary>
            Reads a single line of response from the server.
            Returns if either end of line was detected or the question prompt has been received (and no other data are pending) 
            or the end of response has been reached.
            Returns null reference (Nothing in Visual Basic) if the end of response has been reached without any preceding data.
            </summary>
            <returns>Single line of response if available; or null reference (Nothing in Visual Basic).</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.SendBreak(System.Int32)">
            <summary>
            Sends a break request to the server. This may or may not have any effect. Caution: some Telnet servers
            don't handle this correctly, causing subsequent commands to fail!
            </summary>
            <param name="breakLength">Break length, in milliseconds (if supported by the underlying channel).</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.SendCommand(System.String)">
            <summary>
            Sends a command to the server. This assumes that either there is no command running at the moment or that a question prompt was encountered.
            </summary>
            <param name="command">Command to send.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.OnReadLineCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.TerminalShell.ReadLineCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ReadLineAsync(System.String[],ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously reads a single line of response from the server.
            Returns if either end of line was detected or the question prompt has been received (and no other data are pending) 
            or the end of response has been reached.
            Returns null reference (Nothing in Visual Basic) if the end of response has been reached without any preceding data.
            </summary>
            <param name="questionPrompt">The possible prompts.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ReadLineAsync(System.String[],System.Object)">
            <summary>
            Asynchronously reads a single line of response from the server.
            Returns if either end of line was detected or the question prompt has been received (and no other data are pending) 
            or the end of response has been reached.
            Returns null reference (Nothing in Visual Basic) if the end of response has been reached without any preceding data.
            </summary>
            <param name="questionPrompt">The possible prompts.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ReadLineAsync(System.String[])">
            <summary>
            Asynchronously reads a single line of response from the server.
            Returns if either end of line was detected or the question prompt has been received (and no other data are pending) 
            or the end of response has been reached.
            Returns null reference (Nothing in Visual Basic) if the end of response has been reached without any preceding data.
            </summary>
            <param name="questionPrompt">The possible prompts.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ReadLineAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously reads a single line of response from the server. 
            Returns null reference (Nothing in Visual Basic) if the end of response has been reached without any preceding data.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ReadLineAsync(System.Object)">
            <summary>
            Asynchronously reads a single line of response from the server. 
            Returns null reference (Nothing in Visual Basic) if the end of response has been reached without any preceding data.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ReadLineAsync">
            <summary>
            Asynchronously reads a single line of response from the server. 
            Returns null reference (Nothing in Visual Basic) if the end of response has been reached without any preceding data.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.OnReadToEndCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.TerminalShell.ReadToEndCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ReadToEndAsync(System.String[],ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously reads a single line of response from the server.
            Returns if either end of line was detected or the question prompt has been received (and no other data are pending) 
            or the end of response has been reached.
            Returns null reference (Nothing in Visual Basic) if the end of response has been reached without any preceding data.
            </summary>
            <param name="questionPrompt">The possible prompts.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ReadToEndAsync(System.String[],System.Object)">
            <summary>
            Asynchronously reads a single line of response from the server.
            Returns if either end of line was detected or the question prompt has been received (and no other data are pending) 
            or the end of response has been reached.
            Returns null reference (Nothing in Visual Basic) if the end of response has been reached without any preceding data.
            </summary>
            <param name="questionPrompt">The possible prompts.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ReadToEndAsync(System.String[])">
            <summary>
            Asynchronously reads a single line of response from the server.
            Returns if either end of line was detected or the question prompt has been received (and no other data are pending) 
            or the end of response has been reached.
            Returns null reference (Nothing in Visual Basic) if the end of response has been reached without any preceding data.
            </summary>
            <param name="questionPrompt">The possible prompts.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ReadToEndAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously reads a single line of response from the server. 
            Returns null reference (Nothing in Visual Basic) if the end of response has been reached without any preceding data.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ReadToEndAsync(System.Object)">
            <summary>
            Asynchronously reads a single line of response from the server. 
            Returns null reference (Nothing in Visual Basic) if the end of response has been reached without any preceding data.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ReadToEndAsync">
            <summary>
            Asynchronously reads a single line of response from the server. 
            Returns null reference (Nothing in Visual Basic) if the end of response has been reached without any preceding data.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.OnConsolePressKeyCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Object})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.TerminalShell.ConsolePressKeyCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ConsolePressKeyAsync(System.ConsoleKeyInfo,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Object},System.Object)">
            <summary>
            Asynchronously sends the specified key to the server, simulating keyboard input.
            </summary>
            <param name="key">Key to send.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ConsolePressKeyAsync(System.ConsoleKeyInfo,System.Object)">
            <summary>
            Asynchronously sends the specified key to the server, simulating keyboard input.
            </summary>
            <param name="key">Key to send.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ConsolePressKeyAsync(System.ConsoleKeyInfo)">
            <summary>
            Asynchronously sends the specified key to the server, simulating keyboard input.
            </summary>
            <param name="key">Key to send.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ConsolePressKeyAsync(ComponentPro.Net.Terminal.FunctionKey,System.ConsoleModifiers,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Object},System.Object)">
            <summary>
            Asynchronously sends the specified key to the server, simulating keyboard input.
            </summary>
            <param name="key">Function key to send.</param>
            <param name="modifiers">Console modifiers to use.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ConsolePressKeyAsync(ComponentPro.Net.Terminal.FunctionKey,System.ConsoleModifiers,System.Object)">
            <summary>
            Asynchronously sends the specified key to the server, simulating keyboard input.
            </summary>
            <param name="key">Function key to send.</param>
            <param name="modifiers">Console modifiers to use.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ConsolePressKeyAsync(ComponentPro.Net.Terminal.FunctionKey,System.ConsoleModifiers)">
            <summary>
            Asynchronously sends the specified key to the server, simulating keyboard input.
            </summary>
            <param name="key">Function key to send.</param>
            <param name="modifiers">Console modifiers to use.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.OnSendBreakCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.TerminalShell.SendBreakCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.SendBreakAsync(System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously Sends a break request to the server. This may or may not have any effect.
            </summary>
            <param name="breakLength">Break length, in milliseconds (if supported by the underlying channel).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.SendBreakAsync(System.Int32,System.Object)">
            <summary>
            Asynchronously Sends a break request to the server. This may or may not have any effect.
            </summary>
            <param name="breakLength">Break length, in milliseconds (if supported by the underlying channel).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.SendBreakAsync(System.Int32)">
            <summary>
            Asynchronously Sends a break request to the server. This may or may not have any effect.
            </summary>
            <param name="breakLength">Break length, in milliseconds (if supported by the underlying channel).</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.OnExecuteCommandCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.TerminalShell.ExecuteCommandCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ExecuteCommandAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously executes the specified command on the server.
            </summary>
            <param name="command">The command to send to the server.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ExecuteCommandAsync(System.String,System.Object)">
            <summary>
            Asynchronously executes the specified command on the server.
            </summary>
            <param name="command">The command to send to the server.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ExecuteCommandAsync(System.String)">
            <summary>
            Asynchronously executes the specified command on the server.
            </summary>
            <param name="command">The command to send to the server.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.OnSendCommandCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.TerminalShell.SendCommandCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.SendCommandAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends a command to the server. This assumes that either there is no command running at the moment or that a question prompt was encountered.
            </summary>
            <param name="command">Command to send.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.SendCommandAsync(System.String,System.Object)">
            <summary>
            Asynchronously sends a command to the server. This assumes that either there is no command running at the moment or that a question prompt was encountered.
            </summary>
            <param name="command">Command to send.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.SendCommandAsync(System.String)">
            <summary>
            Asynchronously sends a command to the server. This assumes that either there is no command running at the moment or that a question prompt was encountered.
            </summary>
            <param name="command">Command to send.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.OnSendPasswordCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.TerminalShell.SendPasswordCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.SendPasswordAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously sends a password to the server. This assumes that either there is no command running at the moment or that a question prompt was encountered.
            </summary>
            <param name="command">Password to send.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.SendPasswordAsync(System.String,System.Object)">
            <summary>
            Asynchronously sends a password to the server. This assumes that either there is no command running at the moment or that a question prompt was encountered.
            </summary>
            <param name="command">Password to send.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.SendPasswordAsync(System.String)">
            <summary>
            Asynchronously sends a password to the server. This assumes that either there is no command running at the moment or that a question prompt was encountered.
            </summary>
            <param name="command">Password to send.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.OnWriteRawDataCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.TerminalShell.WriteRawDataCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.WriteRawDataAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously sends data to the server directly.
            </summary>
            <param name="rawData">The data string to send.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.WriteRawDataAsync(System.String,System.Object)">
            <summary>
            Asynchronously sends data to the server directly.
            </summary>
            <param name="rawData">The data string to send.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.WriteRawDataAsync(System.String)">
            <summary>
            Asynchronously sends data to the server directly.
            </summary>
            <param name="rawData">The data string to send.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.OnReadRawDataCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.TerminalShell.ReadRawDataCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ReadRawDataAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously reads raw data string from the server.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ReadRawDataAsync(System.Object)">
            <summary>
            Asynchronously reads raw data string from the server.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ReadRawDataAsync">
            <summary>
            Asynchronously reads raw data string from the server.
            </summary>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.Send(System.ConsoleKeyInfo)">
            <summary>
            Sends the specified key to the server, simulating keyboard input.
            </summary>
            <param name="key">Key to send.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ExecuteCommand(System.String)">
            <summary>
            Runs a remote command and returns its response. It calls <see cref="M:ComponentPro.Net.Terminal.TerminalShell.SendCommand(System.String)"/> and <see cref="O:ReadToEnd"/> methods.
            </summary>
            <param name="command">Command to run.</param>
            <returns>Command response.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.SendPassword(System.String)">
            <summary>
            Sends a password to the server. This assumes that either there is no command running at the moment or that a question prompt was encountered.
            </summary>
            <param name="password">The password to send.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.WriteRawData(System.String)">
            <summary>
            Sends data to the server directly.
            </summary>
            <param name="rawData">The data string to send.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.ReadRawData">
            <summary>
            Reads raw data string from the server.
            </summary>
            <returns>The raw data string from the server.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalShell.SetPrompt(System.String,ComponentPro.Net.Terminal.ShellPromptType,System.Char[])">
            <summary>
            Sets the prompt sequence that is used to detect response end.
            </summary>
            <param name="prompt">The prompt sequence.</param>
            <param name="promptType">The input prompt type.</param>
            <param name="stripEndingChars">The list of characters at the end of responses from the server to be stripped out.</param>
            <remarks>
            Many servers add space characters ' ' to the end of the response.
            So you can specify the <paramref name="stripEndingChars"/> as ' ' to strip out all ending space characters to get the accurate server prompt.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalShell.IsConnected">
            <summary>
            Returns a value indicating whether the <see cref="T:ComponentPro.Net.Terminal.TerminalShell" /> object is connected.
            </summary>
            <value>True if connected; false if not connected.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalShell.Encoding">
            <summary>
            Gets or sets the character encoding for incoming and outgoing data.
            </summary>
            <value>Character encoding.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalShell.IsCommandRunning">
            <summary>
            Returns a value indicating whether a command is currently running.
            </summary>
            <value>True if a command is running; false if no command is running.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalShell.DetectedPrompt">
            <summary>
            Gets the last matched prompt (set when the end of command response has been reached).
            Only works in prompt-based mode (when <see cref="P:ComponentPro.Net.Terminal.TerminalShell.AutoProcessing"/> is <c>false</c>).
            </summary>
            <value>The last matched prompt.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalShell.StripEscapeSequences">
            <summary>
            Gets or sets a value indicating whether to strip escape sequences from the incoming data.
            </summary>
            <value>True to strip escape sequences; false to leave them intact.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalShell.Timeout">
            <summary>
            Gets or sets the length of time in milliseconds before an operation times out (specify -1 or 0 to indicate that the request does not time out).
            </summary>
            <value>
            The length of time, in milliseconds, until an operation times out,
            or the value -1 or 0 to indicate that the request does not time out.
            Default is 60000 (60 seconds).
            </value>
            <remarks>
            <p>
            The internal timeout counter is reset every time data is sent
            or received from to server.
            </p>
            <p>
            Minimal value is 1000. Setting this to a value lower than 1000 will set it to 1000.
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalShell.InvokeFromCurrentThreads">
            <summary>
            Gets a value indicating whether to raise events from the current thread or 
            to use a <see cref="T:System.Threading.SynchronizationContext" /> object available when an asynchronous operation was started.
            The default value is <c>false</c>.
            </summary>
            <value><c>true</c> to raise events directly from the current working thread; 
            <c>false</c> to raise them using a <see cref="T:System.Threading.SynchronizationContext" /> object.</value>
            <remarks>
            Synchronous methods always raise events from the current working thread.
            </remarks>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TerminalShell.ReadLineCompleted">
            <summary>
            Occurs after a <see cref="O:ReadLineAsync"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TerminalShell.ReadToEndCompleted">
            <summary>
            Occurs after a <see cref="O:ReadToEndAsync"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TerminalShell.ConsolePressKeyCompleted">
            <summary>
            Occurs after a <see cref="O:ConsolePressKeyAsync"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TerminalShell.SendBreakCompleted">
            <summary>
            Occurs after a <see cref="O:SendBreakAsync"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TerminalShell.ExecuteCommandCompleted">
            <summary>
            Occurs after a <see cref="O:ExecuteCommandAsync"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TerminalShell.SendCommandCompleted">
            <summary>
            Occurs after a <see cref="O:SendCommandAsync"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TerminalShell.SendPasswordCompleted">
            <summary>
            Occurs after a <see cref="O:SendPasswordAsync"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TerminalShell.WriteRawDataCompleted">
            <summary>
            Occurs after a <see cref="O:WriteRawDataAsync"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TerminalShell.ReadRawDataCompleted">
            <summary>
            Occurs after a <see cref="O:ReadRawDataAsync"/> call has been completed.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalShell.AutoProcessing">
            <summary>
            Gets the value indicating whether the auto-processing mode is enabled.
            </summary>
            <value><c>true</c> if auto-processing mode enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ComponentPro.Net.Terminal.ShellChannel">
            <summary>
            Defines a generalized shell communication channel API. Intended to be used by ComponentPro Terminal infrastructure.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ShellChannel.Close">
            <summary>
            Closes the channel.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ShellChannel.GetSessionStatus">
            <summary>
            Gets a value that indicates whether the <see cref="T:ComponentPro.Net.Terminal.ShellChannel" /> is currently connected to a remote host.
            </summary>
            <returns>Current connection state.</returns>
            <remarks>
            <p>
            As long as there is still data available to be read from the socket, this method will indicate that
            the <see cref="T:ComponentPro.Net.Terminal.ShellChannel" /> is connected, even though technically it might have already be considered
            disconnected based on one's point of view.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ShellChannel.HasFlag(ComponentPro.Net.Terminal.ShellChannelOptions)">
            <summary>
            Determines whether the specified option is set.
            </summary>
            <param name="option">An option to test.</param>
            <returns>True if the option is set; false otherwise.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ShellChannel.KeepAlive">
            <summary>
            Sends a keep alive packet (NOOP) to the server.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ShellChannel.Poll(System.Int32)">
            <summary>
            Determines the status of the channel.
            </summary>
            <param name="microSeconds">Time to wait for a response, in microseconds.</param>
            <returns>Current status of the channel.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ShellChannel.Receive(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Receives the specified amount of data from the remote connection end into a specific location of the receive buffer and using the supplied flags.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The position in the buffer at which to store the received data.</param>
            <param name="count">The number of bytes to receive.</param>
            <returns>The number of bytes received.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ShellChannel.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends the specified amount of data to the remote connection end, starting at the indicated location in the data and using the supplied flags.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="offset">The position in the data buffer to begin sending data.</param>
            <param name="count">The number of bytes to send.</param>
            <returns>The number of bytes sent.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ShellChannel.SendBreak(System.Int32)">
            <summary>
            Sends a break request (if supported by the underlying channel).
            </summary>
            <param name="breakLength">Break length, in milliseconds (if supported by the underlying channel).</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ShellChannel.SetTerminalSize(System.Int32,System.Int32)">
            <summary>
            Sets a new terminal size.
            </summary>
            <param name="width">Number of columns.</param>
            <param name="height">Number of rows.</param>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ShellChannel.Available">
            <summary>
            Gets the amount of data that has been received from the remote connection end and is available to be read.
            </summary>
            <value>
            The number of bytes of data that has been received from the network and is available
            to be read, or 0 if no data is available.
            </value>
            <remarks>
            After the channel has been closed, this property will still indicate there is data to be read
            if there is 1 byte or more data in the receive buffer. If there is no more data to be read,
            a value of 0 will be returned.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ShellChannel.Connected">
            <summary>
            Gets a value that indicates whether the <see cref="T:ComponentPro.Net.Terminal.ShellChannel" /> is connected to a remote host as of the last Send or Receive operation. 
            </summary>
            <value>true if the channel is connected; otherwise, false.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ShellChannel.ExitCode">
            <summary>
            Gets the channel exit status. Returns 0 if not available.
            </summary>
            <value>Channel exit status.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ShellChannel.Options">
            <summary>
            Gets channel flags.
            </summary>
            <value>Channel flags.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ShellChannel.TerminalHeight">
            <summary>
            Gets the terminal height.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ShellChannel.TerminalWidth">
            <summary>
            Gets the terminal width.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ShellChannel.TreatExtendedDataAsNormal">
            <summary>
            Gets or sets a value specifying how to treat extended data.
            </summary>
            <value>Value specifying how to treat extended data.</value>
        </member>
        <member name="T:ComponentPro.Net.Terminal.SshTunnel">
            <summary>
            Represents an active SSH tunnel.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTunnel.Close">
            <summary>
            Closes the tunnel. Stops new connections from being accepted, but leaves the current connections active.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.ServerInstructionReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.Terminal.ITerminal.ServerInstructionReceived" /> event.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ServerInstructionReceivedEventArgs.Action">
            <summary>
            Gets a value indicating which client command is requested by the server.
            </summary>
            <returns>A client command requested by the server.</returns>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ServerInstructionReceivedEventArgs.Number">
            <summary>
            Gets a number argument of the command or 0 if the command has no number argument.
            </summary>
            <returns>A number argument of the command or 0 if the command has no number argument.</returns>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ServerInstructionReceivedEventArgs.Number2">
            <summary>
            Gets a second number argument of the command or 0 if the command has no second number argument.
            </summary>
            <returns>A second number argument of the command or 0 if the command has no second number argument.</returns>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ServerInstructionReceivedEventArgs.Text">
            <summary>
            Gets a string argument of the command or null reference (Nothing in Visual Basic) if the command has no string argument.
            </summary>
            <returns>A string argument of the command or null reference (Nothing in Visual Basic) if the command has no string argument.</returns>
        </member>
        <member name="T:ComponentPro.Net.Terminal.AutoWrapMode">
            <summary>
            Specifies whether to turn auto-wrap on or off or whether to use DOS-like mode.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.AutoWrapMode.Off">
            <summary>Off.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.AutoWrapMode.On">
            <summary>On.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.AutoWrapMode.Dos">
            <summary>DOS mode.</summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TerminalBackspaceKey">
            <summary>
            Specifies whether the backspace key sends key code 08 (also known as ^H or \b) or 7F (also known as DEL or ^?).
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalBackspaceKey.Backspace">
            <summary>Backspace key sends key code 08 (also known as ^H or \b).</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalBackspaceKey.Del">
            <summary>Backspace key sends key code 7F (also known as DEL or ^?).</summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.BlinkingText">
            <summary>
            Specifies the appearance of the blinking text.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.BlinkingText.LightColor">
            <summary>Light foreground color.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.BlinkingText.Italic">
            <summary>Italic text.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.BlinkingText.Underline">
            <summary>Underlined text.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.BlinkingText.Bold">
            <summary>Bold text.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.BlinkingText.InverseColor">
            <summary>Inversed color.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.BlinkingText.LightBackColor">
            <summary>Light background color.</summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.BreakSequence">
            <summary>
            Determines which sequence is sent by the <see cref="M:ComponentPro.Net.Terminal.TerminalControl.SendBreak(System.Int32)" /> and <see cref="M:ComponentPro.Net.Terminal.VirtualTerminal.SendBreak(System.Int32)" /> method.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.BreakSequence.Default">
            <summary>
            Default behavior of the used protocol.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.BreakSequence.TelnetBreakCommand">
            <summary>
            The Telnet Command Break (0xFF 0xF3) is sent. <i>This is default for Telnet.</i>
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.BreakSequence.TelnetBreakCode">
            <summary>
            The Telnet Break Code (0x81) is sent.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.BreakSequence.SshBreakCommand">
            <summary>
            The SSH Break command is sent. <i>This is default for SSH.</i>
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.BreakSequence.ControlC">
            <summary>
            The sequence equivalent to CTRL+C (0x03 - End of Text) is sent.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.BreakSequence.ControlX">
            <summary>
            The sequence equivalent to CTRL+X (0x18 - Cancel) is sent.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.BreakSequence.ControlZ">
            <summary>
            The sequence equivalent to CTRL+Z (0x1A - Substitute) is sent.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.ClipboardOperationEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.Terminal.TerminalControl.Pasting" /> and <see cref="E:ComponentPro.Net.Terminal.TerminalControl.Copying" /> events.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ClipboardOperationEventArgs.Text">
            <summary>
            Gets or sets the text to be copied from/to clipboard.
            If set to null reference (Nothing in Visual Basic) the clipboard operation will be skipped.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.ClipboardSelectionCopyMode">
            <summary>
            Determines behavior for copying selected text into clipboard.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ClipboardSelectionCopyMode.CopyAutomatically">
            <summary>
            Selected text is copied into clipboard automatically.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ClipboardSelectionCopyMode.DoNotCopy">
            <summary>
            Selected text is not copied into clipboard.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TerminalColorScheme">
            <summary>
            Specifies the terminal color mode.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalColorScheme.Color">
            <summary>The terminal is using color.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalColorScheme.Monochrome">
            <summary>The terminal is monochrome.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalColorScheme.Custom">
            <summary>The terminal uses custom colors. Use <see cref="P:ComponentPro.Net.Terminal.ITerminal.ForeColorIndex"/>, <see cref="P:ComponentPro.Net.Terminal.ITerminal.BackColorIndex"/>, <see cref="P:ComponentPro.Net.Terminal.ITerminal.BoldTextColorIndex"/>, 
            <see cref="P:ComponentPro.Net.Terminal.ITerminal.DoubleUnderlinedTextColorIndex"/>, <see cref="P:ComponentPro.Net.Terminal.ITerminal.GrayedTextColorIndex"/>, <see cref="P:ComponentPro.Net.Terminal.ITerminal.ItalicTextColorIndex"/>, and <see cref="P:ComponentPro.Net.Terminal.ITerminal.SingleUnderlinedTextColorIndex"/> to control these.</summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.ConsoleUnderline">
            <summary>
            Character underline style.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ConsoleUnderline.None">
            <summary>No underline.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ConsoleUnderline.Single">
            <summary>Single underline.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ConsoleUnderline.Double">
            <summary>Double underline.</summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.CursorColorEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.Terminal.TerminalControl.CursorColor">CursorColor</see> event.
            </summary>
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.Terminal.TerminalControl.CursorColor"/> event.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.CursorColorEventArgs.BackColor">
            <summary>
            Gets or sets the background color (a palette index) of the cursor cell.
            </summary>
            <summary>
            Gets or sets the background color.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.CursorColorEventArgs.Blink">
            <summary>
            Gets the blink state.
            </summary>
            <summary>
            Indicates whether the cursor is blink.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.CursorColorEventArgs.CellBackColor">
            <summary>
            Gets the original background color (a palette index) of the cell at the cursor position.
            </summary>
            <summary>
            Gets the cell's background color.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.CursorColorEventArgs.CellForeColor">
            <summary>
            Gets the original foreground color (a palette index) of the cell at the cursor position.
            </summary>
            <summary>
            Gets the cell's fore color.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.CursorColorEventArgs.ForeColor">
            <summary>
            Gets or sets the foreground color (a palette index) of the cursor cell.
            </summary>
            <summary>
            Gets or sets the fore color.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TerminalCursorKeys">
            <summary>
            Cursor key mode.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalCursorKeys.Normal">
            <summary>Normal mode.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalCursorKeys.Application">
            <summary>Application mode.</summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.DataReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.Terminal.ITerminal.DataReceived">DataReceived</see> event.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.DataReceivedEventArgs.RawData">
            <summary>
            Gets the all (unmodified) data received from the server.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.DataReceivedEventArgs.StrippedData">
            <summary>
            Gets the stripped data received from the server. All escape sequences are stripped.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TerminalErrorEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.Terminal.TerminalControl.Error">Error</see> event.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Terminal.TerminalErrorEventArgs" /> class with the specified exception
            and a default Handled property value of false.
            </summary>
            <param name="exception">An Exception.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalErrorEventArgs.#ctor(System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Terminal.TerminalErrorEventArgs" /> class with the specified exception
            and default value for the Handled property.
            </summary>
            <param name="exception">An Exception.</param>
            <param name="defaultHandledValue">The default value for the Handled property.</param>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalErrorEventArgs.Exception">
            <summary>
            Gets the Exception.
            </summary>
            <value>An Exception.</value>
        </member>
        <member name="T:ComponentPro.Net.Terminal.FileReceiver">
            <summary>
            Provides functionality for receiving files using terminal.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.FileReceiver.Close">
            <summary>
            Closes the <see cref="T:ComponentPro.Net.Terminal.FileReceiver" />, so other terminal operations can be performed.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.FileReceiver.ReadNext">
            <summary>
            Receives next file header to be processed.
            </summary>
            <returns>True if the sender is willing to send next file; false if there is no file to receive.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.FileReceiver.Receive(System.String)">
            <summary>
            Saves the incoming file to the specified path.
            </summary>
            <param name="path">Path where to save the incoming file.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.FileReceiver.Receive(System.IO.Stream)">
            <summary>
            Saves the incoming file to the specified stream.
            </summary>
            <param name="target">Stream where to save the incoming file.</param>
        </member>
        <member name="P:ComponentPro.Net.Terminal.FileReceiver.FileName">
            <summary>
            Gets the current file name.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.FileReceiver.IsFinished">
            <summary>
            Gets a value indicating whether the <see cref="T:ComponentPro.Net.Terminal.FileReceiver" /> has finished working.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.FileReceiver.LastWriteTime">
            <summary>
            Gets the current file last modification date and time if specified by the sender.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.FileReceiver.Length">
            <summary>
            Gets the current file length if specified by the sender.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.FileSender">
            <summary>
            Provides functionality for sending files using terminal.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.FileSender.Close">
            <summary>
            Aborts currently processing file (if any) and closes the <see cref="T:ComponentPro.Net.Terminal.FileSender" />, so other terminal operations can be performed.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.FileSender.Finish">
            <summary>
            Finishes the file transfer (informs receiver process to finish).
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.FileSender.Send(System.String)">
            <summary>
            Sends a file to the remote end.
            </summary>
            <param name="path">File path to read data from.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.FileSender.Send(System.IO.Stream,System.String)">
            <summary>
            Sends a file to the remote end.
            </summary>
            <param name="source">Stream to read data from.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.FileSender.Send(System.IO.Stream,System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime})">
            <summary>
            Sends a file to the remote end.
            </summary>
            <param name="source">Stream to read data from.</param>
            <param name="fileName">Name of the file.</param>
            <param name="length">Length of the file is known.</param>
            <param name="lastWriteTime">Date and time of last modification if known.</param>
        </member>
        <member name="P:ComponentPro.Net.Terminal.FileSender.IsFinished">
            <summary>
            Gets a value indicating whether the <see cref="T:ComponentPro.Net.Terminal.FileSender" /> has finished working.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.FileTransferBlockSize">
            <summary>
            Specifies a size of data block for file transfers.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FileTransferBlockSize.Default">
            <summary>
            Default value for the specified protocol.
            (YMODEM - 128 bytes).
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FileTransferBlockSize.OneKilobyte">
            <summary>
            1KB - if supported by the protocol (uses YMODEM-1K for YMODEM).
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.FileTransferProgressChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.Terminal.FileTransfers.TransferProgressChanged" /> event.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.FileTransferProgressChangedEventArgs.BytesTransferred">
            <summary>
            Gets the total number of bytes transferred during the transfer of the current file.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.FileTransferProgressChangedEventArgs.FileName">
            <summary>
            Gets the name of the currently transferring file.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.FileTransferProgressChangedEventArgs.LastWriteTime">
            <summary>
            Gets the last modified date and time of the currently transferring file if known.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.FileTransferProgressChangedEventArgs.Length">
            <summary>
            Gets the length of the currently transferring file if known.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.FileTransferProgressChangedEventArgs.ProgressPercentage">
            <summary>
            Gets a number between 0 and 100 representing the percentage of completeness of the currently transferring file.
            The value is computed from <see cref="P:ComponentPro.Net.Terminal.FileTransferProgressChangedEventArgs.Length" />. If the <see cref="P:ComponentPro.Net.Terminal.FileTransferProgressChangedEventArgs.Length" /> is not known 
            the value is 0 for whole time of the transfer and 100 when the file is transferred.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.FileTransferProgressChangedEventArgs.State">
            <summary>
            Gets the state of the currently transferring file.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.FileTransferProgressState">
            <summary>
            Specifies current transfer state.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FileTransferProgressState.FileTransferring">
            <summary>
            Transfer was stated.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FileTransferProgressState.DataBlockTransferred">
            <summary>
            A data block was transferred.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FileTransferProgressState.FileTransferred">
            <summary>
            Transfer of a single file was finished.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FileTransferProgressState.TransferCompleted">
            <summary>
            Whole transfer was finished.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.FileTransfers">
            <summary>
            Provides functionality for file transfers. Makes it possible to programmatically send and receive files using terminal.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.FileTransfers.StartReceiver">
            <summary>
            Initiates receiving of files using specified protocol.
            From that moment, all data received from the remote end are interpreted by the protocol, so they are not printed on the terminal.
            </summary>
            <returns><see cref="T:ComponentPro.Net.Terminal.FileReceiver" /> object, which can be used to receive files.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.FileTransfers.StartSender">
            <summary>
            Initiates sending of files using specified protocol.
            From that moment, all data received from the remote end are interpreted by the protocol, so they are not printed on the terminal.
            </summary>
            <returns><see cref="T:ComponentPro.Net.Terminal.FileSender" /> object, which can be used to send files.</returns>
        </member>
        <member name="P:ComponentPro.Net.Terminal.FileTransfers.BlockSize">
            <summary>
            Gets or sets a size of data block the sender uses when sending data (effective for sender only). 
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.FileTransfers.EnableStreaming">
            <summary>
            Gets or sets a value indicating whether the receiver initiates receiving in stream mode (effective for receiver only). 
            Use this mode with caution. There is serious risk of buffer overrun on the serial port, that the protocol would not notice.
            </summary>
            <remarks>Enables YMODEM-G streaming for YMODEM.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.FileTransfers.Terminal">
            <summary>
            Gets the containing terminal object.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.FileTransfers.Timeout">
            <summary>
            Gets or sets the length of time in milliseconds before the operation times out 
            (specify -1 or 0 to indicate that the request does not time out).
            </summary>
            <value>
            The length of time, in milliseconds, until the operation times out,
            or the value -1 or 0 to indicate that the request does not time out.
            Default is 60000 (60 seconds).
            </value>
            <remarks>
            <p>
            The internal timeout counter is reset every time data is received from to server. 
            This also means that data transfers only time out after x milliseconds of inactivity, 
            not after x milliseconds from the start of the transfer.
            </p>
            <p>
            Minimal value is 1000. Setting this to a value lower than 1000 will set it to 1000.
            </p>
            </remarks>
        </member>
        <member name="E:ComponentPro.Net.Terminal.FileTransfers.TransferProgressChanged">
            <summary>
            Occurs when a transfer progress is changed.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.FunctionKey">
            <summary>
            Specifies a list of function keys.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.Escape">
            <summary>The Escape key (ESC).</summary>		
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.Backspace">
            <summary>The Backspace key.</summary>		
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.Tab">
            <summary>The Tab key.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.Enter">
            <summary>The Enter key.</summary>		
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.F1">
            <summary>The F1 key.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.F2">
            <summary>The F2 key.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.F3">
            <summary>The F3 key.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.F4">
            <summary>The F4 key.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.F5">
            <summary>The F5 key.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.F6">
            <summary>The F6 key.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.F7">
            <summary>The F7 key.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.F8">
            <summary>The F8 key.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.F9">
            <summary>The F9 key.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.F10">
            <summary>The F10 key.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.F11">
            <summary>The F11 key.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.F12">
            <summary>The F12 key.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.F13">
            <summary>The F13 key.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.F14">
            <summary>The F14 key.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.F15">
            <summary>The F15 key.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.F16">
            <summary>The F16 key.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.F17">
            <summary>The F17 key.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.F18">
            <summary>The F18 key.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.F19">
            <summary>The F19 key.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.F20">
            <summary>The F20 key.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.Insert">
            <summary>The Insert key (INS).</summary>		
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.Delete">
            <summary>The Delete key (DEL).</summary>		
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.Home">
            <summary>The Home key.</summary>		
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.End">
            <summary>The End key.</summary>		
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.PageUp">
            <summary>The Page up key.</summary>		
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.PageDown">
            <summary>The Page down key.</summary>		
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.LeftArrow">
            <summary>The Left arrow key.</summary>		
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.RightArrow">
            <summary>The Right arrow key.</summary>		
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.UpArrow">
            <summary>The Up arrow key.</summary>		
        </member>
        <member name="F:ComponentPro.Net.Terminal.FunctionKey.DownArrow">
            <summary>The Down arrow key.</summary>		
        </member>
        <member name="T:ComponentPro.Net.Terminal.TerminalKeysMode">
            <summary>
            Specifies how to encode function keys such as as F1-F20, Ins, Del, Home, End, PgUp and PgDown.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalKeysMode.CommonExtended">
            <summary>Extended version of the Common mode. Key modifiers such as Alt, Shift, Ctrl are also sent.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalKeysMode.Common">
            <summary>Encoded as most common sequence ESC[number~ .</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalKeysMode.Linux">
            <summary>Most common on the Linux.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalKeysMode.XtermR6">
            <summary>Xterm R6 compatible.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalKeysMode.VT400">
            <summary>VT 400 compatible.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalKeysMode.VT100Plus">
            <summary>VT 100+ compatible.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalKeysMode.Sco">
            <summary>SCO compatible.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalKeysMode.CommonAlternative">
            <summary>F1 - F10 are encoded as ESC 1, ESC 2, ..., ESC 9, ESC 0.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalKeysMode.VT52">
            <summary>VT 52 compatible.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalKeysMode.LinuxAlternative">
            <summary>Alternative to the Linux mode.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalKeysMode.ScoAlternative">
            <summary>Alternative to the SCO mode.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalKeysMode.Wyse60">
            <summary>Wyse 60 compatible.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalKeysMode.HpUx">
            <summary>HP-UX compatible.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalKeysMode.Pick">
            <summary>Pick compatible.</summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TerminalHomeAndEndKeys">
            <summary>
            Home and End keys mode.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalHomeAndEndKeys.Standard">
            <summary>Standard mode.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalHomeAndEndKeys.Rxvt">
            <summary>RXVT mode.</summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.Interop.IScreen">
            <summary>
            Represents a custom screen.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.Interop.IScreen.Clear(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Clear the contents of the specified rectangle.
            </summary>
            <param name="left">X.</param>
            <param name="top">Y.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.Interop.IScreen.Copy(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy the contents of the specified rectangle.
            </summary>
            <param name="sourceLeft">Source X.</param>
            <param name="sourceTop">Source Y.</param>
            <param name="targetLeft">Target X.</param>
            <param name="targetTop">Target Y.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.Interop.IScreen.Resize(System.Int32,System.Int32)">
            <summary>
            Resize the screen.
            </summary>
            <param name="width">Screen width.</param>
            <param name="height">Screen height.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.Interop.IScreen.Scroll(System.Int32)">
            <summary>
            Scroll up by the specified number of rows.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.Interop.IScreen.SetColor(System.Int32,System.Int32)">
            <summary>
            Set the current foreground and background colors.
            </summary>
            <param name="foreground">Foreground color index.</param>
            <param name="background">Background color index.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.Interop.IScreen.SetCursorPosition(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Set cursor position and visibility.
            </summary>
            <param name="x">X.</param>
            <param name="y">Y.</param>
            <param name="visible">True if visible, false if not visible.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.Interop.IScreen.Write(System.Int32,System.Int32,System.String)">
            <summary>
            Write text at the specified position.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.Interop.TerminalExtensions">
            <summary>
            Extended terminal functionality.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.Interop.TerminalExtensions.SetCustomScreen(ComponentPro.Net.Terminal.ITerminal,ComponentPro.Net.Terminal.Interop.IScreen)">
            <summary>
            Sets the terminal's custom screen.
            </summary>
            <param name="terminal">Terminal whose custom screen to set.</param>
            <param name="screen">Custom screen to render into.</param>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TerminalNewLineType">
            <summary>
            New line sequence for outgoing data.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalNewLineType.CR">
            <summary>CR.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalNewLineType.CRLF">
            <summary>CR/LF</summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.PollResult">
            <summary>
            Defines the results for the <see cref="M:ComponentPro.Net.Terminal.ShellChannel.Poll(System.Int32)" /> method.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.PollResult.NoData">
            <summary>
            No data available.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.PollResult.DataAvailable">
            <summary>
            Data available for receive.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.PollResult.Closed">
            <summary>
            Channel was closed.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.RemoteResizeEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.Terminal.ITerminal.RemoteResize">RemoteResize</see> event.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.RemoteResizeEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Terminal.RemoteResizeEventArgs" /> class with the specified size.
            </summary>
            <param name="columns">Number of character columns.</param>
            <param name="rows">Number of character rows.</param>
        </member>
        <member name="P:ComponentPro.Net.Terminal.RemoteResizeEventArgs.Columns">
            <summary>
            Gets the number of character columns of the resized terminal.
            </summary>
            <value>Number of columns.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.RemoteResizeEventArgs.Rows">
            <summary>
            Gets the number of character rows of the resized terminal.
            </summary>
            <value>Number of rows.</value>
        </member>
        <member name="T:ComponentPro.Net.Terminal.RequestedAction">
            <summary>
            Determines the client command requested by the server (<see cref="E:ComponentPro.Net.Terminal.ITerminal.ServerInstructionReceived" /> event).
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.RequestedAction.DisconnectRequest">
            <summary>
            The server requests the client to disconnect.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.RequestedAction.RingBell">
            <summary>
            Make a bell sound.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.RequestedAction.ResizeScreen">
            <summary>
            Resize client screen. 
            Number of character columns of the resized terminal is specified by <see cref="P:ComponentPro.Net.Terminal.ServerInstructionReceivedEventArgs.Number" />.
            Number of character rows of the resized terminal is specified by <see cref="P:ComponentPro.Net.Terminal.ServerInstructionReceivedEventArgs.Number2" />.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.RequestedAction.ExecuteCommand">
            <summary>
            Execute a command on the client side. 
            The command is specified by <see cref="P:ComponentPro.Net.Terminal.ServerInstructionReceivedEventArgs.Text" />.
            Additional number argument is specified by <see cref="P:ComponentPro.Net.Terminal.ServerInstructionReceivedEventArgs.Number" />. 
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.RequestedAction.IconName">
            <summary>
            Set the icon name. 
            The name is specified by <see cref="P:ComponentPro.Net.Terminal.ServerInstructionReceivedEventArgs.Text" />.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.RequestedAction.WindowTitle">
            <summary>
            Set the window title. 
            The title is specified by <see cref="P:ComponentPro.Net.Terminal.ServerInstructionReceivedEventArgs.Text" />.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.SchemeColorName">
            <summary>
            Specifies scheme color names.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.SchemeColorName.Background">
            <summary>Standard background color.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.SchemeColorName.Foreground">
            <summary>Standard text color.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.SchemeColorName.Bold">
            <summary>Bold text color.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.SchemeColorName.Faint">
            <summary>Faint text color.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.SchemeColorName.Italic">
            <summary>Italic text color.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.SchemeColorName.SingleUnderline">
            <summary>Single underline color.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.SchemeColorName.DoubleUnderline">
            <summary>Double underline color.</summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.ScreenResizeEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.Terminal.TerminalControl.ScreenResize">ScreenResize</see> event.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.ScriptEvent">
            <summary>
            Represents a condition that can occur and be checked.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptEvent.And(ComponentPro.Net.Terminal.ScriptEvent,ComponentPro.Net.Terminal.ScriptEvent)">
            <summary>
            Both of the conditions must be met.
            </summary>
            <param name="e1">First condition.</param>
            <param name="e2">Second condition.</param>
            <returns>A <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that performs logical 'And' on its operand.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptEvent.CursorAtPosition(System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches a cursor appearing at the specified position.
            </summary>
            <param name="row">Row coordinate of the position.</param>
            <param name="column">Column coordinate of the position.</param>
            <returns><see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches a cursor appearing at the specified position.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptEvent.CursorInArea(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches a cursor appearing in the specified area.
            </summary>
            <param name="row">Row of the top left corner of the area.</param>
            <param name="column">Column of the top lef corner of the area.</param>
            <param name="width">Area width.</param>
            <param name="height">Area height.</param>
            <returns><see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches a cursor appearing in the specified area.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptEvent.Delay(System.Int32)">
            <summary>
            Gets a <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches a delay (no data arrived for the specified time).
            </summary>
            <param name="miliseconds">Delay duration (in miliseconds).</param>
            <returns><see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches the delay.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptEvent.Duration(System.Int32)">
            <summary>
            Gets a <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches when data are received for specified time.
            </summary>
            <param name="miliseconds">Duration time (in miliseconds).</param>
            <returns><see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches time spent on receiving and processing data.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptEvent.Equals(System.Object)">
            <summary>
            Returns a value indication whether this object equals another object.
            </summary>
            <param name="obj">Anotehr object.</param>
            <returns>True if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptEvent.FromRegex(System.Text.RegularExpressions.Regex)">
            <summary>
            Gets a <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches the regular expression.
            </summary>
            <param name="regex">Regular expression to match</param>
            <returns><see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches the regular expression.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptEvent.FromRegex(System.String)">
            <summary>
            Gets a <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches the regular expression.
            </summary>
            <param name="pattern">Regular expression pattern to match.</param>
            <returns><see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches the regular expression.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptEvent.FromString(System.String)">
            <summary>
            Gets a <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches the specified string.
            </summary>
            <param name="text">String to match</param>
            <returns><see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches the specified string.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptEvent.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptEvent.Not(ComponentPro.Net.Terminal.ScriptEvent)">
            <summary>
            A condition must not be met.
            </summary>
            <param name="e">The condition.</param>
            <returns>A <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that performs logical 'Not' on its operand.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptEvent.op_BitwiseAnd(ComponentPro.Net.Terminal.ScriptEvent,ComponentPro.Net.Terminal.ScriptEvent)">
            <summary>
            Both of the conditions must be met.
            </summary>
            <param name="e1">First condition.</param>
            <param name="e2">Second condition.</param>
            <returns>A <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that performs logical 'And' on its operand.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptEvent.op_BitwiseOr(ComponentPro.Net.Terminal.ScriptEvent,ComponentPro.Net.Terminal.ScriptEvent)">
            <summary>
            At least one of the conditions must be met.
            </summary>
            <param name="e1">First condition.</param>
            <param name="e2">Second condition.</param>
            <returns>A <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that performs logical 'Or' on its operand.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptEvent.op_Implicit(System.String)~ComponentPro.Net.Terminal.ScriptEvent">
            <summary>
            Converts string to the ScriptEvent.
            </summary>
            <param name="text">String to convert.</param>
            <returns>ScriptEvent that matches the specified string.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptEvent.op_Implicit(System.Text.RegularExpressions.Regex)~ComponentPro.Net.Terminal.ScriptEvent">
            <summary>
            Converts Regex to the ScriptEvent.
            </summary>
            <param name="regex">Regex to convert.</param>
            <returns>ScriptEvent that matches the specified Regex.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptEvent.op_LogicalNot(ComponentPro.Net.Terminal.ScriptEvent)">
            <summary>
            A condition must not be met.
            </summary>
            <param name="e">The condition.</param>
            <returns>A <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that performs logical 'Not' on its operand.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptEvent.Or(ComponentPro.Net.Terminal.ScriptEvent[])">
            <summary>
            At least one of the conditions must be met.
            </summary>
            <param name="events">List of conditions.</param>
            <returns>A <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that performs logical 'Or' on its operand.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptEvent.Or(ComponentPro.Net.Terminal.ScriptEvent,ComponentPro.Net.Terminal.ScriptEvent)">
            <summary>
            At least one of the conditions must be met.
            </summary>
            <param name="e1">First condition.</param>
            <param name="e2">Second condition.</param>
            <returns>A <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that performs logical 'Or' on its operand.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptEvent.SetTag(System.Object)">
            <summary>
            Set the <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" />'s tag.
            </summary>
            <param name="tag">A semi-unique tag that represents this criterium.</param>
            <returns>The same instance.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptEvent.TextAtPosition(System.String,System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches the specified string appearing at the specified position.
            </summary>
            <param name="text">String to match.</param>
            <param name="row">Row of the string's first character.</param>
            <param name="column">Column of the string's first character.</param>
            <returns><see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches the specified string appearing at specified position.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptEvent.TextInRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches the specified string appearing inside the specified region on the screen.
            </summary>
            <param name="text">String to match.</param>
            <param name="row">Row of the top left corner of the region.</param>
            <param name="column">Column of the top left corner of the region.</param>
            <param name="width">Width of the region.</param>
            <param name="height">Height of the region.</param>
            <returns><see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches the specified string appearing inside the specified region.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptEvent.TextOnCursorLine(System.String)">
            <summary>
            Gets a <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches the specified string appearing at the cursor line.
            </summary>
            <param name="text">Text to be matched.</param>
            <returns><see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches the specified string appearing at the cursor line.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptEvent.TextOnScreen(System.String)">
            <summary>
            Gets a <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches the specified string appearing on the screen.
            </summary>
            <param name="text">String to match.</param>
            <returns><see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches the specified string appearing on the screen.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptEvent.ToString">
            <summary>
            Returns human readable representation of this ScriptEvent.
            </summary>
            <returns>Human readable representation of this ScriptEvent.</returns>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ScriptEvent.AnyText">
            <summary>
            Gets a <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches any character that is not a part of escape sequence (e.g. color change is not matched).
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ScriptEvent.Closed">
            <summary>
            Gets a <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches when the underlying channel is closed.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ScriptEvent.Line">
            <summary>
            Gets a <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches an end-of-line ('\n') sequence.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ScriptEvent.Prompt">
            <summary>
            Gets a <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches the prompt specified by <see cref="P:ComponentPro.Net.Terminal.ITerminal.Prompt" /> property.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ScriptEvent.Tag">
            <summary>
            Gets or sets a tag of this condition.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ScriptEvent.Timeout">
            <summary>
            Gets a <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> that matches timed-out operation.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.ScriptMatch">
            <summary>
            Represents a result of a scripting method such as <see cref="O:ComponentPro.Net.Terminal.TerminalControl.WaitFor"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptMatch.GetMatchInfoByEvent(ComponentPro.Net.Terminal.ScriptEvent)">
            <summary>
            Returns the first matched condition corresponding to the specified condition type.
            </summary>
            <param name="scriptEvent">Condition type.</param>
            <returns>Matched condition, or null if not found.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptMatch.GetMatchInfoByTag(System.Object)">
            <summary>
            Returns the first matched condition with the specified tag.
            </summary>
            <param name="tag">Tag.</param>
            <returns>Matched condition with the specified tag, or null if not found.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptMatch.IsEventMatched(ComponentPro.Net.Terminal.ScriptEvent)">
            <summary>
            Determines if the <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> was matched.
            </summary>
            <param name="scriptEvent">ScriptEvent to determine.</param>
            <returns>True if the ScriptEvent was matched; otherwise false.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptMatch.IsTagMatched(System.Object)">
            <summary>
            Determines if the <see cref="T:ComponentPro.Net.Terminal.ScriptEvent" /> with the <paramref name="tag" /> was matched.
            </summary>
            <param name="tag">Find ScriptEvent with this tag.</param>
            <returns>True if the ScriptEvent was matched; otherwise false.</returns>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ScriptMatch.IsClosed">
            <summary>
            Gets a value indicating whether <see cref="P:ComponentPro.Net.Terminal.ScriptEvent.Closed" /> has been matched.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ScriptMatch.IsLine">
            <summary>
            Gets a value indicating whether <see cref="P:ComponentPro.Net.Terminal.ScriptEvent.Line" /> has been matched.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ScriptMatch.IsPrompt">
            <summary>
            Gets a value indicating whether <see cref="P:ComponentPro.Net.Terminal.ScriptEvent.Prompt" /> has been matched.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ScriptMatch.IsTimeout">
            <summary>
            Gets a value indicating whether <see cref="P:ComponentPro.Net.Terminal.ScriptEvent.Timeout" /> has been matched.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ScriptMatch.MatchedEvents">
            <summary>
            Gets the collection of matched conditions.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ScriptMatch.Success">
            <summary>
            Gets a value indicating whether the condition has been successfully matched.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.ScriptMatchInfo">
            <summary>
            Represents a matched condition.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptMatchInfo.Equals(System.Object)">
            <summary>
            Determines whether this object is equal to another object.
            </summary>
            <param name="obj">Another object.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.ScriptMatchInfo.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ScriptMatchInfo.MatchedRegex">
            <summary>
            Regular expression match (only applies to <see cref="M:ComponentPro.Net.Terminal.ScriptEvent.FromRegex(System.String)" /> conditions.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ScriptMatchInfo.MatchedScriptEvent">
            <summary>
            Matched condition.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ScriptMatchInfo.Position">
            <summary>
            Screen position at which the condition was matched.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.SelectGraphicRendition1">
            <summary>
            Specifies the appearance of the sequence: CSI 1 m.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.SelectGraphicRendition1.LightColor">
            <summary>Light foreground color.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.SelectGraphicRendition1.Bold">
            <summary>Bold text.</summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.SelectionChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.Terminal.TerminalControl.SelectionChanged">SelectionChanged</see> event.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.SerialPortChannel">
            <summary>
            Provides methods for communication over Serial port.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SerialPortChannel.#ctor(System.IO.Ports.SerialPort)">
            <summary>
            Initialize a new instance of <see cref="T:ComponentPro.Net.Terminal.SerialPortChannel" />.
            </summary>
            <param name="port">Serial port to communicate with.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SerialPortChannel.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:ComponentPro.Net.Terminal.SerialPortChannel" /> with specified port name.
            </summary>
            <param name="portName">Port name to use.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SerialPortChannel.#ctor(System.String,System.Int32)">
            <summary>
            Initialize a new instance of <see cref="T:ComponentPro.Net.Terminal.SerialPortChannel" /> with specified port name and baud rate.
            </summary>
            <param name="portName">Port name to use.</param>
            <param name="baudRate">A baud rate.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SerialPortChannel.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits)">
            <summary>
            Initialize a new instance of <see cref="T:ComponentPro.Net.Terminal.SerialPortChannel" /> with specified port name, baud rate, parity bit, data bits and stop bits.
            </summary>
            <param name="portName">Port name to use.</param>
            <param name="baudRate">A baud rate.</param>
            <param name="parity">Parity bit.</param>
            <param name="dataBits">Data bits.</param>
            <param name="stopBits">Stop bits.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SerialPortChannel.op_Implicit(System.IO.Ports.SerialPort)~ComponentPro.Net.Terminal.SerialPortChannel">
            <summary>
            Converts <see cref="T:System.IO.Ports.SerialPort" /> to <see cref="T:ComponentPro.Net.Terminal.SerialPortChannel" />.
            </summary>
            <param name="port"><see cref="T:System.IO.Ports.SerialPort" /> to convert.</param>
            <returns>New instance of <see cref="T:ComponentPro.Net.Terminal.SerialPortChannel" />.</returns>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SerialPortChannel.Port">
            <summary>
            Gets the serial port.
            </summary>
            <value>A serial port.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SerialPortChannel.Timeout">
            <summary>
            Gets or sets the length of time in milliseconds before the operation times out (specify -1 or 0 to indicate that the request does not time out).
            </summary>
            <value>
            The length of time, in milliseconds, until the operation times out,
            or the value -1 or 0 to indicate that the request does not time out.
            Default is -1 (Infinity).
            </value>
            <remarks>
            <p>
            The internal timeout counter is reset every time data is sent
            or received from to server. This also means that data transfers only
            time out after x milliseconds of inactivity, not after x milliseconds
            from the start of the transfer.
            </p>
            <p>
            Minimal value is 1000. Setting this to a value lower than 1000 will set it to 1000.
            </p>
            </remarks>
        </member>
        <member name="T:ComponentPro.Net.Terminal.ShellChannelOptions">
            <summary>
            Defines shell channel flags. Intended to be used by ComponentPro Terminal infrastructure.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ShellChannelOptions.Shell">
            <summary>
            Channel is a shell session.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ShellChannelOptions.Terminal">
            <summary>
            Channel has a pseudo-terminal.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ShellChannelOptions.RemoteExecute">
            <summary>
            Channel was initialized by remote execute.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ShellChannelOptions.AwaitingPrompt">
            <summary>
            Channel is in the "awaiting prompt" state after initialization.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.ShellChannelState">
            <summary>
            Defines all the possible connection states of an <see cref="T:ComponentPro.Net.Terminal.ShellChannel" /> object. Intended to be used by ComponentPro Terminal infrastructure.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ShellChannelState.NotConnected">
            <summary>
            The <see cref="T:ComponentPro.Net.Terminal.ShellChannel" /> was either never connected, or is no longer connected.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ShellChannelState.Connected">
            <summary>
            The <see cref="T:ComponentPro.Net.Terminal.ShellChannel" /> is connected or data is still available to be read.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.ScreenshotFileFormat">
            <summary>
            Terminal capture format.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ScreenshotFileFormat.Text">
            <summary>Simple text.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ScreenshotFileFormat.Ansi">
            <summary>ANSI text.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ScreenshotFileFormat.Html">
            <summary>HTML document.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ScreenshotFileFormat.Bmp">
            <summary>BMP image.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ScreenshotFileFormat.Jpeg">
            <summary>JPEG image.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ScreenshotFileFormat.Png">
            <summary>PNG image.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ScreenshotFileFormat.Gif">
            <summary>GIF image.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ScreenshotFileFormat.Tiff">
            <summary>TIFF image.</summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.ScreenshotOptions">
            <summary>
            Terminal capture options.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ScreenshotOptions.None">
            <summary>No options.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ScreenshotOptions.DoNotHideCursor">
            <summary>Do not hide cursor.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ScreenshotOptions.SaveTerminalResolution">
            <summary>When saving into ANSI text, also save resolution of the current terminal screen.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ScreenshotOptions.SaveHistory">
            <summary>Save the content of the history buffer as well as the current screen content. Has no effect when saving as image.</summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TerminalCell">
            <summary>
            Represents a single character cell from the terminal buffer.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalCell.ToString">
            <summary>
            Returns the cell character.
            </summary>
            <returns>Cell character.</returns>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalCell.BackColor">
            <summary>
            Gets or sets the background color (a palette index).
            </summary>
            <value>Background color.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalCell.Blink">
            <summary>
            Gets or sets a blink flag.
            </summary>
            <value>Blink flag.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalCell.Bold">
            <summary>
            Gets or sets a bold flag.
            </summary>
            <value>Bold flag.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalCell.Character">
            <summary>
            Gets or sets the character.
            </summary>
            <value>Character.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalCell.ForeColor">
            <summary>
            Gets or sets the foreground color (a palette index).
            </summary>
            <value>Foreground color.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalCell.Italic">
            <summary>
            Gets or sets an italic flag.
            </summary>
            <value>Italic flag.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalCell.Underline">
            <summary>
            Gets or sets the underline style.
            </summary>
            <value>Underline style.</value>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TerminalColor">
            <summary>
            Defines terminal colors.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalColor.Black">
            <summary>Black.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalColor.Blue">
            <summary>Blue.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalColor.Cyan">
            <summary>Cyan.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalColor.DarkGray">
            <summary>Dark gray.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalColor.Green">
            <summary>Green.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalColor.LightBlue">
            <summary>Light blue.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalColor.LightCyan">
            <summary>Light cyan.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalColor.LightGray">
            <summary>Light gray.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalColor.LightGreen">
            <summary>Light green.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalColor.LightMagenta">
            <summary>Light magenta.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalColor.LightRed">
            <summary>Light red.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalColor.LightYellow">
            <summary>Light yellow.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalColor.Magenta">
            <summary>Magenta.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalColor.Red">
            <summary>Red.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalColor.White">
            <summary>White.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalColor.Yellow">
            <summary>Yellow.</summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TerminalControl">
            <summary>
            Terminal emulator control.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.#ctor">
            <summary>
            Creates a new instance of terminal control.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.GetControlSize(System.Int32,System.Int32)">
            <summary>
            Calculate a control size corresponding to the specified screen size.
            </summary>
            <param name="columns">Desired horizontal size in character columns.</param>
            <param name="rows">Desired vertical size in character rows.</param>
            <returns>Control size.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.GetSelectedText">
            <summary>
            Returns the currently selected text.
            </summary>
            <returns>Currently selected text, or null if no text is selected.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.IsInputChar(System.Char)">
            <summary>
            Determines if a character is an input character the control recognizes.
            </summary>
            <param name="charCode">Input character.</param>
            <returns>Value indicating whether the input character is recognized by the control.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the specified key is a regular input key or a special key that requires preprocessing.
            </summary>
            <param name="keyData">Key data.</param>
            <returns>Value indicating whether to preprocess the key.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.OnCreateControl">
            <summary>
            Raises the <see cref="M:System.Windows.Forms.Control.CreateControl" /> event.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyDown" /> event.
            </summary>
            <param name="e">Contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyPress" /> event.
            </summary>
            <param name="e">Contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyUp" /> event.
            </summary>
            <param name="e">Contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" /> event.
            </summary>
            <param name="e">Contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDown" /> event.
            </summary>
            <param name="e">Contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseMove" /> event.
            </summary>
            <param name="e">Contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseUp" /> event.
            </summary>
            <param name="e">Contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel" /> event.
            </summary>
            <param name="e">Contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the control.
            </summary>
            <param name="e">Contains information about the control to paint.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the control background.
            </summary>
            <param name="pevent">Contains information about the control to paint.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.OnResize(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Resize" /> event.
            </summary>
            <param name="e">Contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.OnScrollChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.TerminalControl.ScreenResize" /> event.
            </summary>
            <param name="e">A <see cref="T:ComponentPro.Net.Terminal.ScreenResizeEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Processes a command key.
            </summary>
            <param name="msg">A System.Windows.Forms.Message, passed by reference, that represents the window message to process.</param>
            <param name="keyData">One of the System.Windows.Forms.Keys values that represents the key to process.</param>
            <returns>True if the character was processed by the control; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.ResetSelection">
            <summary>
            Unselects selection area.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.Save(System.IO.Stream,ComponentPro.Net.Terminal.ScreenshotFileFormat)">
            <summary>
            Saves the content of the terminal screen to the specified stream in the specified format.
            </summary>
            <param name="output">Output stream.</param>
            <param name="format">Capture format.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.Save(System.String,ComponentPro.Net.Terminal.ScreenshotFileFormat)">
            <summary>
            Saves the content of the terminal screen to the specified file in the specified format.
            </summary>
            <param name="path">Path to a local file.</param>
            <param name="format">Capture format.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.Save(System.IO.Stream,ComponentPro.Net.Terminal.ScreenshotFileFormat,ComponentPro.Net.Terminal.ScreenshotOptions)">
            <summary>
            Saves the content of the terminal screen to the specified stream in the specified format with the specified options.
            </summary>
            <param name="output">Output stream.</param>
            <param name="format">Capture format.</param>
            <param name="options">Capture options.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.Save(System.String,ComponentPro.Net.Terminal.ScreenshotFileFormat,ComponentPro.Net.Terminal.ScreenshotOptions)">
            <summary>
            Saves the content of the terminal screen to the specified file in the specified format with the specified options.
            </summary>
            <param name="path">Path to a local file.</param>
            <param name="format">Capture format.</param>
            <param name="options">Capture options.</param>		
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.Scroll(System.Int32)">
            <summary>
            Scrolls the terminal screen.
            </summary>
            <param name="rows">Number of rows to scroll.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.SendToServer(System.ConsoleKeyInfo)">
            <summary>
            Sends the specified key to the server, simulating keyboard input.
            </summary>
            <param name="key">Key to send.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.SendToServer(ComponentPro.Net.Terminal.FunctionKey)">
            <summary>
            Sends the specified function key to the server, simulating keyboard input.
            </summary>
            <param name="key">Function key to send.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.SendToServer(System.String)">
            <summary>
            Sends the specified text to the server, simulating keyboard input.
            </summary>
            <param name="text">Text to send.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.SendToServer(ComponentPro.Net.Terminal.FunctionKey,System.ConsoleModifiers)">
            <summary>
            Sends the specified function key to the server, simulating keyboard input.
            </summary>
            <param name="key">Function key to send.</param>
            <param name="modifiers">Console modifiers to use.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.SendToServer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends the specified amount of data to the server, starting at the indicated location in the data buffer.
            </summary>
            <param name="data">The data to send.</param>
            <param name="offset">The position in the data buffer to begin sending data.</param>
            <param name="count">The number of bytes to send.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.SetScreenSize(System.Int32,System.Int32)">
            <summary>
            Sets a new screen size, resizing the control accordingly.
            </summary>
            <param name="columns">Horizontal size in character columns.</param>
            <param name="rows">Vertical size in character rows.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.SetSelection(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets selection area.
            </summary>
            <param name="startColumn">Start column.</param>
            <param name="startRow">Start row.</param>
            <param name="endColumn">End column.</param>
            <param name="endRow">End row.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.Detach">
            <summary>
            Unbinds the control from the current channel and closes the channel.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes Windows messages.
            </summary>
            <param name="m">The Windows message to process.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.OnAttachCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.TerminalControl.AttachCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.AttachAsync(ComponentPro.Net.Terminal.IShellConnection,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously Binds the control to the specified shell connection (an instance of the <b>SshClient</b> or <b>TelnetClient</b> class).
            </summary>
            <param name="connection">The shell connection.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.AttachAsync(ComponentPro.Net.Terminal.IShellConnection,System.Object)">
            <summary>
            Asynchronously Binds the control to the specified shell connection (an instance of the <b>SshClient</b> or <b>TelnetClient</b> class).
            </summary>
            <param name="connection">The shell connection.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.OnWaitForCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.Net.Terminal.ScriptMatch})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.TerminalControl.WaitForCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.WaitForAsync(ComponentPro.Net.Terminal.ScriptEvent[],ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Terminal.ScriptMatch},System.Object)">
            <summary>
            Asynchronously processes any available incoming data until a response is received that matches the specified regular expression,
            or until the specified maximum wait time period elapses.
            </summary>
            <param name="pattern">Expected regular expression to wait for.</param>
            <param name="timeout">Maximum wait time period (in milliseconds).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.WaitForAsync(ComponentPro.Net.Terminal.ScriptEvent[],System.Object)">
            <summary>
            Asynchronously processes any available incoming data until a response is received that matches the specified regular expression,
            or until the specified maximum wait time period elapses.
            </summary>
            <param name="pattern">Expected regular expression to wait for.</param>
            <param name="timeout">Maximum wait time period (in milliseconds).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.OnSendCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.TerminalControl.SendCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.SendAsync(System.ConsoleKeyInfo,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends the specified key to the server, simulating keyboard input.
            </summary>
            <param name="key">Key to send.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.SendAsync(System.ConsoleKeyInfo,System.Object)">
            <summary>
            Asynchronously sends the specified key to the server, simulating keyboard input.
            </summary>
            <param name="key">Key to send.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.SendAsync(ComponentPro.Net.Terminal.FunctionKey,System.ConsoleModifiers,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends the specified key to the server, simulating keyboard input.
            </summary>
            <param name="key">Function key to send.</param>
            <param name="modifiers">Console modifiers to use.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.SendAsync(ComponentPro.Net.Terminal.FunctionKey,System.ConsoleModifiers,System.Object)">
            <summary>
            Asynchronously sends the specified key to the server, simulating keyboard input.
            </summary>
            <param name="key">Function key to send.</param>
            <param name="modifiers">Console modifiers to use.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.SendAsync(System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Object},System.Object)">
            <summary>
            Asynchronously Sends the specified text to the server, simulating keyboard input.
            </summary>
            <param name="text">Text to send.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.SendAsync(System.String,System.Object)">
            <summary>
            Asynchronously Sends the specified text to the server, simulating keyboard input.
            </summary>
            <param name="text">Text to send.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.OnSendDataCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.TerminalControl.SendDataCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.SendDataAsync(System.Byte[],System.Int32,System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends the specified amount of data to the server, starting at the indicated location in the data buffer.
            </summary>
            <param name="data">The data to send.</param>
            <param name="offset">The position in the data buffer to begin sending data.</param>
            <param name="count">The number of bytes to send.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.SendDataAsync(System.Byte[],System.Int32,System.Int32,System.Object)">
            <summary>
            Asynchronously sends the specified amount of data to the server, starting at the indicated location in the data buffer.
            </summary>
            <param name="data">The data to send.</param>
            <param name="offset">The position in the data buffer to begin sending data.</param>
            <param name="count">The number of bytes to send.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.OnSendBreakCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.TerminalControl.SendBreakCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.SendBreakAsync(System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously Sends a break request to the server. This may or may not have any effect.
            </summary>
            <param name="breakLength">Break length, in milliseconds (if supported by the underlying channel).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.SendBreakAsync(System.Int32,System.Object)">
            <summary>
            Asynchronously Sends a break request to the server. This may or may not have any effect.
            </summary>
            <param name="breakLength">Break length, in milliseconds (if supported by the underlying channel).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.OnExecuteCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.TerminalControl.ExecuteCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.ExecuteAsync(System.String,ComponentPro.Net.Terminal.ScriptEvent[],ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously executes the specified command on the server within the specified amount of time (in miliseconds).
            </summary>
            <param name="command">The command to send to the server.</param>
            <param name="events">The conditions that can occur and be checked.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.ExecuteAsync(System.String,ComponentPro.Net.Terminal.ScriptEvent[],System.Object)">
            <summary>
            Asynchronously executes the specified command on the server within the specified amount of time (in miliseconds).
            </summary>
            <param name="command">The command to send to the server.</param>
            <param name="events">The conditions that can occur and be checked.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.OnRemoteResize(ComponentPro.Net.Terminal.RemoteResizeEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.TerminalControl.RemoteResize"/> event.
            </summary>
            <param name="e">A <see cref="T:ComponentPro.Net.Terminal.RemoteResizeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.OnServerInstructionReceived(ComponentPro.Net.Terminal.ServerInstructionReceivedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.TerminalControl.ServerInstructionReceived"/> event.
            </summary>
            <param name="e">An <see cref="T:ComponentPro.Net.Terminal.ServerInstructionReceivedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.OnError(ComponentPro.Net.Terminal.TerminalErrorEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.TerminalControl.Error"/> event.
            </summary>
            <param name="e">An <see cref="T:ComponentPro.Net.Terminal.TerminalErrorEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.OnSelectionChanged(ComponentPro.Net.Terminal.SelectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.TerminalControl.SelectionChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:ComponentPro.Net.Terminal.SelectionChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.OnStateChanged(System.Object,ComponentPro.Net.Terminal.ShellSessionStateChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.TerminalControl.StateChanged"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.Terminal.ShellSessionStateChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.Attach(ComponentPro.Net.Terminal.IShellConnection)">
            <summary>
            Binds the control to the specified shell connection (an instance of the <b>SshClient</b> or <b>TelnetClient</b> class).
            </summary>
            <param name="connection">The shell connection.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.StartRecording(System.IO.TextWriter)">
            <summary>
            Starts recording.
            </summary>
            <param name="recorder">The recorder object.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.StopRecording">
            <summary>
            Stops recording and close the underlying text writer as well.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.StopRecording(System.Boolean)">
            <summary>
            Stops recording.
            </summary>
            <param name="close">A boolean value indicating whether to close the underlying text writer as well.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.SetSize(System.Int32,System.Int32)">
            <summary>
            Sets a new screen size, resizing the control accordingly.
            </summary>
            <param name="columns">Horizontal size in character columns.</param>
            <param name="rows">Vertical size in character rows.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.GetSize(System.Int32,System.Int32)">
            <summary>
            Calculate a control size corresponding for the specified screen size.
            </summary>
            <param name="columns">Desired horizontal size in character columns.</param>
            <param name="rows">Desired vertical size in character rows.</param>
            <returns>Control size.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.SetPaletteColor(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the palette color at the specified index.
            </summary>
            <param name="palettleColorIndex">Color index.</param>
            <param name="color">Paletter color.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.GetPaletteColor(System.Int32)">
            <summary>
            Gets the palette color at the specified index.
            </summary>
            <param name="palettleColorIndex">The color index.</param>
            <returns>Paletter color.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.Reset">
            <summary>
            Clears the history, terminal's screen and reset the scrollbar.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.CheckFor(ComponentPro.Net.Terminal.ScriptEvent)">
            <summary>
            Checks whether the specified condition is currently met.
            </summary>
            <param name="scriptEvent">Condition to be met.</param>
            <returns>Result of the check.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.CheckFor(ComponentPro.Net.Terminal.ScriptEvent[])">
            <summary>
            Processes response from the server until any condition is met. The events are processed as if the OR operator was applied.
            </summary>
            <param name="events">Condition to be met.</param>
            <returns>Result of the check.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalControl.Execute(System.String,ComponentPro.Net.Terminal.ScriptEvent[])">
            <summary>
            Executes the specified command on the server within the specified amount of time (in miliseconds).
            </summary>
            <param name="command">The command to send to the server.</param>
            <param name="events">The conditions that can occur and be checked.</param>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.AutoProcessing">
            <summary>
            Gets or sets a boolean value indicating whether to auto process Command Response End.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.AutoAdjustTerminalSize">
            <summary>
            Enables or disables automatic terminal size adjustment based on font size and control size.
            </summary>
            <value>True to enable automatic adjustment; false to disable automatic adjustment.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.CellSize">
            <summary>
            Gets the size of a character cell.
            </summary>
            <value>Size of character cell.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.Cursor">
            <summary>
            Use the <see cref="P:ComponentPro.Net.Terminal.TerminalControl.CursorText" /> or <see cref="P:ComponentPro.Net.Terminal.TerminalControl.CursorMouse" /> property instead.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.CursorBlinkingInterval">
            <summary>
            Gets or sets text cursor blinking interval (in miliseconds). Setting it to a value lower than 100 disables blinking.
            </summary>
            <value>Text cursor blinking interval.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.CursorMouse">
            <summary>
            Gets or sets the cursor to display in mouse enabled mode.
            </summary>
            <value>Cursor for the mouse enabled mode.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.CursorText">
            <summary>
            Gets or sets the cursor to display in standard text mode.
            </summary>
            <value>Cursor for the standard text mode.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.EnableMouseWheel">
            <summary>
            Enables mouse wheel scrolling. 
            </summary>
            <value>True - mouse wheel is enabled; false - mouse wheel is disabled.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.Font">
            <summary>
            Gets or sets the font of the text displayed by this control.
            </summary>
            <value>Font of the text displayed by this control.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.HistoryLength">
            <summary>
            Gets the current history buffer length.
            </summary>
            <value>History buffer length (0..HistoryMaxLength).</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.HistoryMaxLength">
            <summary>
            Gets or sets a maximum history buffer length.
            </summary>
            <value>Maximum history buffer length (0..99999).</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.AllowPastingFromClipboard">
            <summary>
            Enables or disables right-mouse-button paste functionality.
            </summary>
            <value>True to enable right-mouse-button paste functionality; false to disable it.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.AllowCopyingToClipboard">
            <summary>
            Gets or sets a value whether to copy selected text into clipboard automatically or not.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.Palette">
            <summary>
            Gets or sets the terminal palette.
            </summary>
            <value>Terminal palette.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.Screen">
            <summary>
            Gets the terminal screen object.
            </summary>
            <value>Terminal screen.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.ScrollbackResetOnDisplayActivity">
            <summary>
            Enables or disables scrollback reset on display activity (when received any data).
            </summary>
            <value>True to enable scrollback reset; false to disable scrollback reset.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.ScrollBarEnabled">
            <summary>
            Enables or disables scroll bar.
            </summary>
            <value>True to enable scroll bar; false to disable scroll bar.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.SelectionMode">
            <summary>
            Gets or sets text selection mode (for paste functionality).
            </summary>
            <value>Text selection mode.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.SuppressAltAsMenuKey">
            <summary>
            Determines how to handle the ALT key (typically ALT activates Menu).
            </summary>
            <value>True - ALT is not used to activate Menu, it is used as part of the input keystroke; false - do the opposite.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.SuppressShortcutKeys">
            <summary>
            Determines how to handle keystrokes which are registered shortcut keys of the application (e.g. CTRL+O can activate a menu item).
            </summary>
            <value>True - keystroke is processed by the <see cref="T:ComponentPro.Net.Terminal.TerminalControl" /> and send to the remote end (shortcut is not activated); 
            false - keystroke is used as a shortcut (nothing is send to the remote end).</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.TerminalFont">
            <summary>
            Gets or sets the terminal font. Setting the font may also cause the screen size to be adjusted to fit into the control area.
            </summary>
            <value>Terminal font.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.Text">
            <summary>
            Gets or sets the text associated with this control.  
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.Transfers">
            <summary>
            Gets the object which allows file transferring.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.UserInputEnabled">
            <summary>
            Enables or disables user input.
            </summary>
            <value>True if user input enabled; false if disable.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.InvokeFromCurrentThreads">
            <summary>
            Gets a value indicating whether to raise events from the current thread or 
            to use a <see cref="T:System.Threading.SynchronizationContext" /> object available when an asynchronous operation was started.
            The default value is <c>false</c>.
            </summary>
            <value><c>true</c> to raise events directly from the current working thread; 
            <c>false</c> to raise them using a <see cref="T:System.Threading.SynchronizationContext" /> object.</value>
            <remarks>
            Synchronous methods always raise events from the current working thread.
            </remarks>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TerminalControl.AttachCompleted">
            <summary>
            Occurs after a <see cref="O:AttachAsync"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TerminalControl.WaitForCompleted">
            <summary>
            Occurs after a <see cref="O:WaitForAsync"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TerminalControl.SendCompleted">
            <summary>
            Occurs after a <see cref="O:SendAsync"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TerminalControl.SendDataCompleted">
            <summary>
            Occurs after a <see cref="O:SendDataAsync"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TerminalControl.SendBreakCompleted">
            <summary>
            Occurs after a <see cref="O:SendBreakAsync"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TerminalControl.ExecuteCompleted">
            <summary>
            Occurs after a <see cref="O:ExecuteAsync"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TerminalControl.Pasting">
            <summary>
            Occurs when a text is to be pasted from clipboard to screen.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TerminalControl.Copying">
            <summary>
            Occurs when a text is to be copied from screen to clipboard.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TerminalControl.RemoteResize">
            <summary>
            Occurs when the screen resize is requested by the server.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TerminalControl.ServerInstructionReceived">
            <summary>
            Occurs when a specific client action is requested by the server.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TerminalControl.DataReceived">
            <summary>
            Occurs when the data are received from the server.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TerminalControl.Error">
            <summary>
            Occurs when an exception occurred while processing data in auto-processing mode.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TerminalControl.SelectionChanged">
            <summary>
            Occurs when a selection is changed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TerminalControl.StateChanged">
            <summary>
            Occurs when the state of the <see cref="T:ComponentPro.Net.Terminal.TerminalControl"/> object is changed.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.AutoMatchPrompt">
            <summary>
            Gets or sets whether to automatically match prompt in <see cref="M:ComponentPro.Net.Terminal.TerminalControl.WaitFor(ComponentPro.Net.Terminal.ScriptEvent)"/>, <see cref="M:ComponentPro.Net.Terminal.TerminalControl.ReadUntil(ComponentPro.Net.Terminal.ScriptEvent)"/>, 
            <see cref="M:ComponentPro.Net.Terminal.TerminalControl.ReadUntilPrompt"/>, <see cref="M:ComponentPro.Net.Terminal.TerminalControl.ReadLine"/>, <see cref="M:ComponentPro.Net.Terminal.TerminalControl.ReadChar"/> and <see cref="M:ComponentPro.Net.Terminal.TerminalControl.CheckFor(ComponentPro.Net.Terminal.ScriptEvent)"/> methods.
            The default value is false.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.FinalExitCode">
            <summary>
            Gets the exit code of the receiving channel when the connection was closed.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.HoldReceivedData">
            <summary>
            Gets or sets a value indicating whether to hold received data in <see cref="P:ComponentPro.Net.Terminal.TerminalControl.ReceivedData"/> property.
            The default value is true.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.LastResult">
            <summary>
            Gets the result of last called <see cref="M:ComponentPro.Net.Terminal.TerminalControl.ReadUntilPrompt"/>, <see cref="M:ComponentPro.Net.Terminal.TerminalControl.ReadLine"/>, <see cref="M:ComponentPro.Net.Terminal.TerminalControl.ReadChar"/> or <see cref="M:ComponentPro.Net.Terminal.TerminalControl.ReadUntil(ComponentPro.Net.Terminal.ScriptEvent)"/> method. Please note that calling other scripting methods reset this to null.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.Prompt">
            <summary>
            Gets or sets the sequence that is used to detect command prompt.
            To use regular expressions, prepend the string with "regex:".
            To use wildcards, prepend the string with "mask:".
            Prompt sequence is used by <see cref="M:ComponentPro.Net.Terminal.TerminalControl.ReadUntilPrompt"/> method (and other methods if <see cref="P:ComponentPro.Net.Terminal.ScriptEvent.Prompt"/> is specified).
            To detect the current prompt automatically , use <see cref="M:ComponentPro.Net.Terminal.TerminalControl.DetectPrompt"/> method.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.ReceivedData">
            <summary>
            Gets data received since the previous data-receiving method.
            If <see cref="P:ComponentPro.Net.Terminal.TerminalControl.HoldReceivedData"/> is set to false, this returns null.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.ShellTimeout">
            <summary>
            Gets or sets the timeout, in milliseconds, for receiving data.
            The default value is 60000 (one minute).
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.TrimReadUntilResponse">
            <summary>
            Gets or sets a value indicating whether <see cref="M:ComponentPro.Net.Terminal.TerminalControl.ReadUntilPrompt"/>, <see cref="M:ComponentPro.Net.Terminal.TerminalControl.ReadLine"/>, 
            <see cref="M:ComponentPro.Net.Terminal.TerminalControl.ReadChar"/> and <see cref="M:ComponentPro.Net.Terminal.TerminalControl.ReadUntil(ComponentPro.Net.Terminal.ScriptEvent)"/> methods remove the prompt or end-of-line from the returned value.
            The default value is true.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.IsConnected">
            <summary>
            Indicates whether the control is connected to the server.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.IsBound">
            <summary>
            Indicates whether the control is bound to a shell connection.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.TerminalName">
            <summary>
            Gets or sets the terminal name.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.TerminalType">
            <summary>
            Gets or sets the terminal type.
            </summary>
            <value>Terminal type.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.Encoding">
            <summary>
            Gets or sets the character encoding for incoming and outgoing data.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.TelnetEscapesCarriageReturn">
            <summary>
            Specifies whether to escape CR character to CR NUL during send in Telnet. True to send CR as CR NUL; false to send CR alone.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.AutoWrap">
            <summary>
            Gets or sets the auto wrap mode.
            </summary>
            <remarks>
            It defines the behavior of a character received when the cursor is at the last column.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.BreakSequence">
            <summary>
            Gets or sets which break sequence to use - defines the behavior of the <see cref="M:ComponentPro.Net.Terminal.TerminalControl.SendBreak(System.Int32)"/> method.
            </summary>
            <value>Break sequence.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.LocalEcho">
            <summary>
            Gets or sets a boolean value indicating whether the local echo is enabled or disabled.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.NewLineType">
            <summary>
            Gets or sets a new line type for outgoing data.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.BackspaceKey">
            <summary>
            Gets or sets a Backspace key sequence for outgoing data.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.CursorKeys">
            <summary>
            Gets or sets the cursor key mode.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.IgnoreCursorKeyModeChange">
            <summary>
            Specifies whether to ignore cursor key mode change requests from the server.
            </summary>
            <value>True to ignore cursor key mode change requests; false to allow.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.HomeAndEndKeys">
            <summary>
            Gets or sets the behavior of Home and End keys.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.CursorStyles">
            <summary>
            Gets or sets the cursor style.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.KeysMode">
            <summary>
            Gets or sets the keys mode.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.ImplicitCarriageReturnInLinefeed">
            <summary>
            Gets or sets a value indicating whether a CR character is implied in any received LF.
            </summary>
            <value>True to imply CR in every LF; false to not imply.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.DestructiveBackspace">
            <summary>
            Gets or sets a value indicating whether to treat the incoming destructive backspace characters (7F) as non-destructive backspace (08).
            </summary>
            <value>True to treat destructive backspace as non-destructive, false to allow destructive backspace.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.IgnoreSubstituteCharacter">
            <summary>
            Gets or sets a value indicating whether to ignore incoming substitute characters (1A) or replace them with replaced by a question mark.
            </summary>
            <value>True to ignore substitute characters; false to replace them with a question mark.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.PersistColorsOnSelectGraphicRendition">
            <summary>
            Specifies whether escape sequence of the Select Graphic Rendition also clears the color of the pen.
            </summary>
            <value>True to persist last set color; false to reset color of the pen.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.ColorScheme">
            <summary>
            Gets or sets the color scheme.
            </summary>
            <value>Color scheme.</value>
            <remarks>To ensure color changes are applied immediately to the terminal control, you have to call the <see cref="M:System.Windows.Forms.Control.Refresh"/> method.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.BlinkingText">
            <summary>
            Gets or sets the blinking text appereance.
            </summary>
            <value>Blinking text appereance.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.BackColorIndex">
            <summary>
            Gets or sets the standard background color.
            </summary>
            <remarks>To ensure color changes are applied immediately to the terminal control, you have to call the <see cref="M:System.Windows.Forms.Control.Refresh" /> method.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.ForeColorIndex">
            <summary>
            Gets or sets the standard foreground color - text color.
            </summary>
            <remarks>To ensure color changes are applied immediately to the terminal control, you have to call the <see cref="M:System.Windows.Forms.Control.Refresh" /> method.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.BoldTextColorIndex">
            <summary>
            Gets or sets the bold text color.
            </summary>
            <remarks>To ensure color changes are applied immediately to the terminal control, you have to call the <see cref="M:System.Windows.Forms.Control.Refresh" /> method.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.GrayedTextColorIndex">
            <summary>
            Gets or sets the faint text color.
            </summary>
            <remarks>To ensure color changes are applied immediately to the terminal control, you have to call the <see cref="M:System.Windows.Forms.Control.Refresh" /> method.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.ItalicTextColorIndex">
            <summary>
            Gets or sets the italic text color.
            </summary>       
            <remarks>To ensure color changes are applied immediately to the terminal control, you have to call the <see cref="M:System.Windows.Forms.Control.Refresh" /> method.</remarks> 
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.SingleUnderlinedTextColorIndex">
            <summary>
            Gets or sets the single underline text color.
            </summary>
            <remarks>To ensure color changes are applied immediately to the terminal control, you have to call the <see cref="M:System.Windows.Forms.Control.Refresh" /> method.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.DoubleUnderlinedTextColorIndex">
            <summary>
            Gets or sets the double underline text color.
            </summary>
            <remarks>To ensure color changes are applied immediately to the terminal control, you have to call the <see cref="M:System.Windows.Forms.Control.Refresh" /> method.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalControl.NormalCursorColorIndex">
            <summary>
            Gets or sets the normal cursor color index.
            </summary>
            <value>The normal cursor color index.</value>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TerminalException">
            <summary>
            An exception that is thrown when a terminal error occurs.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Terminal.TerminalException" /> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Terminal.TerminalException" /> class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Terminal.TerminalException" /> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Terminal.TerminalException" /> class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the <see cref="T:ComponentPro.Net.Terminal.TerminalException" />.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalException.Status">
            <summary>
            Gets the exception status.
            </summary>
            <value>One of the <see cref="T:ComponentPro.Net.Terminal.TerminalExceptionStatus" /> values.</value>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TerminalExceptionStatus">
            <summary>
            Defines status codes for the <see cref="T:ComponentPro.Net.Terminal.TerminalException" /> class.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalExceptionStatus.UnknownError">
            <summary>
            An unclassifiable error occurred. This is the default value for <see cref="P:ComponentPro.Net.Terminal.TerminalException.Status" />.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalExceptionStatus.OperationFailed">
            <summary>
            The requested operation could not be completed.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalExceptionStatus.ReceivingError">
            <summary>
            Data receiving error.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalExceptionStatus.ProcessingError">
            <summary>
            Data processing error.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalExceptionStatus.Timeout">
            <summary>
            Operation could not complete within the specified time-out period.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TerminalFont">
            <summary>
            Represents a fixed-width terminal font.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalFont.#ctor(ComponentPro.Net.Terminal.TerminalFontInfo)">
            <summary>
            Initializes a new instance of terminal font with the specified font info.
            </summary>
            <param name="info">Font info.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalFont.#ctor(System.String,System.Single)">
            <summary>
            Initializes a new instance of terminal font with the specified family name and size.
            </summary>
            <param name="familyName">Font family name.</param>
            <param name="emSize">The em-size in points.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalFont.#ctor(System.Drawing.FontFamily,System.Single)">
            <summary>
            Initializes a new instance of terminal font with the specified family name and size.
            </summary>
            <param name="family">Font family.</param>
            <param name="emSize">The em-size in points.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalFont.Dispose">
            <summary>
            Disposes the <see cref="T:ComponentPro.Net.Terminal.TerminalFont" /> object.
            </summary>
            <remarks>
            Calling this method ensures that all resources are freed.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalFont.Finalize">
            <summary>
            Finalizer. Called by garbage collector during object destruction.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalFont.FromDosFont(System.Byte[])">
            <summary>
            Creates a font from a DOS raster font.
            </summary>
            <param name="font">Raw DOS raster font data - either 4KB for 256 8x16 characters or 2KB for 256 8x8 characters.</param>
            <returns>DOS terminal font.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalFont.FromDosFont(System.Byte[],System.Boolean)">
            <summary>
            Creates a font from a DOS raster font.
            </summary>
            <param name="font">Raw DOS raster font data - either 4KB for 256 8x16 characters or 2KB for 256 8x8 characters.</param>
            <param name="spacing">Add additional empty columns to each character, in the same way VGA does in 720x480 resolution.</param>
            <returns>DOS terminal font.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalFont.IsSupportedFamily(System.String)">
            <summary>
            Gets a value indicating whether the specified font family is supported.
            </summary>
            <param name="familyName">Font family name.</param>
            <returns>True if supported; false if not supported.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalFont.IsSupportedFamily(System.Drawing.FontFamily)">
            <summary>
            Gets a value indicating whether the specified font family is supported.
            </summary>
            <param name="family">Font family.</param>
            <returns>True if supported; false if not supported.</returns>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalFont.Height">
            <summary>
            Gets font cell height.
            </summary>
            <value>Font cell height.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalFont.Width">
            <summary>
            Gets font cell width.
            </summary>
            <value>Font cell width.</value>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TerminalFontInfo">
            <summary>
            Specifies terminal font info.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalFontInfo.#ctor">
            <summary>
            Creates a terminal font info with default settings.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalFontInfo.CharacterPosition">
            <summary>
            Specifies an offset by which to adjust the character position within the cell.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalFontInfo.ExtraSize">
            <summary>
            Gets or sets an extra size by which to adjust the default cell size.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalFontInfo.Family">
            <summary>
            Gets or sets the font family. Sets <see cref="P:ComponentPro.Net.Terminal.TerminalFontInfo.FamilyName" /> as well.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalFontInfo.FamilyName">
            <summary>
            Gets or sets the font family name. Sets <see cref="P:ComponentPro.Net.Terminal.TerminalFontInfo.Family" /> as well.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalFontInfo.FontSize">
            <summary>
            Gets or sets the font em-size in points.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalFontInfo.Styles">
            <summary>
            Specifies supported font styles.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TerminalFontStyles">
            <summary>
            Specifies terminal font style.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalFontStyles.Regular">
            <summary>
            Regular text.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalFontStyles.Bold">
            <summary>
            Bold text.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalFontStyles.Italic">
            <summary>
            Italic text.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TerminalPalette">
            <summary>
            A 256-color terminal palette.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalPalette.#ctor">
            <summary>
            Creates a palette with standard ANSI colors in the first 16 entries and xterm colors in the higher entries.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalPalette.GetColor(System.Int32)">
            <summary>
            Gets the palette color at the specified index.
            </summary>
            <param name="index">Color index.</param>
            <returns>Palette color.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalPalette.SetColor(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the palette color at the specified index. Please note that the default <see cref="P:ComponentPro.Net.Terminal.TerminalPalette.Ansi" /> and <see cref="P:ComponentPro.Net.Terminal.TerminalPalette.Dos" /> palettes
            are read-only - create a new palette to set colors.
            </summary>
            <param name="index">Color index.</param>
            <param name="color">Palette color.</param>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalPalette.Ansi">
            <summary>
            Gets the palette with standard ANSI colors in the first 16 entries and xterm colors in the higher entries.
            </summary>
            <remarks>
            The default palette uses the following color scheme:
            0 = Black, 1 = Red, 2 = Green, 3 = Yellow, 4 = Blue, 5 = Magenta, 6 = Cyan, 7 = LightGray,
            8 = DarkGray, 9 = LightRed, 10 = LightGreen, 11 = LightYellow, 12 = LightBlue, 13 = LightMagenta, 14 = LightCyan, 15 = White,
            16 and higher = Xterm colors.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalPalette.Dos">
            <summary>
            Gets the palette with standard MS-DOS colors in the first 16 entries and xterm colors in the higher entries.
            </summary>
            <remarks>
            The default palette uses the following color scheme:
            0 = Black, 1 = Red, 2 = Green, 3 = Yellow, 4 = Blue, 5 = Magenta, 6 = Cyan, 7 = LightGray,
            8 = DarkGray, 9 = LightRed, 10 = LightGreen, 11 = LightYellow, 12 = LightBlue, 13 = LightMagenta, 14 = LightCyan, 15 = White,
            16 and higher = Xterm colors.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalPalette.Item(System.Int32)">
            <summary>
            Gets the palette color at the specified index.
            </summary>
            <param name="index">Color index.</param>
            <returns>Palette color.</returns>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalPalette.Pick">
            <summary>
            Gets the palette with standard Pick colors in the first 16 entries and xterm colors in the higher entries.
            </summary>
            <remarks>
            The default palette uses the following color scheme:
            0 = Black, 1 = Blue, 2 = Green, 3 = Cyan, 4 = Red, 5 = Magenta, 6 = Yellow, 7 = LightGray,
            8 = DarkGray, 9 = LightBlue, 10 = LightGreen, 11 = LightCyan, 12 = LightRed, 13 = LightMagenta, 14 = LightYellow, 15 = White,
            16 and higher = Xterm colors.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalPalette.Sco">
            <summary>
            Gets the palette with standard SCO colors in the first 16 entries and xterm colors in the higher entries.
            </summary>
            <remarks>
            The default palette uses the following color scheme:
            0 = Black, 1 = Blue, 2 = Green, 3 = Cyan, 4 = Red, 5 = Magenta, 6 = Yellow, 7 = LightGray,
            8 = DarkGray, 9 = LightBlue, 10 = LightGreen, 11 = LightCyan, 12 = LightRed, 13 = LightMagenta, 14 = LightYellow, 15 = White,
            16 and higher = Xterm colors.
            </remarks>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TerminalScreen">
            <summary>
            Represents a terminal screen.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalScreen.Clear">
            <summary>
            Clears the whole screen and sets cursor position to the top-left corner.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalScreen.Clear(System.Boolean)">
            <summary>
            Clears the whole screen and sets cursor position to the top-left corner.
            </summary>
            <param name="clearHistory">Specifies whether to clear the history buffer as well.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalScreen.GetCell(System.Int32,System.Int32)">
            <summary>
            Gets the cell at the specified position.
            </summary>
            <param name="column">Cell column (0 is the first column).</param>
            <param name="row">Cell row (0 is the first row).</param>
            <returns>Character cell.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalScreen.GetRegion(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the array of cells at the specified region represented by the <see cref="T:ComponentPro.Net.Terminal.TerminalScreenRegion" /> class.
            </summary>
            <param name="column">Cell column (0 is the first column).</param>
            <param name="row">Cell row (0 is the first row).</param>
            <param name="width">Width of the region.</param>
            <param name="height">Height of the region.</param>
            <returns>A <see cref="T:ComponentPro.Net.Terminal.TerminalScreenRegion" /> class representing the region of the cells.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalScreen.GetRegionText(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the text at the specified region. It is represented by array of lines.
            </summary>
            <param name="column">Cell column (0 is the first column).</param>
            <param name="row">Cell row (-HistoryLength is the lowest row, 0 is the first row on the screen).</param>
            <param name="width">Width of the region.</param>
            <param name="height">Height of the region.</param>
            <returns></returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalScreen.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves the specified region of screen buffer to the specified position.
            </summary>
            <param name="sourceLeft">The leftmost column of the source region (0 is the first column).</param>
            <param name="sourceTop">The topmost row of the source region (0 is the first row).</param>
            <param name="sourceWidth">Width of the region.</param>
            <param name="sourceHeight">Height of the region</param>
            <param name="targetLeft">The leftmost column of the target region (0 is the first column).</param>
            <param name="targetTop">The topmost row of the target region (0 is the first row).</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalScreen.SetCell(System.Int32,System.Int32,ComponentPro.Net.Terminal.TerminalCell)">
            <summary>
            Sets the cell at the specified position to the specified cell.
            </summary>
            <param name="column">Cell column (0 is the first column).</param>
            <param name="row">Cell row (0 is the first row).</param>
            <param name="cell">Cell to replace the original cell.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalScreen.SetCursorPosition(System.Int32,System.Int32)">
            <summary>
            Sets the cursor position.
            </summary>
            <param name="column">Cursor column (0 is the first column).</param>
            <param name="row">Cursor row (0 is the first row).</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalScreen.Write(System.String)">
            <summary>
            Writes the specified string to the console.
            </summary>
            <param name="value">String value.</param>
            <remarks>The string may contain ANSI control sequences.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalScreen.Write(System.Object)">
            <summary>
            Writes the text represented by the specified object to the console.
            </summary>
            <remarks>The text representation of the object may contain ANSI control sequences.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalScreen.Write(System.String,System.Object[])">
            <summary>
            Writes the text represented by the specified array of objects to the console.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">Object to write using format.</param>
            <remarks>The text representation of the object array may contain ANSI control sequences.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalScreen.WriteLine">
            <summary>
            Writes a newline character to the console.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalScreen.WriteLine(System.String)">
            <summary>
            Writes the specified string to the console, followed by a newline character.
            </summary>
            <param name="value">String value.</param>
            <remarks>The string may contain ANSI control sequences.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalScreen.WriteLine(System.Object)">
            <summary>
            Writes the text represented by the specified object to the console, followed by a newline character.
            </summary>
            <remarks>The text representation of the object may contain ANSI control sequences.</remarks>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalScreen.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the text represented by the specified array of objects to the console, followed by a newline character.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">Object to write using format.</param>
            <remarks>The text representation of the object array may contain ANSI control sequences.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalScreen.Columns">
            <summary>
            Gets the number of character columns.
            </summary>
            <value>Number of columns.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalScreen.CursorLeft">
            <summary>
            Gets the cursor column (0 is the first column).
            </summary>
            <value>Cursor column.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalScreen.CursorTop">
            <summary>
            Gets the cursor row (0 is the first row).
            </summary>
            <value>Cursor row.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalScreen.Rows">
            <summary>
            Gets the number of character rows.
            </summary>
            <value>Number of rows.</value>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TerminalScreenRegion">
            <summary>
            Represents a region of character cells of the terminal screen.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TerminalScreenRegion.GetCell(System.Int32,System.Int32)">
            <summary>
            Gets the cell at the specified position.
            </summary>
            <param name="column">Cell column (0 is the first column).</param>
            <param name="row">Cell row (0 is the first row).</param>
            <returns>Character cell.</returns>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalScreenRegion.Height">
            <summary>
            Gets a height of the region.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalScreenRegion.Item(System.Int32,System.Int32)">
            <summary>
            Gets the cell at the specified position.
            </summary>
            <param name="column">Cell column (0 is the first column).</param>
            <param name="row">Cell row (0 is the first row).</param>
            <returns>Character cell.</returns>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TerminalScreenRegion.Width">
            <summary>
            Gets a width of the region.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.ShellProcessingResult">
            <summary>
            Terminal state.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ShellProcessingResult.DataReceived">
            <summary>Incoming data was just received and processed.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ShellProcessingResult.NoDataAvailable">
            <summary>No incoming data is currently available.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ShellProcessingResult.Disconnected">
            <summary>The terminal has disconnected.</summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TerminalType">
            <summary>
            Specifies the terminal type (how are the escape sequences interpreted).
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalType.Ansi">
            <summary>
            The most common type. If <see cref="P:ComponentPro.Net.Terminal.ITerminal.TerminalName" /> refers to VT52 series the <see cref="F:ComponentPro.Net.Terminal.TerminalType.VT52" /> is used instead.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalType.Wyse60">
            <summary>
            Wyse 60 compatible type.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalType.Pick">
            <summary>
            Pick compatible type.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminalType.VT52">
            <summary>
            VT52 compatible type.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TerminaProcessingMode">
            <summary>
            Terminal data processing mode.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminaProcessingMode.None">
            <summary>Incoming data is not processed automatically.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TerminaProcessingMode.Automatic">
            <summary>Incoming data is processed by a background thread.</summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TextSelectionMode">
            <summary>
            Selection mode.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TextSelectionMode.Standard">
            <summary>Standard mode.</summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TextSelectionMode.Block">
            <summary>Block mode.</summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.VirtualTerminal">
            <summary>
            Represents a virtual off-screen terminal.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the virtual terminal.
            </summary>
            <param name="columns">Horizontal size in character columns.</param>
            <param name="rows">Vertical size in character rows.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the virtual terminal.
            </summary>
            <param name="columns">Horizontal size in character columns.</param>
            <param name="rows">Vertical size in character rows.</param>
            <param name="historyMaxLength">Maximum history buffer length (0..1000).</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.Attach(ComponentPro.Net.Terminal.IShellConnection)">
            <summary>
            Binds the terminal to the specified shell channel factory - usually an instance of ComponentPro.Net.Ssh or ComponentPro.Net.Telnet class.
            </summary>
            <param name="factory">Shell channel factory.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.Dispose">
            <summary>
            Disposes the <see cref="P:ComponentPro.Net.Terminal.VirtualTerminal.TerminalFont" /> object and closes the channel associated with it.
            </summary>
            <remarks>
            Calling this method ensures that all resources are freed.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.Save(System.IO.Stream,ComponentPro.Net.Terminal.ScreenshotFileFormat)">
            <summary>
            Saves the content of the terminal screen to the specified stream in the specified format.
            </summary>
            <param name="output">Output stream.</param>
            <param name="format">Capture format.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.Save(System.String,ComponentPro.Net.Terminal.ScreenshotFileFormat)">
            <summary>
            Saves the content of the terminal screen to the specified file in the specified format.
            </summary>
            <param name="path">Path to a local file.</param>
            <param name="format">Capture format.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.Save(System.IO.Stream,ComponentPro.Net.Terminal.ScreenshotFileFormat,ComponentPro.Net.Terminal.ScreenshotOptions)">
            <summary>
            Saves the content of the terminal screen to the specified stream in the specified format with the specified options.
            </summary>
            <param name="output">Output stream.</param>
            <param name="format">Capture format.</param>
            <param name="options">Capture options.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.Save(System.String,ComponentPro.Net.Terminal.ScreenshotFileFormat,ComponentPro.Net.Terminal.ScreenshotOptions)">
            <summary>
            Saves the content of the terminal screen to the specified file in the specified format with the specified options.
            </summary>
            <param name="path">Path to a local file.</param>
            <param name="format">Capture format.</param>
            <param name="options">Capture options.</param>		
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.SetScreenSize(System.Int32,System.Int32)">
            <summary>
            Sets a new screen size.
            </summary>
            <param name="columns">Horizontal size in character columns.</param>
            <param name="rows">Vertical size in character rows.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.Detach">
            <summary>
            Unbinds the terminal from the current channel and closes the channel.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.OnAttachCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.VirtualTerminal.AttachCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.AttachAsync(ComponentPro.Net.Terminal.IShellConnection,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously Binds the virtual terminal to the specified shell connection (an instance of the <b>SshClient</b> or <b>TelnetClient</b>).
            </summary>
            <param name="connection">The shell connection.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.AttachAsync(ComponentPro.Net.Terminal.IShellConnection,System.Object)">
            <summary>
            Asynchronously Binds the virtual terminal to the specified shell connection (an instance of the <b>SshClient</b> or <b>TelnetClient</b>).
            </summary>
            <param name="connection">The shell connection.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.OnWaitForDataCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.Object})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.VirtualTerminal.WaitForDataCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.WaitForDataAsync(System.Text.RegularExpressions.Regex,System.Int32,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Object},System.Object)">
            <summary>
            Asynchronously processes any available incoming data until a response is received that matches the specified regular expression,
            or until the specified maximum wait time period elapses.
            </summary>
            <param name="pattern">Expected regular expression to wait for.</param>
            <param name="timeout">Maximum wait time period (in milliseconds).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.WaitForDataAsync(System.Text.RegularExpressions.Regex,System.Int32,System.Object)">
            <summary>
            Asynchronously processes any available incoming data until a response is received that matches the specified regular expression,
            or until the specified maximum wait time period elapses.
            </summary>
            <param name="pattern">Expected regular expression to wait for.</param>
            <param name="timeout">Maximum wait time period (in milliseconds).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.WaitForDataAsync(System.String,System.Int32,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Object},System.Object)">
            <summary>
            Asynchronously processes any available incoming data until a response is received that matches the specified regular expression,
            or until the specified maximum wait time period elapses.
            </summary>
            <param name="response">A response to wait for.</param>
            <param name="timeout">Maximum wait time period (in milliseconds).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.WaitForDataAsync(System.String,System.Int32,System.Object)">
            <summary>
            Asynchronously processes any available incoming data until a response is received that matches the specified regular expression,
            or until the specified maximum wait time period elapses.
            </summary>
            <param name="response">A response to wait for.</param>
            <param name="timeout">Maximum wait time period (in milliseconds).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.WaitForDataAsync(System.Int32,ComponentPro.ExtendedAsyncCompletedEventHandler{System.Object},System.Object)">
            <summary>
            Asynchronously processes any available incoming data and returns the current terminal state.
            If no data is available, wait until more data arrives or until the specified maximum wait time period elapses,
            whichever comes sooner.
            </summary>
            <param name="timeout">Maximum wait time period (in milliseconds).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.WaitForDataAsync(System.Int32,System.Object)">
            <summary>
            Asynchronously processes any available incoming data and returns the current terminal state.
            If no data is available, wait until more data arrives or until the specified maximum wait time period elapses,
            whichever comes sooner.
            </summary>
            <param name="timeout">Maximum wait time period (in milliseconds).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.WaitForDataAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{System.Object},System.Object)">
            <summary>
            Asynchronously processes any available incoming data and returns the current terminal state.
            If no data is available, wait until more data arrives or until the specified maximum wait time period elapses,
            whichever comes sooner.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.WaitForDataAsync(System.Object)">
            <summary>
            Asynchronously processes any available incoming data and returns the current terminal state.
            If no data is available, wait until more data arrives or until the specified maximum wait time period elapses,
            whichever comes sooner.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.OnConsolePressKeyCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.VirtualTerminal.ConsolePressKeyCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.ConsolePressKeyAsync(System.ConsoleKeyInfo,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends the specified key to the server, simulating keyboard input.
            </summary>
            <param name="key">Key to send.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.ConsolePressKeyAsync(System.ConsoleKeyInfo,System.Object)">
            <summary>
            Asynchronously sends the specified key to the server, simulating keyboard input.
            </summary>
            <param name="key">Key to send.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.ConsolePressKeyAsync(ComponentPro.Net.Terminal.FunctionKey,System.ConsoleModifiers,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends the specified key to the server, simulating keyboard input.
            </summary>
            <param name="key">Function key to send.</param>
            <param name="modifiers">Console modifiers to use.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.ConsolePressKeyAsync(ComponentPro.Net.Terminal.FunctionKey,System.ConsoleModifiers,System.Object)">
            <summary>
            Asynchronously sends the specified key to the server, simulating keyboard input.
            </summary>
            <param name="key">Function key to send.</param>
            <param name="modifiers">Console modifiers to use.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.OnConsoleSendTextCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.VirtualTerminal.ConsoleSendTextCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.ConsoleSendTextAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously Sends the specified text to the server, simulating keyboard input.
            </summary>
            <param name="text">Text to send.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.ConsoleSendTextAsync(System.String,System.Object)">
            <summary>
            Asynchronously Sends the specified text to the server, simulating keyboard input.
            </summary>
            <param name="text">Text to send.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.OnSendDataCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.VirtualTerminal.SendDataCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.SendDataAsync(System.Byte[],System.Int32,System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends the specified amount of data to the server, starting at the indicated location in the data buffer.
            </summary>
            <param name="data">The data to send.</param>
            <param name="offset">The position in the data buffer to begin sending data.</param>
            <param name="count">The number of bytes to send.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.SendDataAsync(System.Byte[],System.Int32,System.Int32,System.Object)">
            <summary>
            Asynchronously sends the specified amount of data to the server, starting at the indicated location in the data buffer.
            </summary>
            <param name="data">The data to send.</param>
            <param name="offset">The position in the data buffer to begin sending data.</param>
            <param name="count">The number of bytes to send.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.OnSendBreakCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.VirtualTerminal.SendBreakCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.SendBreakAsync(System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously Sends a break request to the server. This may or may not have any effect.
            </summary>
            <param name="breakLength">Break length, in milliseconds (if supported by the underlying channel).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.SendBreakAsync(System.Int32,System.Object)">
            <summary>
            Asynchronously Sends a break request to the server. This may or may not have any effect.
            </summary>
            <param name="breakLength">Break length, in milliseconds (if supported by the underlying channel).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.OnExecuteCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{System.String})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.VirtualTerminal.ExecuteCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.ExecuteAsync(System.String,System.Text.RegularExpressions.Regex,System.Int32,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously executes the specified command on the server within the specified amount of time (in miliseconds).
            </summary>
            <param name="command">The command to send to the server.</param>
            <param name="timeout">The maximum time period to wait.</param>
            <param name="pattern">Expected regular expression to wait for.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.ExecuteAsync(System.String,System.Text.RegularExpressions.Regex,System.Int32,System.Object)">
            <summary>
            Asynchronously executes the specified command on the server within the specified amount of time (in miliseconds).
            </summary>
            <param name="command">The command to send to the server.</param>
            <param name="timeout">The maximum time period to wait.</param>
            <param name="pattern">Expected regular expression to wait for.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.ExecuteAsync(System.String,System.Text.RegularExpressions.Regex,ComponentPro.ExtendedAsyncCompletedEventHandler{System.String},System.Object)">
            <summary>
            Asynchronously executes the specified command on the server. The operation does not timeout.
            </summary>
            <param name="command">The command to send to the server.</param>
            <param name="pattern">Expected regular expression to wait for.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.ExecuteAsync(System.String,System.Text.RegularExpressions.Regex,System.Object)">
            <summary>
            Asynchronously executes the specified command on the server. The operation does not timeout.
            </summary>
            <param name="command">The command to send to the server.</param>
            <param name="pattern">Expected regular expression to wait for.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.OnStateChanged(System.Object,ComponentPro.Net.Terminal.ShellSessionStateChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.VirtualTerminal.StateChanged"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.Terminal.ShellSessionStateChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.#ctor(ComponentPro.Net.Terminal.IShellConnection,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Terminal.VirtualTerminal"/> class and attach it to the specified <paramref name="connection">shell connection</paramref>.
            </summary>
            <param name="connection">The shell connection.</param>
            <param name="columns">The number of screen columns.</param>
            <param name="rows">The number of screen rows.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.#ctor(ComponentPro.Net.Terminal.IShellConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Terminal.VirtualTerminal"/> class and attach it to the specified <paramref name="connection">shell connection</paramref> with 80x25 screen.
            </summary>
            <param name="connection">The shell connection.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.DetectPrompt">
            <summary>
            Detects the prompt which the server currently uses.
            </summary>
            <remarks>
            Use <see cref="P:ComponentPro.Net.Terminal.VirtualTerminal.Prompt"/> property to set the prompt.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.KeepAlive">
            <summary>
            Sends a keep alive packet (NOOP) to the server.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.Send(System.String)">
            <summary>
            Sends text to the server.
            </summary>
            <param name="text">Text to be sent.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.Send(System.ConsoleKeyInfo)">
            <summary>
            Sends a key to the server. This is used for sending simple keys or combinations such as Ctrl+C.
            </summary>
            <param name="key">Key to be sent.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.Send(ComponentPro.Net.Terminal.FunctionKey)">
            <summary>
            Sends a key to the server. This is used for sending function keys such as Enter or F10.
            </summary>
            <param name="key">Key to be sent.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.Send(ComponentPro.Net.Terminal.FunctionKey,System.ConsoleModifiers)">
            <summary>
            Sends a key to the server. 
            </summary>
            <param name="key">Key to be sent.</param>
            <param name="modifiers">Modifiers for the key such as Alt, Shift or Ctrl.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.Send(System.ConsoleKey,System.ConsoleModifiers)">
            <summary>
            Sends a key to the server. 
            </summary>
            <param name="key">Key to be sent.</param>
            <param name="modifiers">Modifiers for the key such as Alt, Shift or Ctrl.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.ReadChar">
            <summary>
            Receives a printable character from the server.
            </summary>
            <returns>A character received from the server.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.ReadLine">
            <summary>
            Receives response from the server until and end-of-line sequence is received.
            </summary>
            <returns>A line received from the server.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.CheckFor(ComponentPro.Net.Terminal.ScriptEvent)">
            <summary>
            Checks whether the specified condition is currently met.
            </summary>
            <param name="scriptEvent">Condition to be met.</param>
            <returns>Result of the check.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.CheckFor(ComponentPro.Net.Terminal.ScriptEvent[])">
            <summary>
            Processes response from the server until any condition is met. The events are processed as if the OR operator was applied.
            </summary>
            <param name="events">Condition to be met.</param>
            <returns>Result of the check.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.VirtualTerminal.Execute(System.String,ComponentPro.Net.Terminal.ScriptEvent[])">
            <summary>
            Executes the specified command on the server within the specified amount of time (in miliseconds).
            </summary>
            <param name="command">The command to send to the server.</param>
            <param name="events">The conditions that can occur and be checked.</param>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.CellSize">
            <summary>
            Gets the size of a character cell.
            </summary>
            <value>Size of character cell.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.HistoryLength">
            <summary>
            Gets the current history buffer length.
            </summary>
            <value>History buffer length (0..HistoryMaxLength).</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.IsDisposed">
            <summary>
            Gets a value indicating whether the terminal is disposed.
            </summary>
            <value>True if disposed; false if not disposed.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.Palette">
            <summary>
            Gets or sets the terminal palette.
            </summary>
            <value>Terminal palette.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.Recorder">
            <summary>
            Gets or sets incoming data recorder.
            </summary>
            <value>Incoming data recorder.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.Screen">
            <summary>
            Gets the terminal screen object.
            </summary>
            <value>Terminal screen.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.TerminalFont">
            <summary>
            Gets or sets the terminal font. Setting the font may also cause the screen size to be adjusted to fit into the control area.
            </summary>
            <value>Terminal font.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.Transfers">
            <summary>
            Gets the object which allows file transferring.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.VirtualTerminal.ServerInstructionReceived">
            <summary>
            Occurs when a specific client action is requested by the server.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.VirtualTerminal.DataReceived">
            <summary>
            Occurs when the data are received from the server.
            </summary>			
        </member>
        <member name="E:ComponentPro.Net.Terminal.VirtualTerminal.Disconnected">
            <summary>
            Occurs when disconnected from the server.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.VirtualTerminal.RemoteResize">
            <summary>
            Occurs when the screen resize is requested by the server.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.InvokeFromCurrentThreads">
            <summary>
            Gets a value indicating whether to raise events from the current thread or 
            to use a <see cref="T:System.Threading.SynchronizationContext" /> object available when an asynchronous operation was started.
            The default value is <c>false</c>.
            </summary>
            <value><c>true</c> to raise events directly from the current working thread; 
            <c>false</c> to raise them using a <see cref="T:System.Threading.SynchronizationContext" /> object.</value>
            <remarks>
            Synchronous methods always raise events from the current working thread.
            </remarks>
        </member>
        <member name="E:ComponentPro.Net.Terminal.VirtualTerminal.AttachCompleted">
            <summary>
            Occurs after a <see cref="O:AttachAsync"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.VirtualTerminal.WaitForDataCompleted">
            <summary>
            Occurs after a <see cref="O:WaitForDataAsync"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.VirtualTerminal.ConsolePressKeyCompleted">
            <summary>
            Occurs after a <see cref="O:ConsolePressKeyAsync"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.VirtualTerminal.ConsoleSendTextCompleted">
            <summary>
            Occurs after a <see cref="O:ConsoleSendTextAsync"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.VirtualTerminal.SendDataCompleted">
            <summary>
            Occurs after a <see cref="O:SendDataAsync"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.VirtualTerminal.SendBreakCompleted">
            <summary>
            Occurs after a <see cref="O:SendBreakAsync"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.VirtualTerminal.ExecuteCompleted">
            <summary>
            Occurs after a <see cref="O:ExecuteAsync"/> call has been completed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.VirtualTerminal.StateChanged">
            <summary>
            Occurs when the state of the <see cref="T:ComponentPro.Net.Terminal.VirtualTerminal"/> object is changed.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.AutoMatchPrompt">
            <summary>
            Gets or sets whether to automatically match prompt in <see cref="M:ComponentPro.Net.Terminal.VirtualTerminal.WaitFor(ComponentPro.Net.Terminal.ScriptEvent)"/>, <see cref="M:ComponentPro.Net.Terminal.VirtualTerminal.ReadUntil(ComponentPro.Net.Terminal.ScriptEvent)"/>, 
            <see cref="M:ComponentPro.Net.Terminal.VirtualTerminal.ReadUntilPrompt"/>, <see cref="M:ComponentPro.Net.Terminal.VirtualTerminal.ReadLine"/>, <see cref="M:ComponentPro.Net.Terminal.VirtualTerminal.ReadChar"/> and <see cref="M:ComponentPro.Net.Terminal.VirtualTerminal.CheckFor(ComponentPro.Net.Terminal.ScriptEvent)"/> methods.
            The default value is false.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.FinalExitCode">
            <summary>
            Gets the exit code of the receiving channel when the connection was closed.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.HoldReceivedData">
            <summary>
            Gets or sets a value indicating whether to hold received data in <see cref="P:ComponentPro.Net.Terminal.VirtualTerminal.ReceivedData"/> property.
            The default value is true.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.LastResult">
            <summary>
            Gets the result of last called <see cref="M:ComponentPro.Net.Terminal.VirtualTerminal.ReadUntilPrompt"/>, <see cref="M:ComponentPro.Net.Terminal.VirtualTerminal.ReadLine"/>, <see cref="M:ComponentPro.Net.Terminal.VirtualTerminal.ReadChar"/> or <see cref="M:ComponentPro.Net.Terminal.VirtualTerminal.ReadUntil(ComponentPro.Net.Terminal.ScriptEvent)"/> method. Please note that calling other scripting methods reset this to null.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.Prompt">
            <summary>
            Gets or sets the sequence that is used to detect command prompt.
            To use regular expressions, prepend the string with "regex:".
            To use wildcards, prepend the string with "mask:".
            Prompt sequence is used by <see cref="M:ComponentPro.Net.Terminal.VirtualTerminal.ReadUntilPrompt"/> method (and other methods if <see cref="P:ComponentPro.Net.Terminal.ScriptEvent.Prompt"/> is specified).
            To detect the current prompt automatically , use <see cref="M:ComponentPro.Net.Terminal.VirtualTerminal.DetectPrompt"/> method.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.ReceivedData">
            <summary>
            Gets data received since the previous data-receiving method.
            If <see cref="P:ComponentPro.Net.Terminal.VirtualTerminal.HoldReceivedData"/> is set to false, this returns null.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.ShellTimeout">
            <summary>
            Gets or sets the timeout, in milliseconds, for receiving data.
            The default value is 60000 (one minute).
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.TrimReadUntilResponse">
            <summary>
            Gets or sets a value indicating whether <see cref="M:ComponentPro.Net.Terminal.VirtualTerminal.ReadUntilPrompt"/>, <see cref="M:ComponentPro.Net.Terminal.VirtualTerminal.ReadLine"/>, 
            <see cref="M:ComponentPro.Net.Terminal.VirtualTerminal.ReadChar"/> and <see cref="M:ComponentPro.Net.Terminal.VirtualTerminal.ReadUntil(ComponentPro.Net.Terminal.ScriptEvent)"/> methods remove the prompt or end-of-line from the returned value.
            The default value is true.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.IsConnected">
            <summary>
            Indicates whether the control is connected to the server.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.IsBound">
            <summary>
            Indicates whether the control is bound to a shell connection.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.TerminalName">
            <summary>
            Gets or sets the terminal name.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.TerminalType">
            <summary>
            Gets or sets the terminal type.
            </summary>
            <value>Terminal type.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.Encoding">
            <summary>
            Gets or sets the character encoding for incoming and outgoing data.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.TelnetEscapesCarriageReturn">
            <summary>
            Specifies whether to escape CR character to CR NUL during send in Telnet. True to send CR as CR NUL; false to send CR alone.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.AutoWrap">
            <summary>
            Gets or sets the auto wrap mode.
            </summary>
            <remarks>
            It defines the behavior of a character received when the cursor is at the last column.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.BreakSequence">
            <summary>
            Gets or sets which break sequence to use - defines the behavior of the <see cref="M:ComponentPro.Net.Terminal.TerminalControl.SendBreak(System.Int32)"/> method.
            </summary>
            <value>Break sequence.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.LocalEcho">
            <summary>
            Gets or sets a boolean value indicating whether the local echo is enabled or disabled.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.NewLineType">
            <summary>
            Gets or sets a new line type for outgoing data.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.BackspaceKey">
            <summary>
            Gets or sets a Backspace key sequence for outgoing data.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.CursorKeys">
            <summary>
            Gets or sets the cursor key mode.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.IgnoreCursorKeyModeChange">
            <summary>
            Specifies whether to ignore cursor key mode change requests from the server.
            </summary>
            <value>True to ignore cursor key mode change requests; false to allow.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.HomeAndEndKeys">
            <summary>
            Gets or sets the behavior of Home and End keys.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.CursorStyles">
            <summary>
            Gets or sets the cursor style.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.KeysMode">
            <summary>
            Gets or sets the keys mode.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.ImplicitCarriageReturnInLinefeed">
            <summary>
            Gets or sets a value indicating whether a CR character is implied in any received LF.
            </summary>
            <value>True to imply CR in every LF; false to not imply.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.DestructiveBackspace">
            <summary>
            Gets or sets a value indicating whether to treat the incoming destructive backspace characters (7F) as non-destructive backspace (08).
            </summary>
            <value>True to treat destructive backspace as non-destructive, false to allow destructive backspace.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.IgnoreSubstituteCharacter">
            <summary>
            Gets or sets a value indicating whether to ignore incoming substitute characters (1A) or replace them with replaced by a question mark.
            </summary>
            <value>True to ignore substitute characters; false to replace them with a question mark.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.PersistColorsOnSelectGraphicRendition">
            <summary>
            Specifies whether escape sequence of the Select Graphic Rendition also clears the color of the pen.
            </summary>
            <value>True to persist last set color; false to reset color of the pen.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.ColorScheme">
            <summary>
            Gets or sets the color scheme.
            </summary>
            <value>Color scheme.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.BlinkingText">
            <summary>
            Gets or sets the blinking text appereance.
            </summary>
            <value>Blinking text appereance.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.BackColorIndex">
            <summary>
            Gets or sets the standard background color.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.ForeColorIndex">
            <summary>
            Gets or sets the standard foreground color - text color.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.BoldTextColorIndex">
            <summary>
            Gets or sets the bold text color.
            </summary>
            <remarks>To ensure color changes are applied immediately to the terminal control, you have to call the <see cref="M:System.Windows.Forms.Control.Refresh" /> method.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.GrayedTextColorIndex">
            <summary>
            Gets or sets the faint text color.
            </summary>
            <remarks>To ensure color changes are applied immediately to the terminal control, you have to call the <see cref="M:System.Windows.Forms.Control.Refresh" /> method.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.ItalicTextColorIndex">
            <summary>
            Gets or sets the italic text color.
            </summary>        
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.SingleUnderlinedTextColorIndex">
            <summary>
            Gets or sets the single underline text color.
            </summary>
            <remarks>To ensure color changes are applied immediately to the terminal control, you have to call the <see cref="M:System.Windows.Forms.Control.Refresh" /> method.</remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.DoubleUnderlinedTextColorIndex">
            <summary>
            Gets or sets the double underline text color.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.VirtualTerminal.NormalCursorColorIndex">
            <summary>
            Gets or sets the normal cursor color index.
            </summary>
            <value>The normal cursor color index.</value>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TelnetClient">
            <summary>
            Provides methods for communication with Telnet servers.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.TelnetClient.DefaultPort">
            <summary>
            Default Telnet port (23).
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TelnetClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Terminal.TelnetClient" /> class, using default port 23 and no SSL.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string IP address.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TelnetClient.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Terminal.TelnetClient" /> class, using specified port and no SSL.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string IP address.</param>
            <param name="serverPort">The server port (eg. 23).</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TelnetClient.#ctor(System.String,ComponentPro.Net.SslSecurityMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Terminal.TelnetClient" /> class, using default port 23 and specified SSL mode.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string IP address.</param>
            <param name="security">Connection security.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TelnetClient.#ctor(System.String,System.Int32,ComponentPro.Net.SslSecurityMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.Terminal.TelnetClient" /> class, using specified port and SSL mode.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string IP address.</param>
            <param name="serverPort">The server port (eg. 23).</param>
            <param name="security">Connection security.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TelnetClient.SetSocketFactory(ComponentPro.Net.ISocketFactory)">
            <summary>
            Sets the socket factory to be used to create communication sockets.
            </summary>
            <param name="factory">Socket factory.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TelnetClient.CreateShell">
            <summary>
            Starts a remote shell.
            </summary>
            <returns>Shell object.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TelnetClient.OnCreateShellCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.Net.Terminal.TerminalShell})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.TelnetClient.CreateShellCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TelnetClient.CreateShellAsync(ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.Terminal.TerminalShell},System.Object)">
            <summary>
            Asynchronously creates a remote shell.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TelnetClient.CreateShellAsync(System.Object)">
            <summary>
            Asynchronously creates a remote shell.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TelnetClient.CreateShellAsync">
            <summary>
            Asynchronously creates a remote shell.
            </summary>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TelnetClient.HostName">
            <summary>
            Gets the host-name of the remote server.
            </summary>
            <value>Remote server host-name.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TelnetClient.Port">
            <summary>
            Gets the port of the remote server.
            </summary>
            <value>Remote server port.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TelnetClient.Proxy">
            <summary>
            Gets or sets the network proxy to use to access a remote server.
            </summary>
            <value>The <see cref="P:ComponentPro.Net.Terminal.TelnetClient.Proxy" /> to use to access a remote server.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TelnetClient.Config">
            <summary>
            Gets or sets Telnet object settings.
            </summary>
            <value>Telnet object settings.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TelnetClient.Timeout">
            <summary>
            Gets or sets the length of time in milliseconds before the operation times out (specify -1 or 0 to indicate that the request does not time out).
            </summary>
            <value>
            The length of time, in milliseconds, until the operation times out,
            or the value -1 or 0 to indicate that the request does not time out.
            Default is 60000 (60 seconds).
            </value>
            <remarks>
            <p>
            The internal timeout counter is reset every time data is sent
            or received from to server. This also means that data transfers only
            time out after x milliseconds of inactivity, not after x milliseconds
            from the start of the transfer.
            </p>
            <p>
            Minimal value is 1000. Setting this to a value lower than 1000 will set it to 1000.
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TelnetClient.InvokeFromCurrentThreads">
            <summary>
            Gets a value indicating whether to raise events from the current thread or 
            to use a <see cref="T:System.Threading.SynchronizationContext" /> object available when an asynchronous operation was started.
            The default value is <c>false</c>.
            </summary>
            <value><c>true</c> to raise events directly from the current working thread; 
            <c>false</c> to raise them using a <see cref="T:System.Threading.SynchronizationContext" /> object.</value>
            <remarks>
            Synchronous methods always raise events from the current working thread.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TelnetClient.TraceSource">
            <summary>
            Gets or sets the source object for all log messages generated by this object. If not set, the property returns the current object.
            </summary>
            <remarks>
            It is handy to set this property to a different object other than this object in some situation where all log messages should come from a single source.
            For example, in a build system, uploading files is just a child task of a main one, by assigning this property to the main task, 
            you can categorize all messages that come from the main task.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TelnetClient.TraceListenerManager">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Net.Terminal.TelnetClient.TraceListenerManager"/> object to which the log messages generated by this object are sent. 
            If not set, the <see cref="F:ComponentPro.Diagnostics.XTrace.Default"/> trace listener manager is used. If this property is set to null, all messages from this object wont be logged.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TelnetClient.CreateShellCompleted">
            <summary>
            Occurs after a <see cref="O:CreateShellAsync"/> call has been completed.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TelnetException">
            <summary>
            The exception that is thrown when a Telnet error occurs.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TelnetException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.TelnetException" /> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TelnetException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.TelnetException" /> class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TelnetException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.TelnetException" /> class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TelnetConfig">
            <summary>
            Specifies various Telnet settings.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TelnetConfig.#ctor">
            <summary>
            Creates an instance of <see cref="T:ComponentPro.Net.Terminal.TelnetConfig"/>.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TelnetConfig.RaiseEventsFromCurrentThread">
            <summary>
            Specifies whether to raise asynchronous events from the current working thread or 
            whether to raise them using a <see cref="T:System.Threading.SynchronizationContext" /> available when an asynchronous operation was started.
            </summary>
            <value>False (default) to raise events using <see cref="T:System.Threading.SynchronizationContext" />; true to raise them directly form the current working thread.</value>
            <remarks>Events of synchronous methods are always raised from the current working thread.</remarks>
        </member>
        <member name="T:ComponentPro.Net.Terminal.TelnetTerminalControl">
            <summary>
            Telnet terminal emulator control.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TelnetTerminalControl.#ctor">
            <summary>
            Creates a new instance of Telnet terminal control.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TelnetTerminalControl.Disconnect">
            <summary>
            Disconnects from the Telnet server.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TelnetTerminalControl.OnConnected(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.TelnetTerminalControl.Connected" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TelnetTerminalControl.Connect(System.String,System.Int32)">
            <summary>
            Connects to the Telnet server specified by <paramref name="serverName"/> and <paramref name="serverPort"/> parameters.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 23).</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TelnetTerminalControl.Connect(System.String)">
            <summary>
            Connects to the Telnet server specified by <paramref name="serverName"/> and default port 23.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TelnetTerminalControl.OnConnectCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.TelnetTerminalControl.ConnectCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TelnetTerminalControl.ConnectAsync(System.String,System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Initiates an asynchronous operation to a Telnet server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 23).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.TelnetTerminalControl.ConnectAsync(System.String,System.Int32,System.Object)">
            <summary>
            Initiates an asynchronous operation to connect to a Telnet server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 23).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TelnetTerminalControl.ServerName">
            <summary>
            Gets or sets the server address - either a hostname or a dotted string IP address.
            </summary>
            <value>Server address.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TelnetTerminalControl.ServerPort">
            <summary>
            Gets or sets the server port. Default value is 23.
            </summary>
            <value>Server port.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TelnetTerminalControl.Text">
            <summary>
            Gets or sets the text associated with this control.  
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TelnetTerminalControl.Connected">
            <summary>
            Occurs when connected to the server.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TelnetTerminalControl.Proxy">
            <summary>
            Gets or sets the network proxy to use to access a remote server.
            </summary>
            <value>The <see cref="P:ComponentPro.Net.Terminal.TelnetTerminalControl.Proxy"/> to use to access a remote server.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TelnetTerminalControl.Timeout">
            <summary> 
            Gets or sets the amount of time after which the operation will time out. A value of 0 or -1 indicates an infinite time-out period.
            </summary>
            <value>
            The time-out value in milliseconds. The default value is 60000 (60 seconds).
            Minimal value is 1000.
            </value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.TelnetTerminalControl.InvokeFromCurrentThreads">
            <summary>
            Gets a value indicating whether to raise events from the current thread or 
            to use a <see cref="T:System.Threading.SynchronizationContext" /> object available when an asynchronous operation was started.
            The default value is <c>false</c>.
            </summary>
            <value><c>true</c> to raise events directly from the current working thread; 
            <c>false</c> to raise them using a <see cref="T:System.Threading.SynchronizationContext" /> object.</value>
            <remarks>
            Synchronous methods always raise events from the current working thread.
            </remarks>
        </member>
        <member name="E:ComponentPro.Net.Terminal.TelnetTerminalControl.ConnectCompleted">
            <summary>
            Occurs after a <see cref="O:ConnectAsync"/> call has been completed.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.SshTerminalControl">
            <summary>
            SSH terminal emulator control.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.#ctor">
            <summary>
            Creates a new instance of SSH terminal control.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.OnStateChanged(System.Object,ComponentPro.Net.Terminal.ShellSessionStateChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.TerminalControl.StateChanged"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.Terminal.ShellSessionStateChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.AttachAsync(ComponentPro.Net.Terminal.IShellConnection,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously Binds the control to the specified shell connection (<see cref="T:ComponentPro.Net.Terminal.SshClient"/>).
            </summary>
            <param name="connection">The shell connection.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.OnChangePasswordCompleted(System.Object,ComponentPro.ExtendedAsyncCompletedEventArgs{ComponentPro.Net.SecureShellChangePasswordResult})">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.SshTerminalControl.ChangePasswordCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.ChangePasswordAsync(System.String,System.String,System.String,ComponentPro.ExtendedAsyncCompletedEventHandler{ComponentPro.Net.SecureShellChangePasswordResult},System.Object)">
            <summary>
            Asynchronously changes the specified user's password on the SSH server and authenticates.
            </summary>
            <param name="userName">The name of the user to change his password.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.ChangePasswordAsync(System.String,System.String,System.String,System.Object)">
            <summary>
            Asynchronously changes the specified user's password on the SSH server and authenticates.
            </summary>
            <param name="userName">The name of the user to change his password.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.OnAuthenticateCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.SshTerminalControl.AuthenticateCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.AuthenticateAsync(ComponentPro.Net.SecureShellGssApiCredentials,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates to the server using GSSAPI.
            </summary>
            <param name="credentials">The GSSAPI authentication settings.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.AuthenticateAsync(ComponentPro.Net.SecureShellGssApiCredentials,System.Object)">
            <summary>
            Asynchronously authenticates to the server using GSSAPI.
            </summary>
            <param name="credentials">The GSSAPI authentication settings.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.AuthenticateAsync(System.String,System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SSH server.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is a null reference (Nothing in VB.NET).</exception>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.AuthenticateAsync(System.String,System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SSH server.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is a null reference (Nothing in VB.NET).</exception>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.AuthenticateAsync(System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SSH server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.AuthenticateAsync(System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SSH server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.AuthenticateAsync(System.String,System.String,ComponentPro.Net.SecureShellPrivateKey,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SSH server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated, or null reference (Nothing in VB.NET).</param>
            <param name="privateKey">An RSA or DSA private key for key-based authentication.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> or <paramref name="privateKey"/> is empty, or neither private key or password is not specified.</exception>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.AuthenticateAsync(System.String,System.String,ComponentPro.Net.SecureShellPrivateKey,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SSH server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated, or null reference (Nothing in VB.NET).</param>
            <param name="privateKey">An RSA or DSA private key for key-based authentication.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> or <paramref name="privateKey"/> is empty, or neither private key or password is not specified.</exception>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.AuthenticateAsync(System.String,ComponentPro.Net.SecureShellPrivateKey,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SSH server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="privateKey">An RSA or DSA private key for key-based authentication.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="privateKey"/> is a null reference (Nothing in VB.NET).</exception>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.AuthenticateAsync(System.String,ComponentPro.Net.SecureShellPrivateKey,System.Object)">
            <summary>
            Asynchronously authenticates the user to the SSH server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="privateKey">An RSA or DSA private key for key-based authentication.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="privateKey"/> is a null reference (Nothing in VB.NET).</exception>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.AuthenticateAsync(System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous operation to authenticate the user to the SSH server.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.AuthenticateAsync(System.String,System.String,System.Object)">
            <summary>
            Begins an asynchronous operation to authenticate the user to the SSH server.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.OnConnectCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.SshTerminalControl.ConnectCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.ConnectAsync(System.String,System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously connects to the SSH server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 22).</param>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.ConnectAsync(System.String,System.Int32,System.Object)">
            <summary>
            Asynchronously connects to the SSH server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 22).</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.OnDisconnectCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.SshTerminalControl.DisconnectCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.DisconnectAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Begins an asynchronous operation to inform the server that the connection is about to close and
            terminates the connection.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.DisconnectAsync(System.Object)">
            <summary>
            Initiates an asynchronous operation to inform the server that the connection is about to close and
            terminates the connection.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.OnKeepAliveCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.SshTerminalControl.KeepAliveCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.KeepAliveAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends a data packet to the server to keep the connection alive.
            </summary>
            <param name="callback">An optional asynchronous callback to be invoked when this operation completes. This parameter can be null.</param>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.KeepAliveAsync(System.Object)">
            <summary>
            Asynchronously sends a data packet to the server to keep the connection alive.
            </summary>
            <param name="userState">A user-provided object that identifies this particular asynchronous operation.</param>
            <returns>An object that references the asynchronous operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.OnBanner(System.Object,ComponentPro.Net.BannerEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.SshTerminalControl.Banner"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.BannerEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.OnHostKeyVerifying(System.Object,ComponentPro.Net.HostKeyVerifyingEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.SshTerminalControl.HostKeyVerifying"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.HostKeyVerifyingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.OnKeyboardInteractiveAuthentication(System.Object,ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.SshTerminalControl.KeyboardInteractiveAuthentication"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.OnPasswordChangeRequest(System.Object,ComponentPro.Net.PasswordChangeRequestEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.Terminal.SshTerminalControl.PasswordChangeRequest"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.PasswordChangeRequestEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.Connect(System.String)">
            <summary>
            Connects to the SSH server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.Connect(System.String,System.Int32)">
            <summary>
            Connects to the SSH server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 22).</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.Disconnect">
            <summary>
            Disconnects from the SSH server.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.Authenticate(System.String,System.String)">
            <summary>
            Authenticates the user to the SSH server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="password"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <exception cref="T:ComponentPro.Net.SecureShellException">An error occured while authenticating the user.</exception>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.Authenticate(System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler)">
            <summary>
            Authenticates the user to the SSH server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <exception cref="T:ComponentPro.Net.SecureShellException">An error occured while authenticating the user.</exception>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.Authenticate(System.String,System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler)">
            <summary>
            Authenticates the user to the SSH server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> or <paramref name="keyboardInteractiveAuthenticationHandler"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <exception cref="T:ComponentPro.Net.SecureShellException">An error occured while authenticating the user.</exception>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.Authenticate(System.String,ComponentPro.Net.SecureShellPrivateKey)">
            <summary>
            Authenticates the user to the SSH server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="privateKey">An RSA or DSA private key for key-based authentication.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="privateKey"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <exception cref="T:ComponentPro.Net.SecureShellException">An error occured while authenticating the user.</exception>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.Authenticate(System.String,System.String,ComponentPro.Net.SecureShellPrivateKey)">
            <summary>
            Authenticates the user to the SSH server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated, or null reference (Nothing in VB.NET).</param>
            <param name="publicKeyAuthenticationData">An RSA or DSA private key for key-based authentication.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userName"/> or <paramref name="publicKeyAuthenticationData"/> is empty, or neither private key or password is not specified.</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <exception cref="T:ComponentPro.Net.SecureShellException">An error occured while authenticating the user.</exception>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.Authenticate(ComponentPro.Net.SecureShellGssApiCredentials)">
            <summary>
            Authenticates to the server using GSSAPI.
            </summary>
            <param name="credentials">The GSSAPI authentication settings.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="credentials"/> is a null reference (Nothing in VB.NET).</exception>
            <exception cref="T:System.InvalidOperationException">Client is not connected to the server or user is already authenticated.</exception>
            <exception cref="T:ComponentPro.Net.SecureShellException">An error occured while authenticating the user.</exception>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.Attach(ComponentPro.Net.Terminal.IShellConnection)">
            <summary>
            Binds the terminal to the specified shell channel factory (an instance of <see cref="T:ComponentPro.Net.Terminal.SshClient"/> class).
            </summary>
            <param name="connection">Shell channel factory.</param>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.Detach">
            <summary>
            Unbinds the terminal from the current channel and closes the channel.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.ReuseConnection(ComponentPro.Net.SecureShellConnection)">
            <summary>
            Binds the <see cref="T:ComponentPro.Net.Terminal.SshClient"/> object to an underlying SSH session. This can be used instead of <see cref="O:Connect"/> and <see cref="O:Authenticate"/> methods.
            </summary>
            <param name="connection">SSH session (already connected and authenticated).</param>
            <remarks>
            The control is connected, authenticated, and ready to send and receive data after this call.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.ReuseConnection(ComponentPro.Net.ISecureShellClient)">
            <summary>
            
            </summary>
            <param name="sshClient"></param>
            <remarks>
            The control is connected, authenticated, and ready to send and receive data after this call.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.KeepAlive">
            <summary>
            Sends a data packet to the server to keep the connection alive.
            </summary>
            <remarks>
            This is useful with some firewalls or routers that drop inactive connection.
            </remarks>
            <exception cref="T:ComponentPro.Net.SecureShellException">An error occurred while sending a packet to the server to keep the connection alive.</exception>
        </member>
        <member name="M:ComponentPro.Net.Terminal.SshTerminalControl.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Changes the specified user's password on the SSH server and authenticates.
            </summary>
            <param name="userName">The name of the user to change his password.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <returns>Password change result.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName"/>, <paramref name="oldPassword"/>, or <paramref name="newPassword"/> is a null reference.</exception>
            <exception cref="T:System.ObjectDisposedException">The current object is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The client is not connected to the server.</exception>
            <exception cref="T:ComponentPro.Net.SecureShellException">An error occurred while changing the password.</exception>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshTerminalControl.InvokeFromCurrentThreads">
            <summary>
            Gets a value indicating whether to raise events from the current thread or 
            to use a <see cref="T:System.Threading.SynchronizationContext" /> object available when an asynchronous operation was started.
            The default value is <c>false</c>.
            </summary>
            <value><c>true</c> to raise events directly from the current working thread; 
            <c>false</c> to raise them using a <see cref="T:System.Threading.SynchronizationContext" /> object.</value>
            <remarks>
            Synchronous methods always raise events from the current working thread.
            </remarks>
        </member>
        <member name="E:ComponentPro.Net.Terminal.SshTerminalControl.ChangePasswordCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ChangePasswordAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.SshTerminalControl.AuthenticateCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:AuthenticateAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.SshTerminalControl.ConnectCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ConnectAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.SshTerminalControl.DisconnectCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:DisconnectAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.SshTerminalControl.KeepAliveCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:KeepAliveAsync"/> operation completes.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.SshTerminalControl.Banner">
            <summary>
            Occurs when a banner message is received from the server.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.SshTerminalControl.HostKeyVerifying">
            <summary>
            Occurs when a fingerprint is received from the server and needs to be validated.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.SshTerminalControl.KeyboardInteractiveAuthentication">
            <summary>
            Occurs when an authentication request is received from the server that cannot be answered programatically.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.Terminal.SshTerminalControl.PasswordChangeRequest">
            <summary>
            Occurs when user's password need to be changed.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshTerminalControl.TraceSource">
            <summary>
            Gets or sets the source object for all log messages generated by this object. If not set, the property returns the current object.
            </summary>
            <remarks>
            It is handy to set this property to a different object other than this object in some situation where all log messages should come from a single source.
            For example, in a build system, uploading files is just a child task of a main one, by assigning this property to the main task, 
            you can categorize all messages that come from the main task.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshTerminalControl.TraceListenerManager">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Net.Terminal.SshTerminalControl.TraceListenerManager"/> object to which the log messages generated by this object are sent. 
            If not set, the <see cref="F:ComponentPro.Diagnostics.XTrace.Default"/> trace listener manager is used. If this property is set to null, all messages from this object wont be logged.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshTerminalControl.Config">
            <summary>
            Gets the SSH settings.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshTerminalControl.Proxy">
            <summary>
            Gets or sets the <see cref="T:ComponentPro.Net.WebProxyEx">server proxy</see>, if any, used to connect to the remote SSH server.
            </summary>
            <value>The <see cref="T:ComponentPro.Net.WebProxyEx">server proxy</see>, if any, used to connect to the remote SSH server.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshTerminalControl.HostKey">
            <summary>
            Gets the server public key fingerprint.
            </summary>
            <value>Server fingerprint.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshTerminalControl.Timeout">
            <summary>
            Gets or sets the length of time in milliseconds before the operation times out (specify -1 or 0 to indicate that the request does not time out).
            </summary>
            <value>
            The length of time, in milliseconds, until the operation times out,
            or the value -1 or 0 to indicate that the request does not time out.
            Default is 60000 (60 seconds).
            </value>
            <remarks>
            <p>
            The internal timeout counter is reset every time data is sent
            or received from the server. This also means that data transfers only
            time out after x milliseconds of inactivity, not after x milliseconds
            from the start of the transfer.
            </p>
            <p>
            Minimal value is 1000. Setting this to a value lower than 1000 will set it to 1000.
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshTerminalControl.ServerPort">
            <summary>
            Gets the server port of the connected session, or 0 if not connected.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshTerminalControl.UserName">
            <summary>
            Gets the user of the connected session, or null if not connected.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshTerminalControl.ServerName">
            <summary>
            Gets the host name of the connected session, or null if not connected.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshTerminalControl.IsConnected">
            <summary>
            Gets a value indicating whether the session is connected.
            </summary>
            <remarks>
            <p>
            This property returns the latest known state of the session. 
            When it returns false, the session was either never connected, or no longer connected. 
            When it returns true, the session was connected at the time of the last I/O operation.
            </p>
            <p>
            <b>Note:</b> There is no guarantee that the session is still connected even though
            <see cref="P:ComponentPro.Net.Terminal.SshTerminalControl.IsConnected"/> returns true.
            </p>
            </remarks>
            <value>True if connected; false otherwise.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshTerminalControl.IsAuthenticated">
            <summary>
            Gets a value indicating whether the session is authenticated.
            </summary>
            <value>True if authenticated; false otherwise.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshTerminalControl.Connection">
            <summary>
            Gets the SSH session used by this SSH session.
            </summary>
            <value>SSH session.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshTerminalControl.Text">
            <summary>
            Gets or sets the text associated with this control.  
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.SshTerminalControl.ServerId">
            <summary>
            Gets the server Id (welcome message) returned after a successful connection.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.ShellSessionState">
            <summary>
            Defines the shell session state for the <see cref="E:ComponentPro.Net.Terminal.ITerminal.StateChanged"/> event.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ShellSessionState.Disconnected">
            <summary>
            Disconnected.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ShellSessionState.Connected">
            <summary>
            Connected.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ShellSessionState.Sending">
            <summary>
            Sending command or data. This event is available for the <see cref="O:ComponentPro.Net.Terminal.ITerminal.Execute"/> and <see cref="O:ComponentPro.Net.Terminal.ITerminal.Send"/> methods.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.Terminal.ShellSessionState.ProcessingResponse">
            <summary>
            Processing response. This event is available for the <see cref="O:ComponentPro.Net.Terminal.ITerminal.Execute"/> and <see cref="O:ComponentPro.Net.Terminal.ITerminal.Send"/> methods.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.Terminal.ShellSessionStateChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.Terminal.ITerminal.StateChanged"/> event.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ShellSessionStateChangedEventArgs.State">
            <summary>
            Gets the new state.
            </summary>
            <value>The new and current state.</value>
        </member>
        <member name="P:ComponentPro.Net.Terminal.ShellSessionStateChangedEventArgs.OldState">
            <summary>
            Gets the old state.
            </summary>
            <value>The state that was changed.</value>
        </member>
    </members>
</doc>
