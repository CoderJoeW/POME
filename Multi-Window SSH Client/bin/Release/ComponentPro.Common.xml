<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ComponentPro.Common</name>
    </assembly>
    <members>
        <member name="T:ComponentPro.AsyncEventArgs">
            <summary>
            Represents an asynchronous EventArgs that has members to determine whether it's raised by an asynchronous operation and get the user-defined object.
            </summary>
        </member>
        <member name="P:ComponentPro.AsyncEventArgs.AsyncCall">
            <summary>
            Gets a boolean value indicating whether the event is raised in an asynchronous call.
            </summary>
        </member>
        <member name="P:ComponentPro.AsyncEventArgs.UserState">
            <summary>
            Gets the user-token specified in an asynchronous call.
            </summary>
        </member>
        <member name="T:ComponentPro.ExtendedAsyncCompletedEventHandler`1">
            <summary>
            Represents the method that will handle the asynchronous method completion events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1"/> that contains event data.</param>
            <typeparam name="TResult">The type of the result produced by an asynchronous operation.</typeparam>
            <remarks>
            In .NET 4.5 and higher it's recommended to use <c>async</c> and <c>await</c> modifiers for asynchronous operations.
            </remarks>
        </member>
        <member name="T:ComponentPro.ExtendedAsyncCompletedEventArgs`1">
            <summary>
            Provides data for the asynchronous method completion events.
            </summary>
            <typeparam name="TResult">The type of the result produced by an asynchronous operation.</typeparam>
            <remarks>
            In .NET 4.5 and higher it's recommended to use <c>async</c> and <c>await</c> modifiers for asynchronous operations.
            </remarks>
        </member>
        <member name="P:ComponentPro.ExtendedAsyncCompletedEventArgs`1.Result">
            <summary>
            Gets the asynchronous operation result.
            </summary>
        </member>
        <member name="T:ComponentPro.Licensing.Common.UltimateLicenseExceptionStatus">
            <summary>
            License check status.
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="F:ComponentPro.Licensing.Common.UltimateLicenseExceptionStatus.InvalidKey">
            <summary>
            Invalid license key.
            </summary>
        </member>
        <member name="F:ComponentPro.Licensing.Common.UltimateLicenseExceptionStatus.InvalidDate">
            <summary>
            Expiry date is invalid.
            </summary>
        </member>
        <member name="F:ComponentPro.Licensing.Common.UltimateLicenseExceptionStatus.LicenseExpired">
            <summary>
            License is expired.
            </summary>
        </member>
        <member name="F:ComponentPro.Licensing.Common.UltimateLicenseExceptionStatus.InvalidVersion">
            <summary>
            The used license key is for an older version.
            </summary>
        </member>
        <member name="T:ComponentPro.Licensing.Common.UltimateLicenseException">
            <summary>Represents the License Exception.</summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:ComponentPro.Licensing.Common.UltimateLicenseException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Licensing.Common.UltimateLicenseException"></see> class with the specified error message.</summary>
            <param name="message">A <see cref="T:System.String"></see> that describes the error that occurred.</param>
        </member>
        <member name="M:ComponentPro.Licensing.Common.UltimateLicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Licensing.Common.UltimateLicenseException"></see> class from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> classes. </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that contains the information required to serialize the new <see cref="T:ComponentPro.Licensing.Common.UltimateLicenseException"></see>. </param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains the source and destination of the serialized stream associated with the new instance. </param>
        </member>
        <member name="M:ComponentPro.Licensing.Common.UltimateLicenseException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Licensing.Common.UltimateLicenseException"></see> class with the specified error message and inner exception.</summary>
            <param name="message">A <see cref="T:System.String"></see> that describes the error that occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception. </param>
        </member>
        <member name="M:ComponentPro.Licensing.Common.UltimateLicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> instance with the data needed to serialize the <see cref="T:ComponentPro.Licensing.Common.UltimateLicenseException"></see>.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data. </param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that specifies the destination for this serialization.</param>
        </member>
        <member name="P:ComponentPro.Licensing.Common.UltimateLicenseException.Status">
            <summary>Gets the error code.</summary>
            <returns>An <see cref="T:ComponentPro.Licensing.Common.UltimateLicenseExceptionStatus"></see> value that indicates the error that occurred.</returns>
        </member>
        <member name="T:ComponentPro.Licensing.Common.LicenseManager">
            <summary>
            ComponentPro License Manager.
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:ComponentPro.Licensing.Common.LicenseManager.SetLicenseKey(System.String)">
            <summary>
            Sets the license key.
            </summary>
            <param name="licenseKey">The license key string.</param>
        </member>
        <member name="P:ComponentPro.Licensing.Common.LicenseManager.RemainingDays">
            <summary>
            Gets the remaining days untill the expiry date.
            </summary>
            <remarks>
            If the license key is a trial, the software library throws a license exception after that date.
            For production license, this property just shows the remaning days until the subscription expiry date. 
            The software still works after the subscription expiry date.
            </remarks>
        </member>
        <member name="T:ComponentPro.OptionValue">
            <summary>
            Represents the three-state value.
            </summary>
        </member>
        <member name="F:ComponentPro.OptionValue.Auto">
            <summary>
            Auto-detect value.
            </summary>
        </member>
        <member name="F:ComponentPro.OptionValue.Yes">
            <summary>
            Yes value.
            </summary>
        </member>
        <member name="F:ComponentPro.OptionValue.No">
            <summary>
            No value.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.LongPath.LongDirectory">
            <summary>
            Exposes static methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.
            </summary>
            <exclude/>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.GetCurrentDirectory">
            <summary>
            Gets the current working directory of the application.
            </summary>
            <returns>A string containing the path of the current working directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.Delete(System.String)">
            <summary>
            Deletes an empty directory from a specified path.
            </summary>
            <param name="path">The name of the empty directory to remove. This directory must be writable or empty.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.Exists(System.String)">
            <summary>
                Determines whether the given path refers to an existing directory on disk.
            </summary>
            <param name="path">
                A <see cref="T:System.String"/> containing the path to check.
            </param>
            <returns>true if path refers to an existing directory; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.Move(System.String,System.String)">
            <summary>
            Moves a file or a directory and its contents to a new location.
            </summary>
            <param name="sourcePath">The path of the file or directory to move.</param>
            <param name="destinationPath">The path to the new location for sourceDirName. If <paramref name="sourcePath"/> is a file, 
            then <paramref name="destinationPath"/> must also be a file name.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories as specified by path.
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing the path of the directory to create.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of subdirectories in the specified directory.
            </summary>
            <param name="path">The path for which an array of subdirectory names is returned.</param>
            <param name="searchPattern">The search string to match against the names of files in path. 
            The parameter cannot end in two periods ("..") or contain two periods ("..") followed by
            System.IO.Path.DirectorySeparatorChar or System.IO.Path.AltDirectorySeparatorChar, 
            nor can it contain any of the characters in System.IO.Path.InvalidPathChars.</param>
            <param name="searchOption">One of the System.IO.SearchOption values that specifies whether the search 
            operation should include all subdirectories or only the current directory.</param>
            <returns></returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.GetFiles(System.String)">
            <summary>
            Returns the names of files in the specified directory.
            </summary>
            <param name="path">The directory from which to retrieve the files.</param>
            <returns>A String array of file names in the specified directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the creation date and time, in Coordinated Universal Time (UTC) format, for the specified file or directory.
            </summary>
            <param name="path">The file or directory for which to set the creation date and time information.</param>
            <param name="creationTimeUtc">A System.DateTime containing the value to set for the creation date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in Coordinated Universal Time (UTC) format, that a directory was last written to.
            </summary>
            <param name="path">The path of the directory.</param>
            <param name="lastWriteTimeUtc">The date and time the directory was last written to. This value is expressed in UTC time.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.
            </summary>
            <param name="path">The file or directory for which to set the access date and time information.</param>
            <param name="lastAccessTimeUtc">A System.DateTime containing the value to set for the access date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.GetParent(System.String)">
            <summary>
            Retrieves the parent directory of the specified path, including both absolute and relative paths.
            </summary>
            <param name="path">The path for which to retrieve the parent directory.</param>
            <returns>The parent directory, or null if path is the root directory, including the root of a UNC server or share name.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>
            Creates all directories and subdirectories as specified by path.
            </summary>
            <param name="path">The directory path to create.</param>
            <param name="directorySecurity">The access control to apply to the directory.</param>
            <returns></returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.GetAccessControl(System.String)">
            <summary>
            Gets a System.Security.AccessControl.DirectorySecurity object that encapsulates the access control list (ACL) entries for a specified directory.
            </summary>
            <param name="path">The path to a directory containing a System.Security.AccessControl.DirectorySecurity object that describes the file's access control list (ACL) information.</param>
            <returns>A System.Security.AccessControl.DirectorySecurity object that encapsulates the access control rules for the file described by the path parameter.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>
            Gets a System.Security.AccessControl.DirectorySecurity object that encapsulates the access control list (ACL) entries for a specified directory.
            </summary>
            <param name="path">The path to a directory containing a System.Security.AccessControl.DirectorySecurity object that describes the file's access control list (ACL) information.</param>
            <param name="includeSections">One of the System.Security.AccessControl.AccessControlSections values that specifies the type of access control list (ACL) information to receive.</param>
            <returns>A System.Security.AccessControl.DirectorySecurity object that encapsulates the access control rules for the file described by the path parameter.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.GetCreationTime(System.String)">
            <summary>
            Gets the creation date and time of a directory.
            </summary>
            <param name="path">The path of the directory.</param>
            <returns>A System.DateTime structure set to the creation date and time for the specified directory. This value is expressed in local time.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.GetCreationTimeUtc(System.String)">
            <summary>
            Gets the creation date and time, in Coordinated Universal Time (UTC) format, of a directory.
            </summary>
            <param name="path">The path of the directory.</param>
            <returns>A System.DateTime structure set to the creation date and time for the specified directory. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.GetDirectories(System.String)">
            <summary>
            Gets the names of subdirectories in the specified directory.
            </summary>
            <param name="path">The path for which an array of subdirectory names is returned.</param>
            <returns>An array of type String containing the names of subdirectories in path.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.GetDirectories(System.String,System.String)">
            <summary>
            Gets the names of subdirectories in the specified directory.
            </summary>
            <param name="path">The path for which an array of subdirectory names is returned.</param>
            <param name="searchPattern">The search string to match against the names of files in path. 
            The parameter cannot end in two periods ("..") or contain two periods ("..") followed by
            System.IO.Path.DirectorySeparatorChar or System.IO.Path.AltDirectorySeparatorChar,
            nor can it contain any of the characters in System.IO.Path.InvalidPathChars.</param>
            <returns>A String array of directories matching the search pattern.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.GetDirectoryRoot(System.String)">
            <summary>
            Returns the volume information, root information, or both for the specified path.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>A string containing the volume information, root information, or both for the specified path.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.GetFiles(System.String,System.String)">
            <summary>
            Returns the names of files in the specified directory that match the specified search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of files in path. 
            The parameter cannot end in two periods ("..") or contain two periods ("..") followed by
            System.IO.Path.DirectorySeparatorChar or System.IO.Path.AltDirectorySeparatorChar,
            nor can it contain any of the characters in System.IO.Path.InvalidPathChars.</param>
            <returns>A String array containing the names of files in the specified directory that
            match the specified search pattern. File names include the full path.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns the names of files in the specified directory that match the specified
            search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of files in path. 
            The parameter cannot end in two periods ("..") or contain two periods ("..") followed by
            System.IO.Path.DirectorySeparatorChar or System.IO.Path.AltDirectorySeparatorChar,
            nor can it contain any of the characters in System.IO.Path.InvalidPathChars.</param>
            <param name="options">One of the System.IO.SearchOption values that specifies whether the search operation should include all subdirectories or only the current directory.</param>
            <returns>A String array containing the names of files in the specified directory that
            match the specified search pattern. File names include the full path.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.GetFileSystemEntries(System.String)">
            <summary>
            Returns the names of all files and subdirectories in the specified directory.
            </summary>
            <param name="path">The directory for which file and subdirectory names are returned.</param>
            <returns>A String array containing the names of file system entries in the specified directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.GetFileSystemEntries(System.String,System.String)">
            <summary>
            Returns the names of all files and subdirectories in the specified directory.
            </summary>
            <param name="path">The directory for which file and subdirectory names are returned.</param>
            <param name="searchPattern">The search string to match against the names of files in path. The searchPattern parameter cannot end in two periods ("..") or contain two periods ("..")
            followed by System.IO.Path.DirectorySeparatorChar or System.IO.Path.AltDirectorySeparatorChar,
            nor can it contain any of the characters in System.IO.Path.InvalidPathChars.</param>
            <returns>A String array containing the names of file system entries in the specified directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns the names of all files and subdirectories in the specified directory.
            </summary>
            <param name="path">The directory for which file and subdirectory names are returned.</param>
            <param name="searchPattern">The search string to match against the names of files in path. The searchPattern parameter cannot end in two periods ("..") or contain two periods ("..")
            followed by System.IO.Path.DirectorySeparatorChar or System.IO.Path.AltDirectorySeparatorChar,
            nor can it contain any of the characters in System.IO.Path.InvalidPathChars.</param>
            <param name="options">The search options.</param>
            <returns>A String array containing the names of file system entries in the specified directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.GetLastAccessTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A System.DateTime structure set to the date and time the specified file or directory was last accessed. This value is expressed in local time.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.GetLastAccessTimeUtc(System.String)">
            <summary>
            Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.
            </summary>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A System.DateTime structure set to the date and time the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.GetLastWriteTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain modification date and time information.</param>
            <returns>A System.DateTime structure set to the date and time the specified file or directory was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain modification date and time information.</param>
            <returns>A System.DateTime structure set to the date and time the specified file or directory was last written to. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.GetLogicalDrives">
            <summary>
            Retrieves the names of the logical drives on this computer in the form "&lt;drive letter&gt;:\".
            </summary>
            <returns> The logical drives on this computer.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>
            Applies access control list (ACL) entries described by a System.Security.AccessControl.DirectorySecurity object to the specified directory.
            </summary>
            <param name="path">A directory to add or remove access control list (ACL) entries from.</param>
            <param name="directorySecurity">A System.Security.AccessControl.DirectorySecurity object that describes an ACL entry to apply to the directory described by the path parameter.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Sets the creation date and time for the specified file or directory.
            </summary>
            <param name="path">The file or directory for which to set the creation date and time information.</param>
            <param name="creationTime">A System.DateTime containing the value to set for the creation date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time the specified file or directory was last accessed.
            </summary>
            <param name="path">The file or directory for which to set the access date and time information.</param>
            <param name="lastAccessTime">A System.DateTime containing the value to set for the access date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time a directory was last written to.
            </summary>
            <param name="path">The path of the directory.</param>
            <param name="lastWriteTime">The date and time the directory was last written to. This value is expressed in local time.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectory.SetCurrentDirectory(System.String)">
            <summary>
            Sets the application's current working directory to the specified directory.
            </summary>
            <param name="path">The path to which the current working directory is set.</param>
        </member>
        <member name="T:ComponentPro.IO.LongPath.LongDirectoryInfo">
            <summary>
            Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.
            </summary>
            <exclude/>
        </member>
        <member name="T:ComponentPro.IO.LongPath.LongFileSystemInfo">
            <summary>
            Provides the base class for both FileInfo and DirectoryInfo objects.
            </summary>
            <exclude/>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFileSystemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFileSystemInfo.Refresh">
            <summary>
            Refreshes the state of the object.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFileSystemInfo.Delete">
            <summary>
            Deletes a file or directory.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.LongPath.LongFileSystemInfo.Attributes">
            <summary>
            Gets or sets the attributes for the current file or directory.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.LongPath.LongFileSystemInfo.CreationTime">
            <summary>
            Gets or sets the creation time of the current file or directory.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.LongPath.LongFileSystemInfo.CreationTimeUtc">
            <summary>
            Gets or sets the creation time, in coordinated universal time (UTC), of the current file or directory.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.LongPath.LongFileSystemInfo.LastWriteTime">
            <summary>
            Gets or sets the time when the current file or directory was last written to.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.LongPath.LongFileSystemInfo.LastWriteTimeUtc">
            <summary>
            Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.LongPath.LongFileSystemInfo.LastAccessTime">
            <summary>
            Gets or sets the time the current file or directory was last accessed.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.LongPath.LongFileSystemInfo.LastAccessTimeUtc">
            <summary>
            Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.LongPath.LongFileSystemInfo.FullName">
            <summary>
            Gets the full path of the directory or file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.LongPath.LongFileSystemInfo.Extension">
            <summary>
            Gets the file extension.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.LongPath.LongFileSystemInfo.Name">
            <summary>
            Gets the file name.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.LongPath.LongFileSystemInfo.Exists">
            <summary>
            Gets a value indicating whether the file or directory exists.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectoryInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the System.IO.DirectoryInfo class on the specified path.
            </summary>
            <param name="path">A string specifying the path on which to create the DirectoryInfo.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectoryInfo.Create">
            <summary>
            Creates a directory.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectoryInfo.CreateSubdirectory(System.String)">
            <summary>
            Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the DirectoryInfo class.
            </summary>
            <param name="path">The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.</param>
            <returns>The last directory specified in path.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectoryInfo.Delete">
            <summary>
            Deletes this DirectoryInfo if it is empty.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectoryInfo.MoveTo(System.String)">
            <summary>
            Moves a directory and its contents to a new path.
            </summary>
            <param name="destDirName">The name and path to which to move this directory. 
            The destination cannot be another disk volume or a directory with the identical name. It can be
            an existing directory to which you want to add this directory as a subdirectory.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)">
            <summary>
            Creates a directory.
            </summary>
            <param name="directorySecurity">The access control to apply to the directory.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>
            Creates a subdirectory or subdirectories on the specified path. The specified
            path can be relative to this instance of the System.IO.DirectoryInfo class.
            </summary>
            <param name="path">The specified path. This cannot be a different disk volume or Universal Naming//     
            Convention (UNC) name.</param>
            <param name="directorySecurity">The security to apply.</param>
            <returns>The last directory specified in path.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectoryInfo.GetAccessControl">
            <summary>
            Gets a System.Security.AccessControl.DirectorySecurity object that encapsulates 
            the access control list (ACL) entries for the directory described by the
            current System.IO.DirectoryInfo object.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <summary>
            Gets a System.Security.AccessControl.DirectorySecurity object that encapsulates 
            the access control list (ACL) entries for the directory described by the
            current System.IO.DirectoryInfo object.
            </summary>
            <param name="includeSections">One of the System.Security.AccessControl.AccessControlSections values that 
            specifies the type of access control list (ACL) information to receive.</param>
            <returns>A System.Security.AccessControl.DirectorySecurity object that encapsulates 
            the access control rules for the directory.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectoryInfo.GetDirectories">
            <summary>
            Returns the subdirectories of the current directory.
            </summary>
            <returns>An array of type DirectoryInfo matching searchPattern.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectoryInfo.GetDirectories(System.String)">
            <summary>
            Returns the subdirectories of the current directory.
            </summary>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories 
            beginning with the word "System".</param>
            <returns>An array of type DirectoryInfo matching searchPattern.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)">
            <summary>
            Returns the subdirectories of the current directory.
            </summary>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories 
            beginning with the word "System".</param>
            <param name="searchOption">One of the values of the System.IO.SearchOption enumeration that specifies
            whether the search operation should include only the current directory or
            should include all subdirectories.</param>
            <returns>An array of type DirectoryInfo matching searchPattern.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectoryInfo.GetFiles">
            <summary>
            Returns a file list from the current directory.
            </summary>
            <returns>An array of type System.IO.FileInfo.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectoryInfo.GetFiles(System.String)">
            <summary>
            Returns a file list from the current directory.
            </summary>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System".</param>
            <returns>An array of type System.IO.FileInfo.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectoryInfo.GetFiles(System.String,System.IO.SearchOption)">
            <summary>
            Returns a file list from the current directory.
            </summary>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System".</param>
            <param name="searchOption">One of the values of the System.IO.SearchOption enumeration that specifies 
            whether the search operation should include only the current directory or//     
            should include all subdirectories.</param>
            <returns>An array of type System.IO.FileInfo.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectoryInfo.GetFileSystemInfos">
            <summary>
            Returns an array of strongly typed FileSystemInfo entries representing all the files and subdirectories in a directory.
            </summary>
            <returns>An array of strongly typed FileSystemInfo objects matching the search criteria.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectoryInfo.GetFileSystemInfos(System.String)">
            <summary>
            Returns an array of strongly typed FileSystemInfo entries representing all the files and subdirectories in a directory.
            </summary>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System".</param>
            <returns>An array of strongly typed FileSystemInfo objects matching the search criteria.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)">
            <summary>
            Returns an array of strongly typed FileSystemInfo entries representing all the files and subdirectories in a directory.
            </summary>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System".</param>
            <param name="searchOption">The search option.</param>
            <returns>An array of strongly typed FileSystemInfo objects matching the search criteria.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)">
            <summary>
            Applies access control list (ACL) entries described by a System.Security.AccessControl.DirectorySecurity object to the directory described by the current System.IO.
            DirectoryInfo object.
            </summary>
            <param name="directorySecurity">A System.Security.AccessControl.DirectorySecurity object that describes an 
            ACL entry to apply to the directory described by the path parameter.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongDirectoryInfo.ToString">
            <summary>
            Returns the display path.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComponentPro.IO.LongPath.LongDirectoryInfo.Exists">
            <summary>
            Gets a value indicating whether the directory exists.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.LongPath.LongDirectoryInfo.Name">
            <summary>
            Gets the name of this instance.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.LongPath.LongDirectoryInfo.Parent">
            <summary>
            Gets the parent directory of a specified subdirectory.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.LongPath.LongDirectoryInfo.Root">
            <summary>
            Gets the root portion of a path.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.LongPath.LongFile">
            <summary>
            Provides static methods for the creation, copying, deletion, moving, and
            opening of files, and aids in the creation of System.IO.FileStream objects.
            </summary>
            <exclude/>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.OpenText(System.String)">
            <summary>
            Opens an existing UTF-8 encoded text file for reading.
            </summary>
            <param name="path">The file to be opened for reading.</param>
            <returns>A System.IO.StreamReader on the specified path.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.CreateText(System.String)">
            <summary>
            Creates or opens a file for writing UTF-8 encoded text.
            </summary>
            <param name="path">The file to be opened for writing.</param>
            <returns>A System.IO.StreamWriter that writes to the specified file using UTF-8 encoding.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.AppendText(System.String)">
            <summary>
            Creates a System.IO.StreamWriter that appends UTF-8 encoded text to an existing file.
            </summary>
            <param name="path">The path to the file to append to.</param>
            <returns>A StreamWriter that appends UTF-8 encoded text to an existing file.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.Copy(System.String,System.String)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is not allowed.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.Copy(System.String,System.String,System.Boolean)">
            <summary>
                Copies the specified file to a specified new file, indicating whether to overwrite an existing file.
            </summary>
            <param name="sourcePath">
                A <see cref="T:System.String"/> containing the path of the file to copy.
            </param>
            <param name="destinationPath">
                A <see cref="T:System.String"/> containing the new path of the file.
            </param>
            <param name="overwrite">
                <c>true</c> if <paramref name="destinationPath"/> should be overwritten
                if it refers to an existing file, otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="sourcePath"/> and/or <paramref name="destinationPath"/> is
                <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="sourcePath"/> and/or <paramref name="destinationPath"/> is
                an empty string (""), contains only white space, or contains one or more
                invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
                <para>
                    -or-
                </para>
                <paramref name="sourcePath"/> and/or <paramref name="destinationPath"/>
                contains one or more components that exceed the drive-defined maximum length.
                For example, on Windows-based platforms, components must not exceed 255 characters.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
                <paramref name="sourcePath"/> and/or <paramref name="destinationPath"/>
                exceeds the system-defined maximum length. For example, on Windows-based platforms,
                paths must not exceed 32,000 characters.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
                <paramref name="sourcePath"/> could not be found.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
                One or more directories in <paramref name="sourcePath"/> and/or
                <paramref name="destinationPath"/> could not be found.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
                The caller does not have the required access permissions.
                <para>
                    -or-
                </para>
                <paramref name="overwrite"/> is true and <paramref name="destinationPath"/> refers to a
                file that is read-only.
            </exception>
            <exception cref="T:System.IO.IOException">
                <paramref name="overwrite"/> is false and <paramref name="destinationPath"/> refers to
                a file that already exists.
                <para>
                    -or-
                </para>
                <paramref name="sourcePath"/> and/or <paramref name="destinationPath"/> is a
                directory.
                <para>
                    -or-
                </para>
                <paramref name="overwrite"/> is true and <paramref name="destinationPath"/> refers to
                a file that already exists and is in use.
                <para>
                    -or-
                </para>
                <paramref name="sourcePath"/> refers to a file that is in use.
                <para>
                    -or-
                </para>
                <paramref name="sourcePath"/> and/or <paramref name="destinationPath"/> specifies
                a device that is not ready.
            </exception>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.Create(System.String)">
            <summary>
            Creates a new file.
            </summary>
            <param name="path">The file path.</param>
            <returns>The file stream.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.Create(System.String,System.Int32)">
            <summary>
            Creates a new file.
            </summary>
            <param name="path">The file path.</param>
            <param name="bufferSize">The buffer size.</param>
            <returns>The file stream.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.Create(System.String,System.Int32,System.IO.FileOptions)">
            <summary>
            Creates a new file.
            </summary>
            <param name="path">The file path.</param>
            <param name="bufferSize">The buffer size.</param>
            <param name="options">The options.</param>
            <returns>The file stream.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.Create(System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
            <summary>
            Creates a new file.
            </summary>
            <param name="path">The file path.</param>
            <param name="bufferSize">The buffer size.</param>
            <param name="options">The options.</param>
            <param name="fileSecurity">The security setting.</param>
            <returns>The file stream.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.Delete(System.String)">
            <summary>
                Deletes the specified file.
            </summary>
            <param name="path">
                 A <see cref="T:System.String"/> containing the path of the file to delete.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="path"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="path"/> is an empty string (""), contains only white
                space, or contains one or more invalid characters as defined in
                <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
                <para>
                    -or-
                </para>
                <paramref name="path"/> contains one or more components that exceed
                the drive-defined maximum length. For example, on Windows-based
                platforms, components must not exceed 255 characters.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
                <paramref name="path"/> exceeds the system-defined maximum length.
                For example, on Windows-based platforms, paths must not exceed
                32,000 characters.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
                <paramref name="path"/> could not be found.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
                One or more directories in <paramref name="path"/> could not be found.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
                The caller does not have the required access permissions.
                <para>
                    -or-
                </para>
                <paramref name="path"/> refers to a file that is read-only.
                <para>
                    -or-
                </para>
                <paramref name="path"/> is a directory.
            </exception>
            <exception cref="T:System.IO.IOException">
                <paramref name="path"/> refers to a file that is in use.
                <para>
                    -or-
                </para>
                <paramref name="path"/> specifies a device that is not ready.
            </exception>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.Decrypt(System.String)">
            <summary>
            Decrypts a file.
            </summary>
            <param name="path">The file to decrypt.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.Encrypt(System.String)">
            <summary>
            Encrypts a file.
            </summary>
            <param name="path">The file to encrypt.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.Exists(System.String)">
            <summary>
                Returns a value indicating whether the specified path refers to an existing file.
            </summary>
            <param name="path">
                A <see cref="T:System.String"/> containing the path to check.
            </param>
            <returns>
                <c>true</c> if <paramref name="path"/> refers to an existing file;
                otherwise, <c>false</c>.
            </returns>
            <remarks>
                Note that this method will return false if any error occurs while trying to determine
                if the specified file exists. This includes situations that would normally result in
                thrown exceptions including (but not limited to); passing in a file name with invalid
                or too many characters, an I/O error such as a failing or missing disk, or if the caller
                does not have Windows or Code Access Security (CAS) permissions to to read the file.
            </remarks>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.Open(System.String,System.IO.FileMode)">
            <summary>
            Opens a file.
            </summary>
            <param name="path">The file path to open</param>
            <param name="mode">The open mode</param>
            <returns>The file stream.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
                Opens the specified file.
            </summary>
            <param name="path">
                A <see cref="T:System.String"/> containing the path of the file to open.
            </param>
            <param name="access">
                One of the <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be
                performed on the file.
            </param>
            <param name="mode">
                One of the <see cref="T:System.IO.FileMode"/> values that specifies whether a file is created
                if one does not exist, and determines whether the contents of existing files are
                retained or overwritten.
            </param>
            <returns>
                A <see cref="T:System.IO.FileStream"/> that provides access to the file specified in
                <paramref name="path"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="path"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="path"/> is an empty string (""), contains only white
                space, or contains one or more invalid characters as defined in
                <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
                <para>
                    -or-
                </para>
                <paramref name="path"/> contains one or more components that exceed
                the drive-defined maximum length. For example, on Windows-based
                platforms, components must not exceed 255 characters.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
                <paramref name="path"/> exceeds the system-defined maximum length.
                For example, on Windows-based platforms, paths must not exceed
                32,000 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
                One or more directories in <paramref name="path"/> could not be found.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
                The caller does not have the required access permissions.
                <para>
                    -or-
                </para>
                <paramref name="path"/> refers to a file that is read-only and <paramref name="access"/>
                is not <see cref="F:System.IO.FileAccess.Read"/>.
                <para>
                    -or-
                </para>
                <paramref name="path"/> is a directory.
            </exception>
            <exception cref="T:System.IO.IOException">
                <paramref name="path"/> refers to a file that is in use.
                <para>
                    -or-
                </para>
                <paramref name="path"/> specifies a device that is not ready.
            </exception>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
                Opens the specified file.
            </summary>
            <param name="path">
                A <see cref="T:System.String"/> containing the path of the file to open.
            </param>
            <param name="access">
                One of the <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be
                performed on the file.
            </param>
            <param name="mode">
                One of the <see cref="T:System.IO.FileMode"/> values that specifies whether a file is created
                if one does not exist, and determines whether the contents of existing files are
                retained or overwritten.
            </param>
            <param name="share">
                One of the <see cref="T:System.IO.FileShare"/> values specifying the type of access other threads
                have to the file.
            </param>
            <returns>
                A <see cref="T:System.IO.FileStream"/> that provides access to the file specified in
                <paramref name="path"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="path"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="path"/> is an empty string (""), contains only white
                space, or contains one or more invalid characters as defined in
                <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
                <para>
                    -or-
                </para>
                <paramref name="path"/> contains one or more components that exceed
                the drive-defined maximum length. For example, on Windows-based
                platforms, components must not exceed 255 characters.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
                <paramref name="path"/> exceeds the system-defined maximum length.
                For example, on Windows-based platforms, paths must not exceed
                32,000 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
                One or more directories in <paramref name="path"/> could not be found.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
                The caller does not have the required access permissions.
                <para>
                    -or-
                </para>
                <paramref name="path"/> refers to a file that is read-only and <paramref name="access"/>
                is not <see cref="F:System.IO.FileAccess.Read"/>.
                <para>
                    -or-
                </para>
                <paramref name="path"/> is a directory.
            </exception>
            <exception cref="T:System.IO.IOException">
                <paramref name="path"/> refers to a file that is in use.
                <para>
                    -or-
                </para>
                <paramref name="path"/> specifies a device that is not ready.
            </exception>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time the file was created.
            </summary>
            <param name="path">The file path.</param>
            <param name="creationTime">The creation time.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was created.
            </summary>
            <param name="path">The file path.</param>
            <param name="creationTimeUtc">The creation time in UTC.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.GetCreationTime(System.String)">
            <summary>
            Gets the date and time that the file was created.
            </summary>
            <param name="path">The file path.</param>
            <returns>The creation time.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.GetCreationTimeUtc(System.String)">
            <summary>
            Gets the date and time, in coordinated universal time (UTC), that the file was created.
            </summary>
            <param name="path">The file path.</param>
            <returns>The UTC time.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time that the file was written.
            </summary>
            <param name="path">The file path.</param>
            <param name="lastWriteTime">The last written time.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was written.
            </summary>
            <param name="path">The file path.</param>
            <param name="lastWriteTimeUtc">The last written time, in UTC.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.GetLastWriteTime(System.String)">
            <summary>
            Gets the date and time, in coordinated universal time (UTC), that the file was written.
            </summary>
            <param name="path">The file path.</param>
            <returns>The UTC time.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.GetLastWriteTimeUtc(System.String)">
            <summary>
            Gets the date and time, in coordinated universal time (UTC), that the file was written.
            </summary>
            <param name="path">The file path.</param>
            <returns>The UTC time.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was accessed.
            </summary>
            <param name="path">The file path.</param>
            <param name="lastAccessTime">The last access time.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was accessed.
            </summary>
            <param name="path">The file path.</param>
            <param name="lastAccessTimeUtc">The last access time in UTC</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.GetLastAccessTime(System.String)">
            <summary>
            Gets last access time of the file.
            </summary>
            <param name="path">The file path.</param>
            <returns>Last access time.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.GetLastAccessTimeUtc(System.String)">
            <summary>
            Gets last access UTC time of the file.
            </summary>
            <param name="path">The file path.</param>
            <returns>Last access UTC time.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.GetAttributes(System.String)">
            <summary>
            Gets file attributes.
            </summary>
            <param name="path">The file path.</param>
            <returns>The file attributes.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets file attributes.
            </summary>
            <param name="path">The file path.</param>
            <param name="fileAttributes">The file attributes.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.OpenRead(System.String)">
            <summary>
            Opens a file for reading.
            </summary>
            <param name="path">The file path.</param>
            <returns>The file stream.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.OpenWrite(System.String)">
            <summary>
            Opens a file for writing.
            </summary>
            <param name="path">The file path.</param>
            <returns>The file stream.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.ReadAllText(System.String)">
            <summary>
            Reads all text from a file.
            </summary>
            <param name="path">The file path.</param>
            <returns>The file content.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Reads all text from a file.
            </summary>
            <param name="path">The file path.</param>
            <param name="encoding">The encoding.</param>
            <returns>The file content.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.WriteAllText(System.String,System.String)">
            <summary>
            Writes all text to a file.
            </summary>
            <param name="path">The file path.</param>
            <param name="contents">The data to write.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Writes all text to a file.
            </summary>
            <param name="path">The file path.</param>
            <param name="contents">The data to write.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.ReadAllBytes(System.String)">
            <summary>
            Reads all bytes from a file.
            </summary>
            <param name="path">The file path.</param>
            <return>The read data.</return>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Writes all bytes to a file.
            </summary>
            <param name="path">The file path.</param>
            <param name="bytes">The data to write.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.Move(System.String,System.String)">
            <summary>
                Moves the specified file to a new location.
            </summary>
            <param name="sourcePath">
                A <see cref="T:System.String"/> containing the path of the file to move.
            </param>
            <param name="destinationPath">
                A <see cref="T:System.String"/> containing the new path of the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="sourcePath"/> and/or <paramref name="destinationPath"/> is
                <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="sourcePath"/> and/or <paramref name="destinationPath"/> is
                an empty string (""), contains only white space, or contains one or more
                invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
                <para>
                    -or-
                </para>
                <paramref name="sourcePath"/> and/or <paramref name="destinationPath"/>
                contains one or more components that exceed the drive-defined maximum length.
                For example, on Windows-based platforms, components must not exceed 255 characters.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
                <paramref name="sourcePath"/> and/or <paramref name="destinationPath"/>
                exceeds the system-defined maximum length. For example, on Windows-based platforms,
                paths must not exceed 32,000 characters.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
                <paramref name="sourcePath"/> could not be found.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
                One or more directories in <paramref name="sourcePath"/> and/or
                <paramref name="destinationPath"/> could not be found.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
                The caller does not have the required access permissions.
            </exception>
            <exception cref="T:System.IO.IOException">
                <paramref name="destinationPath"/> refers to a file that already exists.
                <para>
                    -or-
                </para>
                <paramref name="sourcePath"/> and/or <paramref name="destinationPath"/> is a
                directory.
                <para>
                    -or-
                </para>
                <paramref name="sourcePath"/> refers to a file that is in use.
                <para>
                    -or-
                </para>
                <paramref name="sourcePath"/> and/or <paramref name="destinationPath"/> specifies
                a device that is not ready.
            </exception>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.Replace(System.String,System.String,System.String)">
            <summary>
            Replaces a file.
            </summary>
            <param name="sourceFileName">The source file.</param>
            <param name="destinationFileName">The file to replace.</param>
            <param name="destinationBackupFileName">The backup file.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.Replace(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Replaces a file.
            </summary>
            <param name="sourceFileName">The source file.</param>
            <param name="destinationFileName">The file to replace.</param>
            <param name="destinationBackupFileName">The backup file.</param>
            <param name="ignoreMetadataErrors">Ignore errors.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)">
            <summary>
            Applies access control list (ACL) entries described by a System.Security.AccessControl.FileSecurity object to the specified file.
            </summary>
            <param name="path">The file path.</param>
            <param name="fileSecurity">The file security.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.GetAccessControl(System.String)">
            <summary>
            Gets access control of a file.
            </summary>
            <param name="path">The file path.</param>
            <returns>A FileSecurity.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFile.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>
            Gets access control of a file.
            </summary>
            <param name="path">The file path.</param>
            <param name="includeSections">Include sections.</param>
            <returns>A FileSecurity.</returns>
        </member>
        <member name="T:ComponentPro.IO.LongPath.LongFileInfo">
            <summary>
            Provides instance methods for the creation, copying, deletion, moving, and
            opening of files, and aids in the creation of System.IO.FileStream objects.
            This class cannot be inherited.
            </summary>
            <exclude/>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFileInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FileInfo class, which acts as a wrapper for a file path.
            </summary>
            <param name="fileName">The fully qualified name of the new file, or the relative file name.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFileInfo.AppendText">
            <summary>
            Creates a StreamWriter that appends text to the file represented by this instance of the FileInfo.
            </summary>
            <returns>A new StreamWriter.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFileInfo.CopyTo(System.String)">
            <summary>
            Copies an existing file to a new file, disallowing the overwriting of an existing file.
            </summary>
            <param name="destFileName">The name of the new file to copy to.</param>
            <returns>A new file with a full path.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFileInfo.CopyTo(System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, allowing the overwriting of an existing file.
            </summary>
            <param name="destFileName">The name of the new file to copy to.</param>
            <param name="overwrite">true to allow an existing file to be overwritten; otherwise, false.</param>
            <returns>A new file with a full path.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFileInfo.Create">
            <summary>
            Creates a file.
            </summary>
            <returns>A new file.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFileInfo.CreateText">
            <summary>
            Creates a System.IO.StreamWriter that writes a new text file.
            </summary>
            <returns>A new StreamWriter.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFileInfo.Delete">
            <summary>
            Permanently deletes a file.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFileInfo.MoveTo(System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="destFileName">The path to move the file to, which can specify a different file name.</param>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFileInfo.Open(System.IO.FileMode)">
            <summary>
            Opens a file in the specified mode.
            </summary>
            <param name="mode">A System.IO.FileMode constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <returns>A System.IO.FileStream object opened with the specified mode.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access.
            </summary>
            <param name="mode">A System.IO.FileMode constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <param name="access">A System.IO.FileAccess constant specifying whether to open the file with Read, Write, or ReadWrite file access.</param>
            <returns>A System.IO.FileStream object opened with the specified mode, and access options.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.
            </summary>
            <param name="mode">A System.IO.FileMode constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <param name="access">A System.IO.FileAccess constant specifying whether to open the file with Read, Write, or ReadWrite file access.</param>
            <param name="share">A System.IO.FileShare constant specifying the type of access other FileStream objects have to this file.</param>
            <returns>A System.IO.FileStream object opened with the specified mode, access, and sharing options.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFileInfo.OpenRead">
            <summary>
            Creates a read-only System.IO.FileStream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFileInfo.OpenText">
            <summary>
            Creates a System.IO.StreamReader with UTF8 encoding that reads from an existing text file.
            </summary>
            <returns>A new StreamReader with UTF8 encoding.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFileInfo.OpenWrite">
            <summary>
            Creates a write-only System.IO.FileStream.
            </summary>
            <returns>A new write-only unshared System.IO.FileStream object.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFileInfo.ToString">
            <summary>
            Returns the display path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFileInfo.Encrypt">
            <summary>
            Encrypts a file so that only the account used to encrypt the file can decrypt it.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFileInfo.Decrypt">
            <summary>
            Decrypts a file that was encrypted by the current account using the Encrypt method.
            </summary>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFileInfo.Replace(System.String,System.String)">
            <summary>
            Replaces the contents of a specified file with the file described by the current FileInfo object, 
            deleting the original file, and creating a backup of the replaced file.
            </summary>
            <param name="destinationFilename">The name of a file to replace with the current file.</param>
            <param name="backupFilename">The name of a file with which to create a backup of the file described by the destFileName parameter.</param>
            <returns>A FileInfo object that encapsulates information about the file described by the destFileName parameter.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFileInfo.Replace(System.String,System.String,System.Boolean)">
            <summary>
            Replaces the contents of a specified file with the file described by the current FileInfo object, 
            deleting the original file, and creating a backup of the replaced file.
            </summary>
            <param name="destinationFilename">The name of a file to replace with the current file.</param>
            <param name="backupFilename">The name of a file with which to create a backup of the file described by the destFileName parameter.</param>
            <param name="ignoreMetadataErrors"> true to ignore merge errors (such as attributes and ACLs) from the replaced file to the replacement file; otherwise, false.</param>
            <returns>A FileInfo object that encapsulates information about the file described by the destFileName parameter.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFileInfo.GetAccessControl">
            <summary>
            Gets a System.Security.AccessControl.FileSecurity object that encapsulates the access control list (ACL) entries for the file described by the current
            FileInfo object.
            </summary>
            <returns>A System.Security.AccessControl.FileSecurity object that encapsulates the access control rules for the current file.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFileInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <summary>
            Gets a System.Security.AccessControl.FileSecurity object that encapsulates the access control list (ACL) entries for the file described by the current
            FileInfo object.
            </summary>
            <param name="includeSections">One of the System.Security.AccessControl.AccessControlSections values that specifies which group of access control entries to retrieve.</param>
            <returns>A System.Security.AccessControl.FileSecurity object that encapsulates the access control rules for the current file.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongFileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity)">
            <summary>
            Applies access control list (ACL) entries described by a System.Security.AccessControl.FileSecurity 
            object to the file described by the current FileInfo object.
            </summary>
            <param name="security">A System.Security.AccessControl.FileSecurity object that describes an access control list (ACL) entry to apply to the current file.</param>
        </member>
        <member name="P:ComponentPro.IO.LongPath.LongFileInfo.Directory">
            <summary>
            Gets an instance of the parent directory.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.LongPath.LongFileInfo.DirectoryName">
            <summary>
            Gets a string representing the directory's full path.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.LongPath.LongFileInfo.Exists">
            <summary>
            Gets a value indicating whether a file exists.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.LongPath.LongFileInfo.Length">
            <summary>
            Gets the size, in bytes, of the current file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.LongPath.LongFileInfo.Name">
            <summary>
            Gets the name of the file.
            </summary>
        </member>
        <member name="P:ComponentPro.IO.LongPath.LongFileInfo.IsReadOnly">
            <summary>
            Gets or sets a value that determines if the current file is read only.
            </summary>
        </member>
        <member name="T:ComponentPro.IO.LongPath.LongPath">
            <summary>
            Performs operations on System.String instances that contain file or directory
            path information. These operations are performed in a cross-platform manner.
            </summary>
            <exclude/>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongPath.Combine(System.String,System.String)">
            <summary>
            Combines two path strings.
            </summary>
            <param name="path1">The first path.</param>
            <param name="path2">The second path.</param>
            <returns>A string containing the combined paths. If one of the specified paths is
            a zero-length string, this method returns the other path. If path2 contains
            an absolute path, this method returns path2.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongPath.IsPathRooted(System.String)">
            <summary>
            Gets a value indicating whether the specified path string contains absolute 
            or relative path information.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if path contains an absolute path; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongPath.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string.
            </summary>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <returns>The file name.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongPath.GetFullPath(System.String)">
            <summary>
            Returns the absolute path for the specified path string.
            </summary>
            <param name="path">The file or directory for which to obtain absolute path information.</param>
            <returns>The full path.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongPath.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>A System.String containing directory information for path, or null if path
            denotes a root directory, is the empty string (""), or is null. Returns System.String.Empty
            if path does not contain directory information.</returns>
        </member>
        <member name="M:ComponentPro.IO.LongPath.LongPath.GetPathRoot(System.String)">
            <summary>
            Gets the root directory information of the specified path.
            </summary>
            <param name="path">The path from which to obtain root directory information.</param>
            <returns>A string containing the root directory of path, such as "C:\", or null if
            path is null, or an empty string if path does not contain root directory information.</returns>
        </member>
        <member name="P:ComponentPro.IO.LongPath.LongPath.NativeCalled">
            <summary>
            Native called.
            </summary>
        </member>
        <member name="T:ComponentPro.Diagnostics.TraceEventType">
            <summary>
            Identifies the type of event that has caused the trace.
            </summary>
        </member>
        <member name="F:ComponentPro.Diagnostics.TraceEventType.None">
            <summary>
            No log entries.
            </summary>
        </member>
        <member name="F:ComponentPro.Diagnostics.TraceEventType.Critical">
            <summary>
            Fatal error or application crash.
            </summary>
        </member>
        <member name="F:ComponentPro.Diagnostics.TraceEventType.Error">
            <summary>
            Recoverable error.
            </summary>
        </member>
        <member name="F:ComponentPro.Diagnostics.TraceEventType.Warning">
            <summary>
            Noncritical problem.
            </summary>
        </member>
        <member name="F:ComponentPro.Diagnostics.TraceEventType.Information">
            <summary>
            Informational message.
            </summary>
        </member>
        <member name="F:ComponentPro.Diagnostics.TraceEventType.Debug">
            <summary>
            Debugging trace - all messages useful for debugging purposes.
            </summary>
        </member>
        <member name="F:ComponentPro.Diagnostics.TraceEventType.Verbose">
            <summary>
            Debugging trace and data transfer - log everything.
            </summary>
        </member>
        <member name="T:ComponentPro.Diagnostics.ITraceSource">
            <summary>
            Defines a generalized trace source.
            </summary>
        </member>
        <member name="P:ComponentPro.Diagnostics.ITraceSource.TraceSource">
            <summary>
            Gets or sets the source object for all log messages generated by this object. If not set, the property returns the current object.
            </summary>
            <remarks>
            It is handy to set this property to a different object other than this object in some situation where all log messages should come from a single source.
            For example, in a build system, uploading files is just a child task of a main one, by assigning this property to the main task, 
            you can categorize all messages that come from the main task.
            </remarks>
        </member>
        <member name="P:ComponentPro.Diagnostics.ITraceSource.TraceListenerManager">
            <summary>
            Gets or sets the <see cref="P:ComponentPro.Diagnostics.ITraceSource.TraceListenerManager"/> object to which the log messages generated by this object are sent. 
            If not set, the <see cref="F:ComponentPro.Diagnostics.XTrace.Default"/> trace listener manager is used. If this property is set to null, all messages from this object wont be logged.
            </summary>
        </member>
        <member name="T:ComponentPro.Diagnostics.TraceSourceFilter">
            <summary>
            Represents the simple trace source filter.
            </summary>
        </member>
        <member name="T:ComponentPro.Diagnostics.ITraceSourceFilter">
            <summary>
            Defines the stadardized fillter for <see cref="T:ComponentPro.Diagnostics.UltimateTraceListener"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.Diagnostics.ITraceSourceFilter.Matches(System.Object)">
            <summary>
            Returns true if the input source object is the one that we want to log messages; otherwise false.
            </summary>
            <param name="source">The source object.</param>
            <returns><c>true</c> to log; otherwise, <c>false</c></returns>
        </member>
        <member name="M:ComponentPro.Diagnostics.TraceSourceFilter.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="source">The source object to compare when a log message is received.</param>
            <param name="ignore">True to ignore log messages comming from the <paramref name="source">specified source</paramref>; otherwise false.</param>
        </member>
        <member name="M:ComponentPro.Diagnostics.TraceSourceFilter.Matches(System.Object)">
            <summary>
            Returns true if the input source object is the one that we want to log messages; otherwise false.
            </summary>
            <param name="source">The source object.</param>
        </member>
        <member name="T:ComponentPro.Diagnostics.XTrace">
            <summary>Provides a set of methods and properties that help Ultimate Components and you trace the execution of code.</summary>    
        </member>
        <member name="F:ComponentPro.Diagnostics.XTrace.Default">
            <summary>
            The default <see cref="T:ComponentPro.Diagnostics.XTrace"/> that for all classes that implement the <see cref="T:ComponentPro.Diagnostics.ITraceSource"/> interface.
            </summary>
        </member>
        <member name="M:ComponentPro.Diagnostics.XTrace.#ctor">
            <summary>
            Create a new instance of the <see cref="T:ComponentPro.Diagnostics.XTrace"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Diagnostics.XTrace.Close">
            <summary>Flushes the output buffer, and then closes the <see cref="P:ComponentPro.Diagnostics.XTrace.Listeners"></see>.</summary>
        </member>
        <member name="M:ComponentPro.Diagnostics.XTrace.Flush">
            <summary>Flushes the output buffer, and causes buffered data to be written to the <see cref="P:ComponentPro.Diagnostics.XTrace.Listeners"></see>.</summary>
        </member>
        <member name="M:ComponentPro.Diagnostics.XTrace.Indent">
            <summary>Increases the current <see cref="P:ComponentPro.Diagnostics.UltimateTraceListener.IndentLevel"></see> by one.</summary>
        </member>
        <member name="M:ComponentPro.Diagnostics.XTrace.Unindent">
            <summary>Decreases the current <see cref="P:ComponentPro.Diagnostics.UltimateTraceListener.IndentLevel"></see> by one.</summary>
        </member>
        <member name="M:ComponentPro.Diagnostics.XTrace.WriteLine(ComponentPro.Diagnostics.ITraceSource,ComponentPro.Diagnostics.TraceEventType,System.String,System.String)">
            <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString"></see> method to the trace listeners in the <see cref="P:ComponentPro.Diagnostics.XTrace.Listeners"></see> collection.</summary>
            <param name="category">A category name used to organize the output. </param>
            <param name="message">An <see cref="T:System.Object"></see> whose name is sent to the <see cref="P:ComponentPro.Diagnostics.XTrace.Listeners"></see>. </param>
            <param name="eventType">The event type.</param>
            <param name="traceSource">The source object.</param>
        </member>
        <member name="M:ComponentPro.Diagnostics.XTrace.WriteLine(ComponentPro.Diagnostics.ITraceSource[],ComponentPro.Diagnostics.TraceEventType,System.String,System.String)">
            <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString"></see> method to the trace listeners in the <see cref="P:ComponentPro.Diagnostics.XTrace.Listeners"></see> collection.</summary>
            <param name="category">A category name used to organize the output. </param>
            <param name="message">An <see cref="T:System.Object"></see> whose name is sent to the <see cref="P:ComponentPro.Diagnostics.XTrace.Listeners"></see>. </param>
            <param name="eventType">The event type.</param>
            <param name="traceSources">The source objects.</param>
        </member>
        <member name="M:ComponentPro.Diagnostics.XTrace.WriteLine(ComponentPro.Diagnostics.ITraceSource,ComponentPro.Diagnostics.TraceEventType,System.String,System.String,System.Object[])">
            <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString"></see> method to the trace listeners in the <see cref="P:ComponentPro.Diagnostics.XTrace.Listeners"></see> collection.</summary>
            <param name="category">A category name used to organize the output. </param>
            <param name="format">An <see cref="T:System.Object"></see> whose name is sent to the <see cref="P:ComponentPro.Diagnostics.XTrace.Listeners"></see>. </param>
            <param name="args">The argument.</param>
            <param name="eventType">The event type.</param>
            <param name="traceSource">The source object.</param>
        </member>
        <member name="M:ComponentPro.Diagnostics.XTrace.WriteLine(ComponentPro.Diagnostics.XTrace,System.Object,ComponentPro.Diagnostics.TraceEventType,System.String,System.String,System.Object[])">
            <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString"></see> method to the trace listeners in the <see cref="P:ComponentPro.Diagnostics.XTrace.Listeners"></see> collection.</summary>
            <param name="category">A category name used to organize the output. </param>
            <param name="format">An <see cref="T:System.Object"></see> whose name is sent to the <see cref="P:ComponentPro.Diagnostics.XTrace.Listeners"></see>. </param>
            <param name="args">The argument.</param>
            <param name="eventType">The event type.</param>
            <param name="traceSource">The source object.</param>
            <param name="manager">The trace listener manager.</param>
        </member>
        <member name="M:ComponentPro.Diagnostics.XTrace.WriteLine(ComponentPro.Diagnostics.ITraceSource,ComponentPro.Diagnostics.TraceEventType,System.String,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>Writes a category name and a message with additional data buffer to the trace listeners in the <see cref="P:ComponentPro.Diagnostics.XTrace.Listeners"></see> collection.</summary>
            <param name="traceSource">The source object.</param>
            <param name="category">A category name used to organize the output. </param>
            <param name="message">A message to write. </param>
            <param name="eventType">The event type.</param>
            <param name="buffer">The data buffer.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="offset">The buffer offset.</param>
        </member>
        <member name="M:ComponentPro.Diagnostics.XTrace.WriteLine(System.Object,ComponentPro.Diagnostics.TraceEventType,System.String,System.String,System.Object[])">
            <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString"></see> method to the trace listeners in the <see cref="P:ComponentPro.Diagnostics.XTrace.Listeners"></see> collection.</summary>
            <param name="category">A category name used to organize the output. </param>
            <param name="format">An <see cref="T:System.Object"></see> whose name is sent to the <see cref="P:ComponentPro.Diagnostics.XTrace.Listeners"></see>. </param>
            <param name="args">The argument.</param>
            <param name="eventType">The event type.</param>
            <param name="source">The source object.</param>
        </member>
        <member name="M:ComponentPro.Diagnostics.XTrace.WriteLine(System.Object,ComponentPro.Diagnostics.TraceEventType,System.String,System.String)">
            <summary>Writes a category name and the value of the object's <see cref="M:System.Object.ToString"></see> method to the trace listeners in the <see cref="P:ComponentPro.Diagnostics.XTrace.Listeners"></see> collection.</summary>
            <param name="category">A category name used to organize the output. </param>
            <param name="message">An <see cref="T:System.Object"></see> whose name is sent to the <see cref="P:ComponentPro.Diagnostics.XTrace.Listeners"></see>. </param>
            <param name="eventType">The event type.</param>
            <param name="source">The source object.</param>
        </member>
        <member name="M:ComponentPro.Diagnostics.XTrace.WriteLine(System.Object,ComponentPro.Diagnostics.TraceEventType,System.String,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>Writes a category name and a message with additional data buffer to the trace listeners in the <see cref="P:ComponentPro.Diagnostics.XTrace.Listeners"></see> collection.</summary>
            <param name="category">A category name used to organize the output. </param>
            <param name="message">A message to write. </param>
            <param name="eventType">The event type.</param>
            <param name="source">The source object.</param>
            <param name="buffer">The data buffer.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="offset">The buffer offset.</param>
        </member>
        <member name="M:ComponentPro.Diagnostics.XTrace.HasListeners">
            <summary>
            Gets a boolean value indicating whether at least one listener has been attached.
            </summary>
        </member>
        <member name="M:ComponentPro.Diagnostics.XTrace.ShouldLog(ComponentPro.Diagnostics.TraceEventType)">
            <summary>
            Indicates whether futher log message with severity lesser or equal to the specicifed <paramref name="level"/> should be logged.
            </summary>
            <param name="level">The log level.</param>
            <returns><c>true</c> to log; otherwise, false</returns>
        </member>
        <member name="M:ComponentPro.Diagnostics.XTrace.ShouldLog(System.Object,ComponentPro.Diagnostics.TraceEventType)">
            <summary>
            Indicates whether futher log message from the given source with severity lesser or equal to the specicifed <paramref name="level"/> should be logged.
            </summary>
            <param name="level">The log level.</param>
            <param name="source">The log source to check.</param>
            <returns><c>true</c> to log; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ComponentPro.Diagnostics.XTrace.ShouldLog(ComponentPro.Diagnostics.XTrace,ComponentPro.Diagnostics.TraceEventType)">
            <summary>
            Indicates whether futher log message from the given source with severity lesser or equal to the specicifed <paramref name="level"/> should be logged.
            </summary>
            <param name="level">The log level.</param>
            <param name="traceListenerManager">The trace listener manager.</param>
            <returns><c>true</c> to log; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:ComponentPro.Diagnostics.XTrace.AutoFlush">
            <summary>Gets or sets whether <see cref="M:ComponentPro.Diagnostics.UltimateTraceListener.Flush"></see> should be called on the <see cref="P:ComponentPro.Diagnostics.XTrace.Listeners"></see> after every write. Default is <c>true</c>.</summary>
            <returns>true if <see cref="M:ComponentPro.Diagnostics.UltimateTraceListener.Flush"></see> is called on the <see cref="P:ComponentPro.Diagnostics.XTrace.Listeners"></see> after every write; otherwise, false.</returns>
        </member>
        <member name="P:ComponentPro.Diagnostics.XTrace.IndentLevel">
            <summary>Gets or sets the indent level.</summary>
            <returns>The indent level. The default is zero.</returns>
        </member>
        <member name="P:ComponentPro.Diagnostics.XTrace.IndentSize">
            <summary>Gets or sets the number of spaces in an indent.</summary>
            <returns>The number of spaces in an indent. The default is four.</returns>
        </member>
        <member name="P:ComponentPro.Diagnostics.XTrace.Listeners">
            <summary>Gets the collection of listeners that is monitoring the trace output.</summary>
            <returns>A list of <see cref="T:ComponentPro.Diagnostics.UltimateTraceListener"></see> monitoring the trace output.</returns>
        </member>
        <member name="P:ComponentPro.Diagnostics.XTrace.Level">
            <summary>
            Gets or sets the trace level.
            </summary>
        </member>
        <member name="P:ComponentPro.Diagnostics.XTrace.SourceFilters">
            <summary>
            Gets or sets the source object filter.
            </summary>
            <remarks>
            It is handy to add some filters to filter out all messages comming from unwanted sources.
            For example, in a build system, uploading files is just a child task of a main one. By adding a <see cref="T:ComponentPro.Diagnostics.TraceSourceFilter"/> object to this property, 
            you can show messages coming from the main task only.
            </remarks>
        </member>
        <member name="T:ComponentPro.Diagnostics.UltimateConsoleTraceListener">
            <summary>Directs tracing or debugging output to a <see cref="T:System.IO.TextWriter"></see> or to a <see cref="T:System.IO.Stream"></see>, such as <see cref="T:System.IO.FileStream"></see>.</summary>
        </member>
        <member name="T:ComponentPro.Diagnostics.UltimateTextWriterTraceListener">
            <summary>Directs tracing or debugging output to a <see cref="T:System.IO.TextWriter"></see> or to a <see cref="T:System.IO.Stream"></see>, such as <see cref="T:System.IO.FileStream"></see>.</summary>    
        </member>
        <member name="T:ComponentPro.Diagnostics.UltimateTraceListener">
            <summary>
            Defines the base Trace Listener.
            </summary>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTraceListener.Dispose">
            <summary>
            Releases all the used resources.
            </summary>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTraceListener.Flush">
            <summary>Flushes the output buffer, and causes buffered data to be written to the underlying stream.</summary>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTraceListener.WriteIndent">
            <summary>
            Writes the indent to the listener you create when you implement this class,
            and resets the <see cref="P:ComponentPro.Diagnostics.UltimateTraceListener.NeedIndent"/> property to false.
            </summary>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTraceListener.Write(System.String)">
            <summary>
            When overridden in a derived class, writes the specified message to the listener you create in the derived class.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTraceListener.WriteLine(System.String)">
            <summary>
            When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTraceListener.TraceData(System.Object,ComponentPro.Diagnostics.TraceEventType,System.String,System.String)">
            <summary>
            Writes trace information, an array of data objects and event information to the listener specific output.
            </summary>
            <param name="source">An object to identify the source, typically the instance of the class that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:ComponentPro.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="category">A category name used to organize the output. </param>
            <param name="message">An <see cref="T:System.Object"></see> whose name is sent to the <see cref="P:ComponentPro.Diagnostics.XTrace.Listeners"></see>. </param>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTraceListener.TraceData(System.Object,ComponentPro.Diagnostics.TraceEventType,System.String,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>Writes a category name and a message with additional data buffer to the trace listeners in the <see cref="P:ComponentPro.Diagnostics.XTrace.Listeners"></see> collection.</summary>
            <param name="category">A category name used to organize the output. </param>
            <param name="message">A message to write. </param>
            <param name="eventType">The event type.</param>
            <param name="source">The source object.</param>
            <param name="buffer">The data buffer.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="offset">The buffer offset.</param>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTraceListener.MatchesSource(System.Object,ComponentPro.Diagnostics.TraceEventType)">
            <summary>
            Indicates whether the given log information will be accepted by this listener.
            </summary>
            <param name="source">An object to identify the source, typically the instance of the class that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:ComponentPro.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <returns><c>true</c> to accept; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:ComponentPro.Diagnostics.UltimateTraceListener.SourceToListen">
            <summary>
            Gets or sets the source object to listen to.
            </summary>
        </member>
        <member name="P:ComponentPro.Diagnostics.UltimateTraceListener.SourceFilter">
            <summary>
            Gets or sets the source object filter.
            </summary>
        </member>
        <member name="P:ComponentPro.Diagnostics.UltimateTraceListener.IndentSize">
            <summary>
            Gets or sets the indent size.
            </summary>
        </member>
        <member name="P:ComponentPro.Diagnostics.UltimateTraceListener.IndentLevel">
            <summary>
            Gets or sets the indent level.
            </summary>
        </member>
        <member name="P:ComponentPro.Diagnostics.UltimateTraceListener.IsThreadSafe">
            <summary>
            Indicates whether the listener is thread-safe.
            </summary>
        </member>
        <member name="P:ComponentPro.Diagnostics.UltimateTraceListener.Level">
            <summary>
            Gets or sets the trace level.
            </summary>
            <remarks>
            If you wish to set global trace level, set the <see cref="P:ComponentPro.Diagnostics.XTrace.Level"/> property.
            </remarks>
        </member>
        <member name="P:ComponentPro.Diagnostics.UltimateTraceListener.NeedIndent">
            <summary>
            Indicates whether it needs indent.
            </summary>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTextWriterTraceListener.#ctor">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Diagnostics.UltimateTextWriterTraceListener"></see> class with <see cref="T:System.IO.TextWriter"></see> as the output recipient.</summary>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTextWriterTraceListener.#ctor(System.IO.Stream)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Diagnostics.UltimateTextWriterTraceListener"></see> class with the specified name, using the stream as the recipient of the debugging and tracing output.</summary>
            <param name="stream">A <see cref="T:System.IO.Stream"></see> that represents the stream the <see cref="T:ComponentPro.Diagnostics.UltimateTextWriterTraceListener"></see> writes to. </param>
            <exception cref="T:System.ArgumentNullException">The stream is null. </exception>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTextWriterTraceListener.#ctor(System.IO.TextWriter)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Diagnostics.UltimateTextWriterTraceListener"></see> class with the specified name, using the specified writer as recipient of the tracing or debugging output.</summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"></see> that receives the output from the <see cref="T:ComponentPro.Diagnostics.UltimateTextWriterTraceListener"></see>. </param>
            <exception cref="T:System.ArgumentNullException">The writer is null. </exception>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTextWriterTraceListener.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Diagnostics.UltimateTextWriterTraceListener"></see> class with the specified name, using the file as the recipient of the debugging and tracing output.</summary>
            <param name="fileName">The name of the file the <see cref="T:ComponentPro.Diagnostics.UltimateTextWriterTraceListener"></see> writes to. </param>
            <exception cref="T:System.ArgumentNullException">The stream is null. </exception>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTextWriterTraceListener.#ctor(System.Object)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Diagnostics.UltimateTextWriterTraceListener"></see> class with <see cref="T:System.IO.TextWriter"></see> as the output recipient.</summary>
            <param name="targetToListen">The source object to listen to.</param>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTextWriterTraceListener.#ctor(System.Object,System.IO.Stream)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Diagnostics.UltimateTextWriterTraceListener"></see> class with the specified name, using the stream as the recipient of the debugging and tracing output.</summary>
            <param name="stream">A <see cref="T:System.IO.Stream"></see> that represents the stream the <see cref="T:ComponentPro.Diagnostics.UltimateTextWriterTraceListener"></see> writes to. </param>
            <param name="targetToListen">The source object to listen to.</param>
            <exception cref="T:System.ArgumentNullException">The stream is null. </exception>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTextWriterTraceListener.#ctor(System.Object,System.IO.TextWriter)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Diagnostics.UltimateTextWriterTraceListener"></see> class with the specified name, using the specified writer as recipient of the tracing or debugging output.</summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"></see> that receives the output from the <see cref="T:ComponentPro.Diagnostics.UltimateTextWriterTraceListener"></see>. </param>
            <param name="targetToListen">The source object to listen to.</param>
            <exception cref="T:System.ArgumentNullException">The writer is null. </exception>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTextWriterTraceListener.#ctor(System.Object,System.String,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Diagnostics.UltimateTextWriterTraceListener"></see> class with the specified name, using the file as the recipient of the debugging and tracing output.</summary>
            <param name="fileName">The name of the file the <see cref="T:ComponentPro.Diagnostics.UltimateTextWriterTraceListener"></see> writes to. </param>
            <param name="targetToListen">The source object to listen to.</param>
            <param name="append">Indicates whether to append log entries to the end of the specified file.</param>
            <exception cref="T:System.ArgumentNullException">The stream is null. </exception>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTextWriterTraceListener.Dispose">
            <summary>Closes the <see cref="P:ComponentPro.Diagnostics.UltimateTextWriterTraceListener.Writer"></see> so that it no longer receives tracing or debugging output.</summary>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTextWriterTraceListener.Flush">
            <summary>Flushes the output buffer for the <see cref="P:ComponentPro.Diagnostics.UltimateTextWriterTraceListener.Writer"></see>.</summary>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTextWriterTraceListener.Write(System.String)">
            <summary>Writes a message to this instance's <see cref="P:ComponentPro.Diagnostics.UltimateTextWriterTraceListener.Writer"></see>.</summary>
            <param name="message">A message to write. </param>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTextWriterTraceListener.WriteLine(System.String)">
            <summary>Writes a message to this instance's <see cref="P:ComponentPro.Diagnostics.UltimateTextWriterTraceListener.Writer"></see> followed by a line terminator. The default line terminator is a carriage return followed by a line feed (\r\n).</summary>
            <param name="message">A message to write. </param>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTextWriterTraceListener.TraceData(System.Object,ComponentPro.Diagnostics.TraceEventType,System.String,System.String)">
            <summary>
            Writes trace information, an array of data objects and event information to the listener specific output.
            </summary>
            <param name="source">An object to identify the source, typically the instance of the class that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:ComponentPro.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="category">A category name used to organize the output. </param>
            <param name="message">An <see cref="T:System.Object"></see> whose name is sent to the <see cref="P:ComponentPro.Diagnostics.XTrace.Listeners"></see>. </param>
        </member>
        <member name="P:ComponentPro.Diagnostics.UltimateTextWriterTraceListener.FileName">
            <summary>
            Gets or sets the log file name.
            </summary>
        </member>
        <member name="P:ComponentPro.Diagnostics.UltimateTextWriterTraceListener.Writer">
            <summary>Gets or sets the text writer that receives the tracing or debugging output.</summary>
            <returns>A <see cref="T:System.IO.TextWriter"></see> that represents the writer that receives the tracing or debugging output.</returns>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateConsoleTraceListener.TraceData(System.Object,ComponentPro.Diagnostics.TraceEventType,System.String,System.String)">
            <summary>
            Writes trace information, an array of data objects and event information to the listener specific output.
            </summary>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:ComponentPro.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="category">A category name used to organize the output.</param>
            <param name="message">An <see cref="T:System.Object"></see> whose name is sent to the <see cref="P:ComponentPro.Diagnostics.XTrace.Listeners"></see>. </param>
        </member>
        <member name="T:ComponentPro.Diagnostics.UltimateOutputTraceListener">
            <summary>Directs tracing or debugging output to the .NET trace listeners.</summary>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateOutputTraceListener.TraceData(System.Object,ComponentPro.Diagnostics.TraceEventType,System.String,System.String)">
            <summary>
            Writes trace information, an array of data objects and event information to the listener specific output.
            </summary>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:ComponentPro.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="category">A category name used to organize the output.</param>
            <param name="message">An <see cref="T:System.Object"></see> whose name is sent to the <see cref="P:ComponentPro.Diagnostics.XTrace.Listeners"></see>. </param>
        </member>
        <member name="T:ComponentPro.Diagnostics.UltimateTraceListenerCollection">
            <summary>
            Represents the collection of <see cref="T:ComponentPro.Diagnostics.UltimateTraceListener"/> objects.
            </summary>
            <remarks>
            This class is thread-safe.
            </remarks>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTraceListenerCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the list.
            </summary>
            <returns>A Enumerator for the list.</returns>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTraceListenerCollection.Add(ComponentPro.Diagnostics.UltimateTraceListener)">
            <summary>
            Adds an object to the end of the list.
            </summary>
            <param name="item">The object to be added to the end of the list. The value can be null for reference types.</param>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTraceListenerCollection.Clear">
            <summary>
            Removes all elements from the list.
            </summary>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTraceListenerCollection.Contains(ComponentPro.Diagnostics.UltimateTraceListener)">
            <summary>
            Determines whether an element is in the list.
            </summary>
            <param name="item">The object to locate in the list. The value can be null for reference types.</param>
            <returns>true if item is found in the list; otherwise, false.</returns>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTraceListenerCollection.CopyTo(ComponentPro.Diagnostics.UltimateTraceListener[],System.Int32)">
            <summary>
            Copies the entire list to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from the list. 
            The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTraceListenerCollection.Remove(ComponentPro.Diagnostics.UltimateTraceListener)">
            <summary>
            Removes the first occurrence of a specific object from the list.
            </summary>
            <param name="item">The object to remove from the list. The value can be null for reference types.</param>
            <returns>true if item is successfully removed; otherwise, false. This method also returns false if item was not found in the list.</returns>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTraceListenerCollection.IndexOf(ComponentPro.Diagnostics.UltimateTraceListener)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire list.
            </summary>
            <param name="item">The object to locate in the list. The value can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire list, if found; otherwise, –1.</returns>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTraceListenerCollection.Insert(System.Int32,ComponentPro.Diagnostics.UltimateTraceListener)">
            <summary>
            Inserts an element into the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
        </member>
        <member name="M:ComponentPro.Diagnostics.UltimateTraceListenerCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the list.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="P:ComponentPro.Diagnostics.UltimateTraceListenerCollection.Count">
            <summary>
            Gets the number of elements actually contained in the list.
            </summary>
        </member>
        <member name="P:ComponentPro.Diagnostics.UltimateTraceListenerCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
    </members>
</doc>
