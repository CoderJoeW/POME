<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ComponentPro.Network.Mac</name>
    </assembly>
    <members>
        <member name="T:ComponentPro.Net.CommandResponseEventArgs">
            <summary>
            Provides data for the <b>CommandResponse</b> event.
            </summary>    
        </member>
        <member name="P:ComponentPro.Net.CommandResponseEventArgs.Command">
            <summary>
            Gets the command string, or a null reference when a response has been received.
            </summary>
            <value>The command string.</value>
        </member>
        <member name="P:ComponentPro.Net.CommandResponseEventArgs.Response">
            <summary>
            Gets the server's response, or a null reference when a command has been sent.
            </summary>
            <value>The server's response.</value>
        </member>
        <member name="T:ComponentPro.Compression.ZlibStream">
            <summary>
            Zlib compression or decompression stream.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.ZlibStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the ZlibStream with the specified compression level. This will be a compression stream.
            </summary>
            <param name="inner">The inner stream.</param>
            <param name="compressionLevel">The compression level. From 0 to 9 (Default compression level is 6).</param>
        </member>
        <member name="M:ComponentPro.Compression.ZlibStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the ZlibStream. This will be a decompression stream.
            </summary>
            <param name="inner">The inner stream.</param>
        </member>
        <member name="M:ComponentPro.Compression.ZlibStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seek the specified offset and origin. This method is not supported.
            </summary>
            <param name="offset">Offset.</param>
            <param name="origin">Origin.</param>
        </member>
        <member name="M:ComponentPro.Compression.ZlibStream.SetLength(System.Int64)">
            <summary>
            Sets the length. This method is not supported.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:ComponentPro.Compression.ZlibStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read the specified buffer, offset and count. This method is not supported in compression mode.
            </summary>
            <param name="buffer">Buffer.</param>
            <param name="offset">Offset.</param>
            <param name="count">Count.</param>
        </member>
        <member name="M:ComponentPro.Compression.ZlibStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write the specified buffer, offset and count. This method is not supported in decompression mode.
            </summary>
            <param name="buffer">Buffer.</param>
            <param name="offset">Offset.</param>
            <param name="count">Count.</param>
        </member>
        <member name="M:ComponentPro.Compression.ZlibStream.Flush">
            <summary>
            Flush this instance.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.ZlibStream.Dispose(System.Boolean)">
            <summary>
            Dispose the specified disposing.
            </summary>
            <param name="disposing">If set to <c>true</c> disposing.</param>
        </member>
        <member name="P:ComponentPro.Compression.ZlibStream.CompressedRead">
            <summary>
            Gets the number of compressed bytes read. Available in decompression mode only.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ZlibStream.CanRead">
            <summary>
            Gets a value indicating whether this instance can read.
            </summary>
            <value><c>true</c> if this instance can read; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComponentPro.Compression.ZlibStream.CanSeek">
            <summary>
            Gets a value indicating whether this instance can seek.
            </summary>
            <value><c>true</c> if this instance can seek; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComponentPro.Compression.ZlibStream.CanWrite">
            <summary>
            Gets a value indicating whether this instance can write.
            </summary>
            <value><c>true</c> if this instance can write; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComponentPro.Compression.ZlibStream.Length">
            <summary>
            Gets the length. This property is not supported.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:ComponentPro.Compression.ZlibStream.Position">
            <summary>
            Gets or sets the position. This property is not supported.
            </summary>
            <value>The position.</value>
        </member>
        <member name="T:ComponentPro.Net.SspiAuthenticationMethod">
            <summary>
            Defines SSPI authentication methods used for logging in the user account on the server.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SspiAuthenticationMethod.NTLM">
            <summary>
            Secure SASL NTLM authentication (also known as Secure Password Authentication - SPA). 
            In Windows domain environment such as Active Directory, can also be used to authenticate the current Windows user 
            (in this case, the developer should pass a null reference (Nothing in Visual Basic) as user name and password values). 
            Might not be supported by particular server implementations.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SspiAuthenticationMethod.Kerberos">
            <summary>
            Secure SASL GSSAPI authentication (Kerberos). 
            Used to authenticate the current Windows user in Windows domain environment such as Active Directory. 
            User name and password values will be ignored and can be left blank or a null reference (Nothing in Visual Basic). 
            Might not be supported by particular server implementations.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SspiAuthenticationMethod.Negotiate">
            <summary>
            Negotiate authentication.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.INetClient">
            <summary>
            Defines the generalized network client object.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.INetClient.InstanceId">
            <summary>
            Gets the ID of the current instance.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.INetClient.IsConnected">
            <summary>
            Gets a boolean value indicating whether the client is connected to the server.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.INetClient.IsBusy">
            <summary>
            Gets a boolean value indicating whether the server is busy.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.INetClient.IsAuthenticated">
            <summary>
            Gets a value indicating whether the session has already been authenticated.
            </summary>
            <value><c>true</c> if authenticated; <c>false</c> otherwise.</value>
        </member>
        <member name="P:ComponentPro.Net.INetClient.ServerName">
            <summary>
            Gets the server name.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.INetClient.ServerPort">
            <summary>
            Gets the port number.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.INetClient.UserName">
            <summary>
            Gets the user name.
            </summary>
        </member>
        <member name="T:ComponentPro.IncludeMode">
            <summary>
            Defines the modes deciding whether to include or exclude an element.
            </summary>
        </member>
        <member name="F:ComponentPro.IncludeMode.Include">
            <summary>
            Include element.
            </summary>
        </member>
        <member name="F:ComponentPro.IncludeMode.Exclude">
            <summary>
            Exclude element.
            </summary>
        </member>
        <member name="T:ComponentPro.MultiComparer">
            <summary>
            Class for chained comparison of objects.
            </summary>
        </member>
        <member name="M:ComponentPro.MultiComparer.#ctor(System.Collections.IComparer[])">
            <summary>
            Creates a new instance of MultiComparer.
            </summary>
            <param name="comparerChain">An array of comparers to use.</param>
        </member>
        <member name="M:ComponentPro.MultiComparer.Compare(System.Object,System.Object)">
            <summary>
            IComparer interface implementation. Compares two instances of provided objects.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the result of of x and y comparison.
            Value Less than zero means x is less than y. Zero x equals y. Greater than zero x is greater than y.
            </returns>
        </member>
        <member name="T:ComponentPro.Security.Authentication.SspiAuthentication">
            <summary>
            Managed class that provides helper members for SSPI authentication.
            </summary>
            <remarks>
            Only supported on Windows platforms.
            </remarks>
        </member>
        <member name="M:ComponentPro.Security.Authentication.SspiAuthentication.#ctor(System.String,ComponentPro.Security.Authentication.SspiTargetDataRepresentation,System.String,ComponentPro.Security.Authentication.SspiContextRequirement,System.String,System.String,System.String)">
            <summary>
            Creates a new SSPI session.
            </summary>
            <param name="package">Authentication package.</param>
            <param name="use">Credential use.</param>
            <param name="dataRepresentation">Data representation.</param>
            <param name="targetName">Target name.</param>
            <param name="requirements">Requirements.</param>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <param name="userDomain">User domain</param>
            <remarks>
            Only supported on Windows platforms.
            </remarks>
        </member>
        <member name="M:ComponentPro.Security.Authentication.SspiAuthentication.Dispose">
            <summary>
            Disposes the SSPI session.
            </summary>
        </member>
        <member name="M:ComponentPro.Security.Authentication.SspiAuthentication.GetNextMessage(System.Byte[],System.Boolean@)">
            <summary>
            Get next SSPI message.
            </summary>
            <param name="challenge">Challenge.</param>
            <param name="complete">Receives a value indicating whether the SSPI has finished.</param>
            <returns>Next SSPI message.</returns>
            <remarks>
            Only supported on Windows platforms.
            </remarks>
        </member>
        <member name="T:ComponentPro.Security.Authentication.SspiTargetDataRepresentation">
            <summary>
            Target data representation for SSPI authentication.
            </summary>
            <remarks>
            Only supported on Windows platforms.
            </remarks>
        </member>
        <member name="F:ComponentPro.Security.Authentication.SspiTargetDataRepresentation.Native">
            <summary>Native.</summary>
        </member>
        <member name="F:ComponentPro.Security.Authentication.SspiTargetDataRepresentation.Network">
            <summary>Network.</summary>
        </member>
        <member name="T:ComponentPro.Security.Authentication.SspiContextRequirement">
            <summary>
            Bit flags that indicate requests for the context. Not all packages can support all requirements.
            </summary>
            <remarks>
            Only supported on Windows platforms.
            </remarks>
        </member>
        <member name="F:ComponentPro.Security.Authentication.SspiContextRequirement.Delegation">
            <summary>The server in the transport application can build new security contexts impersonating the client that will be accepted by other servers as the client's contexts. This is currently supported only by Kerberos</summary>
        </member>
        <member name="F:ComponentPro.Security.Authentication.SspiContextRequirement.MutualAuth">
            <summary>The communicating parties must authenticate their identities to each other.</summary>
        </member>
        <member name="F:ComponentPro.Security.Authentication.SspiContextRequirement.Confidentiality">
            <summary>The context can protect data while in transit using the EncryptMessage (General) and DecryptMessage (General) functions. The CONFIDENTIALITY flag does not work if the generated context is for the Guest account.</summary>
        </member>
        <member name="F:ComponentPro.Security.Authentication.SspiContextRequirement.Connection">
            <summary>Connection semantics must be used.</summary>
        </member>
        <member name="F:ComponentPro.Security.Authentication.SspiContextRequirement.Integrity">
            <summary>Buffer integrity can be verified but no sequencing or reply detection is enabled.</summary>
        </member>
        <member name="T:ComponentPro.Security.Certificates.CertificateChainEngine">
            <summary>
            Defines the certificate chain engines to use to validate certificate chains.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateChainEngine.CurrentUser">
            <summary>
            Use certificates in the personal certificate store.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateChainEngine.LocalMachine">
            <summary>
            Use certificates in the local machine certificate store.
            </summary>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.CryptographicCollection">
            <summary>
            A base class for various collections of cryptographic objects.
            </summary>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.CryptographicCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:ComponentPro.Security.Cryptography.CryptographicCollection" /> to a compatible one-dimensional
            <see cref="T:System.Array" />, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:ComponentPro.Security.Cryptography.CryptographicCollection" />.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.CryptographicCollection.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:ComponentPro.Security.Cryptography.CryptographicCollection" />.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> for the collection.</returns>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.CryptographicCollection.Count">
            <summary>
            Gets the number of items in the <see cref="T:ComponentPro.Security.Cryptography.CryptographicCollection" />.
            </summary>
            <value>The number of items in collection.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.CryptographicCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:ComponentPro.Security.Cryptography.CryptographicCollection" /> is synchronized.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.CryptographicCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:ComponentPro.Security.Cryptography.CryptographicCollection" />.
            </summary>
        </member>
        <member name="T:ComponentPro.Security.Certificates.CertificateException">
            <summary>
            The exception that is thrown when a certificate-related error occurs.
            </summary>
        </member>
        <member name="M:ComponentPro.Security.Certificates.CertificateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Exception class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:ComponentPro.Security.Certificates.CertificateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the Exception class
            with a specified error message and a reference to the
            inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:ComponentPro.Security.Certificates.CertificateVerificationStatus">
            <summary>
            Defines the certificate verification status.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.TimeNotValid">
            <summary>
            Specifies that the X509 chain is not valid due to an invalid time value, such as a value that indicates an expired certificate.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.TimeNotNested">
            <summary>
            Deprecated. Specifies that the CA (certificate authority) certificate and the issued certificate have validity periods that are not nested. For example, the CA cert can be valid from January 1 to December 1 and the issued certificate from January 2 to December 2, which would mean the validity periods are not nested.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.Revoked">
            <summary>
            Specifies that the X509 chain is invalid due to a revoked certificate.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.SignatureNotValid">
            <summary>
            Specifies that the X509 chain is invalid due to an invalid certificate signature.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.UsageNotValid">
            <summary>
            Specifies that the key usage is not valid.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.UntrustedRoot">
            <summary>
            The certificate or certificate chain is based on an untrusted root.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.RevocationStatusUnknown">
            <summary>
            The revocation status of the certificate or one of the certificates in the certificate chain is unknown.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.Cyclic">
            <summary>
            Specifies that the X509 chain could not be built.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.InvalidExtension">
            <summary>
            Specifies that the X509 chain is invalid due to an invalid extension.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.InvalidPolicyConstraints">
            <summary>
            Specifies that the X509 chain is invalid due to invalid policy constraints.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.InvalidBasicConstraints">
            <summary>
            Specifies that the X509 chain is invalid due to invalid basic constraints.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.InvalidNameConstraints">
            <summary>
            Specifies that the X509 chain is invalid due to invalid name constraints.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.NotSupportedNameConstraint">
            <summary>
            Specifies that the certificate does not have a supported name constraint or has a name constraint that is unsupported.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.NotDefinedNameConstraint">
            <summary>
            Specifies that the certificate has an undefined name constraint.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.NotPermittedNameConstraint">
            <summary>
            Specifies that the certificate has an impermissible name constraint.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.ExcludedNameConstraint">
            <summary>
            Specifies that the X509 chain is invalid because a certificate has excluded a name constraint.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.IncompleteChain">
            <summary>
            The X509 certificate chain is not compete.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.CtlTimeNotValid">
            <summary>
            Specifies that the certificate trust list (CTL) is not valid because of an invalid time value, such as one that indicates that the CTL has expired.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.CtlSignatureNotValid">
            <summary>
            Specifies that the certificate trust list (CTL) contains an invalid signature.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.CtlUsageNotValid">
            <summary>
            Specifies that the certificate trust list (CTL) is not valid for this use.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.OfflineRevocation">
            <summary>
            Specifies that the online certificate revocation list (CRL) the X509 chain relies on is currently offline.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.NoIssuanceChainPolicy">
            <summary>
            Specifies that there is no certificate policy extension in the certificate. This error would occur if a group policy has specified that all certificates must have a certificate policy.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.NotSupportedSignatureAlgorithm">
            <summary>
            Not supported signature algorithm
            </summary>
            <summary>
            Unsupported signature algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.UnknownError">
            <summary>
            Unknown error.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.PathTooLong">
            <summary>
            A path length constraint is violated.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.UnknownCriticalExtension">
            <summary>
            A certificate contains an unknown extension that is marked critical.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.InvalidChain">
            <summary>
            A parent of a given certificate in fact did not issue that child certificate.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.UnknownCa">
            <summary>
            A certificate chain could not be built to a trusted root authority.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.CnNotMatch">
            <summary>
            The certificate's CN name does not match the passed value.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.CaNotTrusted">
            <summary>
            A certification chain processed correctly, but one of the CA certificates
            is not trusted by the policy provider.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.ExplicitDistrust">
            <summary>
            The certificate was explicitly marked as untrusted by the user.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.Malformed">
            <summary>
            A certificate is missing or has an empty value for an important field,
            such as a subject or issuer name.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.HasMoreErrors">
            <summary>
            There might be more errors.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.WeakAlgorithm">
            <summary>
            The algorithm used in the certificate is not considered secure on this platform.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.NotTrusted">
            <summary>
            Certificate is not trusted.
            </summary>
        </member>
        <member name="T:ComponentPro.Security.Certificates.DistinguishedName">
            <summary>
            Represents a distinguished name.
            </summary>
        </member>
        <member name="M:ComponentPro.Security.Certificates.DistinguishedName.#ctor(System.Byte[])">
            <summary>
            Creates an instance of the distinguished name from an ASN.1 block.
            </summary>
            <param name="dn">ASN.1 block.</param>
        </member>
        <member name="M:ComponentPro.Security.Certificates.DistinguishedName.#ctor(System.String)">
            <summary>
            Creates an instance of the distinguished name from a DN string.
            </summary>
            <param name="dn">DN string.</param>
        </member>
        <member name="M:ComponentPro.Security.Certificates.DistinguishedName.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">Object to compare with the current object.</param>
            <returns>True if equal; false if not equal.</returns>
        </member>
        <member name="M:ComponentPro.Security.Certificates.DistinguishedName.FromString(System.String)">
            <summary>
            Converts the specified DN string to its BER-encoded representation.
            </summary>
            <param name="dn">String DN.</param>
            <returns>BER-encoded DN.</returns>
        </member>
        <member name="M:ComponentPro.Security.Certificates.DistinguishedName.GetCommonName">
            <summary>
            Gets the common name of this <see cref="T:ComponentPro.Security.Certificates.DistinguishedName"/>, if available.
            </summary>
            <returns>Common name; or null if not available.</returns>
        </member>
        <member name="M:ComponentPro.Security.Certificates.DistinguishedName.GetHashCode">
            <summary>
            Get hash code of this <see cref="T:ComponentPro.Security.Certificates.DistinguishedName"/>
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:ComponentPro.Security.Certificates.DistinguishedName.GetMailAddresses">
            <summary>
            Gets the list of e-mail addresses of this <see cref="T:ComponentPro.Security.Certificates.DistinguishedName"/>.
            </summary>
            <returns>The list of addresses.</returns>
        </member>
        <member name="M:ComponentPro.Security.Certificates.DistinguishedName.ToArray">
            <summary>
            Converts this <see cref="T:ComponentPro.Security.Certificates.DistinguishedName"/> into a byte array.
            </summary>
            <returns>Byte array.</returns>
        </member>
        <member name="M:ComponentPro.Security.Certificates.DistinguishedName.ToString">
            <summary>
            Get the String representation of this <see cref="T:ComponentPro.Security.Certificates.DistinguishedName"/>
            </summary>
            <returns>A DN string.</returns>
        </member>
        <member name="M:ComponentPro.Security.Certificates.DistinguishedName.ToString(System.Byte[])">
            <summary>
            Converts BER-encoded representation of DB to its string representation.
            </summary>
            <param name="dn">BER-encoded DN.</param>
            <returns>String DN.</returns>
        </member>
        <member name="T:ComponentPro.Security.Certificates.KeyAlgorithm">
            <summary>
            The key algorithm for the certificate.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.KeyAlgorithm.Unsupported">
            <summary>
            Unsupported key algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.KeyAlgorithm.RSA">
            <summary>
            RSA.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.KeyAlgorithm.DSA">
            <summary>
            DSA.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.KeyAlgorithm.GOST_R3410_2001">
            <summary>
            GOST R 34.10-2001.
            </summary>
        </member>
        <member name="T:ComponentPro.Security.Certificates.SignatureHashAlgorithm">
            <summary>
            Represents the hash algorithm to use when signing or verifying data
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.SignatureHashAlgorithm.Unsupported">
            <summary>
            Unsupported hash algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.SignatureHashAlgorithm.MD5">
            <summary>
            MD5.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.SignatureHashAlgorithm.SHA1">
            <summary>
            SHA1.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.SignatureHashAlgorithm.MD5SHA1">
            <summary>
            MD5SHA1.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.SignatureHashAlgorithm.GOST_R3411_94">
            <summary>
            GOST R 34.11-94.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.SignatureHashAlgorithm.SHA256">
            <summary>
            SHA-256.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.SignatureHashAlgorithm.SHA384">
            <summary>
            SHA-384.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.SignatureHashAlgorithm.SHA512">
            <summary>
            SHA-512.
            </summary>
        </member>
        <member name="T:ComponentPro.Security.Certificates.VerificationFlags">
            <summary>
            Represents the different verification flags used to verify a server's certificate.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.VerificationFlags.None">
            <summary>
            No options specified.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.VerificationFlags.IgnoreTimeNotValid">
            <summary>
            Ignore certificates in the chain that are not valid either because they have expired or they are not yet in effect when determining certificate validity.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.VerificationFlags.IgnoreCtlTimeNotValid">
            <summary>
            Ignore that the certificate trust list (CTL) is not valid, for reasons such as the CTL has expired, when determining certificate verification.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.VerificationFlags.IgnoreTimeNotNested">
            <summary>
            Ignore that the CA (certificate authority) certificate and the issued certificate have validity periods that are not nested when verifying the certificate. For example, the CA cert can be valid from January 1 to December 1 and the issued certificate from January 2 to December 2, which would mean the validity periods are not nested.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.VerificationFlags.IgnoreAllTimeNotValid">
            <summary>
            Ignore certificates in the chain that have any invalid time checks.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.VerificationFlags.IgnoreInvalidBasicConstraints">
            <summary>
            Ignore that the basic constraints are not valid when determining certificate verification.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.VerificationFlags.AllowUnknownCa">
            <summary>
            Ignore that the chain cannot be verified due to an unknown certificate authority (CA).
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.VerificationFlags.IgnoreWrongUsage">
            <summary>
            Ignore that the certificate was not issued for the current use when determining certificate verification.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.VerificationFlags.IgnoreInvalidPolicy">
            <summary>
            Ignore that the certificate has invalid policy when determining certificate verification.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.VerificationFlags.IgnoreEndRevUnknown">
            <summary>
            Ignore that the end certificate (the user certificate) revocation is unknown when determining certificate verification.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:ComponentPro.Security.Certificates.VerificationFlags.IgnoreCtlSignerRevUnknown">
            <summary>
            Ignore that the certificate signer revocation is unknown when determining certificate verification.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:ComponentPro.Security.Certificates.VerificationFlags.IgnoreCaRevUnknown">
            <summary>
            Ignore that the certificate authority revocation is unknown when determining certificate verification.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:ComponentPro.Security.Certificates.VerificationFlags.IgnoreRootRevUnknown">
            <summary>
            Ignore that the root revocation is unknown when determining certificate verification.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:ComponentPro.Security.Certificates.VerificationFlags.IgnoreAllRevUnknown">
            <summary>
            Ignore that the certificate revocation status is unknown when determining certificate verification.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.VerificationFlags.AllowTestRoot">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.VerificationFlags.TrustTestRoot">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.VerificationFlags.UseCacheOnly">
            <summary>
            Use local cache only.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:ComponentPro.Security.Certificates.VerificationFlags.IgnoreCnNotMatch">
            <summary>
            Ignore that the certificate common name is invalid when determining certificate verification.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.VerificationFlags.SkipRevocationCheck">
            <summary>
            Skip certificate revocation check.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="T:ComponentPro.Security.Certificates.ValidationResult">
            <summary>
            Represents the certificate chain validation result.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.Certificates.ValidationResult.NativeErrorCode">
            <summary>
            Gets the validation native error code (only on .NET CF and Xamarin.iOS).
            </summary>
            <value>The error code returned by the validation function.</value>
        </member>
        <member name="P:ComponentPro.Security.Certificates.ValidationResult.Status">
            <summary>
            Gets the status mask.
            </summary>
            <value>Status mask.</value>
        </member>
        <member name="P:ComponentPro.Security.Certificates.ValidationResult.Valid">
            <summary>
            Gets a value indicating whether the certificate chain is valid.
            </summary>
            <value>True if valid, false if not valid.</value>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.DiffieHellmanParameters">
            <summary>
            A representation of key generation parameters that are required for Diffie-Hellman key exchange.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.DiffieHellmanParameters.P">
            <summary>
            The prime modulus.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.DiffieHellmanParameters.G">
            <summary>
            The generator.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.DiffieHellmanParameters.X">
            <summary>
            The private key.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.DiffieHellmanParameters.Y">
            <summary>
            The public key.
            </summary>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.HashingAlgorithmId">
            <summary>
            Specifies hash algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.HashingAlgorithmId.SHA1">
            <summary>
            SHA-1.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.HashingAlgorithmId.SHA256">
            <summary>
            SHA-256.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.HashingAlgorithmId.SHA384">
            <summary>
            SHA-384.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.HashingAlgorithmId.SHA512">
            <summary>
            SHA-512.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.HashingAlgorithmId.MD4">
            <summary>
            MD4.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.HashingAlgorithmId.MD5">
            <summary>
            MD5.
            </summary>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.ObjectIdentifier">
            <summary>
            This class represents Universal Object Identifiers (Oids) and their associated operations.
            </summary>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.ObjectIdentifier.#ctor(ComponentPro.Security.Cryptography.ObjectIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Security.Cryptography.ObjectIdentifier" /> class using the specified object. 
            </summary>
            <param name="oid">The object identifier information to use to create the new object identifier.</param>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.ObjectIdentifier.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Security.Cryptography.ObjectIdentifier" /> class using the specified OID dotted number string.
            </summary>
            <param name="oid">An object identifier in dotted number format.</param>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.ObjectIdentifier.op_Implicit(System.String)~ComponentPro.Security.Cryptography.ObjectIdentifier">
            <summary>
            Converts a <see cref="T:System.String" /> OID to an <see cref="T:ComponentPro.Security.Cryptography.ObjectIdentifier" />.
            </summary>
            <param name="oid">An object identifier in dotted number format.</param>
            <returns>An <see cref="T:ComponentPro.Security.Cryptography.ObjectIdentifier" />.</returns>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.ObjectIdentifier.Parse(System.Byte[])">
            <summary>
            Creates an Oid object from its ASN.1 DER encoding. This refers to the full encoding including tag and length. The structure and encoding of Oids is defined in ISOIEC-8824 and ISOIEC-8825.
            </summary>
            <param name="buffer">Byte array.</param>
            <returns>OID.</returns>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.ObjectIdentifier.ToArray">
            <summary>
            Returns the full ASN.1 DER encoding for this oid object, which includes the tag and length.
            </summary>
            <returns>Byte array.</returns>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.ObjectIdentifier.ToArray(System.Boolean)">
            <summary>
            Returns the full ASN.1 DER encoding for this oid object, which includes the tag and length.
            </summary>
            <param name="useDer">True if DER-formatting is to be used.</param>
            <returns>Byte array.</returns>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.ObjectIdentifier.ToString">
            <summary>
            Returns a string representation of the oid's integer components in dot separated notation.
            </summary>
            <returns>A string representation of the current Oid.</returns>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.ObjectIdentifier.Value">
            <summary>
            Returns a string representation of the oid's integer components in dot separated notation.
            </summary>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.Pkcs.AlgorithmIdentifier">
            <summary>
            Defines the algorithm used for a cryptographic operation.
            </summary>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.Pkcs.AlgorithmIdentifier.#ctor(ComponentPro.Security.Cryptography.ObjectIdentifier)">
            <summary>
            Creates an instance of the <see cref="T:ComponentPro.Security.Cryptography.Pkcs.AlgorithmIdentifier" /> class
            with the specified algorithm identifier.
            </summary>
            <param name="oid">An object identifier for the algorithm.</param>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.Pkcs.AlgorithmIdentifier.#ctor(ComponentPro.Security.Cryptography.ObjectIdentifier,System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:ComponentPro.Security.Cryptography.Pkcs.AlgorithmIdentifier" /> class with
            the specified algorithm identifier and parameters.
            </summary>
            <param name="oid">An object identifier for the algorithm.</param>
            <param name="parameters">ASN.1 DER encoded parameters.</param>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.AlgorithmIdentifier.Oid">
            <summary>
            The <see cref="P:ComponentPro.Security.Cryptography.Pkcs.AlgorithmIdentifier.Oid"/> property sets or retrieves the <see cref="T:ComponentPro.Security.Cryptography.ObjectIdentifier"/> object that specifies the object identifier for the algorithm.
            </summary>
            <value>On <see cref="P:ComponentPro.Security.Cryptography.Pkcs.AlgorithmIdentifier.Oid"/> that represents the algorithm.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.AlgorithmIdentifier.Parameters">
            <summary>
            Sets or retrieves any parameters required by the algorithm.
            </summary>
            <value>The alogirithm parameters.</value>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.Pkcs.CertIncludeOption">
            <summary>
            Specifies how much of the X.509 certificate chain should be included in the X.509 data.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.CertIncludeOption.LeaveExisting">
            <summary>Leave the existing certificate in the collection.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.CertIncludeOption.None">
            <summary>The certificate chain is not included.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.CertIncludeOption.ExcludeRoot">
            <summary>The certificate chain is included, except for the root certificate.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.CertIncludeOption.EndCertOnly">
            <summary>Only the end certificate is included.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.CertIncludeOption.WholeChain">
            <summary>The certificate chain, including the root certificate, is included.</summary>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.Pkcs.PkcsCore">
            <summary>
            The base class for PKCS objects.
            </summary>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.Pkcs.ExtendedKeyUsage">
            <summary>
            List of common extended usage OIDs
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.ExtendedKeyUsage.AnyPurpose">
            <summary>Any purpose.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.ExtendedKeyUsage.ClientAuth">
            <summary>TLS Web client authentication.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.ExtendedKeyUsage.CodeSigning">
            <summary>Code signing.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.ExtendedKeyUsage.EmailProtection">
            <summary>E-mail protection.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.ExtendedKeyUsage.OcspSigning">
            <summary>OCSPstamping.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.ExtendedKeyUsage.ServerAuth">
            <summary>TLS Web server authentication.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.ExtendedKeyUsage.TimeStamping">
            <summary>Timestamping.</summary>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.Pkcs.PrivateKeyFormat">
            <summary>
            Defines the private key file formats.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.PrivateKeyFormat.Pkcs8Base64">
            <summary>PKCS #8 in base-64 string format.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.PrivateKeyFormat.PuTTY">
            <summary>PuTTY format.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.PrivateKeyFormat.OpenSsh">
            <summary>SSLeay key format.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.PrivateKeyFormat.RawPkcs8">
            <summary>Raw PKCS #8 format.</summary>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.Pkcs.CertificateRevocationReason">
            <summary>
            Provides the reasons a certificate is in a revocation list.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.CertificateRevocationReason.Unspecified">
            <summary>Unspecified.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.CertificateRevocationReason.KeyCompromise">
            <summary>Key was compromised.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.CertificateRevocationReason.CACompromise">
            <summary>CA was compromised.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.CertificateRevocationReason.AffiliationChanged">
            <summary>Affiliation changed.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.CertificateRevocationReason.Superseded">
            <summary>Certificate was superseded.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.CertificateRevocationReason.CessationOfOperation">
            <summary>Operation was ceased.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.CertificateRevocationReason.CertificateHold">
            <summary>Certificate hold.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.CertificateRevocationReason.RemoveFromCrl">
            <summary>Remove from CRL.</summary>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.Pkcs.SignatureCertificateVerificationStatus">
            <summary>
            Signature validation status.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SignatureCertificateVerificationStatus.CertificateNotValid">
            <summary>Certificate is not valid.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SignatureCertificateVerificationStatus.CertificateNotAvailable">
            <summary>Certificate is not available.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SignatureCertificateVerificationStatus.UnsupportedDigestAlgorithm">
            <summary>A digest algorithm is not supported.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SignatureCertificateVerificationStatus.UnsupportedSignatureAlgorithm">
            <summary>A signature algorithm is not supported.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SignatureCertificateVerificationStatus.InvalidSignature">
            <summary>A signature is invalid.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SignatureCertificateVerificationStatus.InvalidKeyUsage">
            <summary>Invalid key usage. The certificate usage doesn't include message signing.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SignatureCertificateVerificationStatus.ContentTypeMismatch">
            <summary>Content type mismatch.</summary>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.Pkcs.SigningFlags">
            <summary>
            Defines the signing flags.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SigningFlags.NoSignedAttributes">
            <summary>The signature wont include any signed attributes. Not recommended.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SigningFlags.NoMicrosoftExtensions">
            <summary>The signature attributes wont include key Microsoft extensions.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SigningFlags.NoSMimeCapabilities">
            <summary>The signature attributes wont include S/MIME capabilities extensions.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SigningFlags.IgnoreCertificateUsageCheck">
            <summary>Ignore certificate usage check.</summary>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationResult">
            <summary>
            Describes the result of a signature verification operation.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationResult.VerificationStatus">
            <summary>
            Gets the certificate verification status flags.
            </summary>
            <value>Certificate validation status mask.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationResult.Status">
            <summary>
            Gets the status mask.
            </summary>
            <value>Status mask.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationResult.Valid">
            <summary>
            Gets a value indicating whether the signature was verified.
            </summary>
            <value>True if valid, false if not valid.</value>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier">
            <summary>
            Defines the type of the identifier of a subject. The subject can be identified by the certificate issuer and serial number or the subject key.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier.Issuer">
            <summary>
            Gets the <see cref="T:ComponentPro.Security.Certificates.DistinguishedName">issuer name</see> of the certificate if the issuer name and serial number were used to identify this <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier"/>; otherwise null reference.
            </summary>
            <value>Certificate issuer.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier.PublicKey">
            <summary>
            Gets the public key of the certificate if the public key was used to identify this <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier"/>; otherwise null reference.
            </summary>
            <value>Certificate public key.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier.PublicKeyAlgorithm">
            <summary>
            Gets the public key algorithm of the certificate if the public key was used to identify this <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier"/>; otherwise null reference.
            </summary>
            <value>Certificate public key algorithm.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier.SerialNumber">
            <summary>
            Gets the serial number of the certificate if the issuer name and serial number were used to identify this <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier"/>; otherwise null reference.
            </summary>
            <value>Certificate serial number.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier.SubjectKeyIdentifier">
            <summary>
            Gets the subject key identifier of the certificate if the subject key identifier was used to identify this <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier"/>; otherwise null reference.
            </summary>
            <value>Certificate subject key identifier.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier.Type">
            <summary>
            Retrieves the type of subject identifier. The subject can be identified by the certificate issuer and serial number or the subject key.
            </summary>
            <value>The type of the subject identifier.</value>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifierType">
            <summary>
            The SubjectIdentifierType enumeration defines the type of subject identifier.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifierType.Unknown">
            <summary>
            The type of subject identifier is unknown.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifierType.IssuerAndSerialNumber">
            <summary>
            The subject is identified by the certificate issuer and serial number.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifierType.SubjectKeyIdentifier">
            <summary>
            The subject is identified by the hash of the subject's public key. The hash algorithm used is determined by the signature algorithm suite in the subject's certificate.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifierType.PublicKey">
            <summary>
            The subject is identified by the subject's public key.
            </summary>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.SecuritySettings">
            <summary>
            Provides security settings.
            </summary>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.SecuritySettings.CreateRandomNumberGenerator">
            <summary>
            Creates an instance of default random number generator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.SecuritySettings.DecodeSignature(System.Byte[],ComponentPro.Security.Certificates.KeyAlgorithm)">
            <summary>
            Decodes a signature from a PKCS #7 form.
            </summary>
            <param name="encodedSignature">Signature.</param>
            <param name="keyAlgorithm">Key algorithm.</param>
            <returns>Decoded signature.</returns>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.SecuritySettings.EncodeSignature(System.Byte[],ComponentPro.Security.Certificates.KeyAlgorithm)">
            <summary>
            Encodes a signature to a PKCS #7 form.
            </summary>
            <param name="signature">Signature.</param>
            <param name="keyAlgorithm">Key algorithm.</param>
            <returns>Encoded signature.</returns>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.SecuritySettings.GetRandomBytes(System.Int32)">
            <summary>
            Returns an array of bytes with a cryptographically strong random sequence of values.
            </summary>
            <param name="count">Array length.</param>
            <returns>Array filled with random data.</returns>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.SecuritySettings.ForceManagedAes">
            <summary>
            Forces RijndaelManaged to be used even when AesCryptoServiceProvider is available.
            </summary>
            <value>True if RijndaelManaged is to be used instead of AesCryptoServiceProvider; false otherwise.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.SecuritySettings.FipsAlgorithmsOnly">
            <summary>
            Enables or disables an option that specifies whether only FIPS 140-2 compliant cryptographic algorithm providers are to be used.
            </summary>
            <value>True if only FIPS 140-2 compliant algorithms are to be used; false to allow all supported algorithms.</value>
            <remarks>
            In .NET 2.0 and higher, this option reflects the Windows OS settings unless explicitly set to a different value.
            </remarks>
        </member>
        <member name="T:ComponentPro.SortingOrder">
            <summary>
            Represents sorting order.
            </summary>
        </member>
        <member name="F:ComponentPro.SortingOrder.Ascending">
            <summary>
            Ascending sort order.
            </summary>
        </member>
        <member name="F:ComponentPro.SortingOrder.Descending">
            <summary>
            Descending sort order.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.ISocket">
            <summary>
            Defines a generalized socket API.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.ISocket.Close">
            <summary>
            Forces the <see cref="T:ComponentPro.Net.ISocket" /> connection to close.
            </summary>
            <remarks>
            <p>
            The application should call <see cref="M:ComponentPro.Net.ISocket.Shutdown(System.Net.Sockets.SocketShutdown)" /> before calling Close to ensure that
            all pending data is sent or received before the Socket is closed.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ISocket.Connect(System.Net.EndPoint)">
            <summary>
            Establishes a connection to a remote device.
            </summary>
            <param name="remoteEP">An <see cref="T:System.Net.IPEndPoint" /> that represents the remote device.</param>
            <remarks>
            The Connect method establishes a network connection to a device identified by the remoteEP
            parameter. Once the connection has been made, you can send data to the remote device with
            the Send method, or receive data from the remote device with the Receive method.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ISocket.Connect(System.String,System.Int32)">
            <summary>
            Establishes a connection to a remote device.
            </summary>
            <param name="serverName">The hostname (or IP address) of the remote device.</param>
            <param name="serverPort">The port number associated with the hostname.</param>
            <remarks>
            The Connect method establishes a network connection to a host identified by the serverName and serverPort
            parameters. Once the connection has been made, you can send data to the remote device with
            the Send method, or receive data from the remote device with the Receive method.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ISocket.Poll(System.Int32,ComponentPro.Net.SocketSelectMode)">
            <summary>
            Determines the status of the socket.
            </summary>
            <param name="microSeconds">Time to wait for a response, in microseconds.</param>
            <param name="mode">Select mode.</param>
            <returns>True if data can be sent or read or if the connection was closed.</returns>
        </member>
        <member name="M:ComponentPro.Net.ISocket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receives the specified amount of data from the connected <see cref="T:ComponentPro.Net.ISocket" /> into a specific location of the receive buffer and using the supplied flags.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The position in the buffer at which to store the received data.</param>
            <param name="count">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
            <returns>The number of bytes received.</returns>
        </member>
        <member name="M:ComponentPro.Net.ISocket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends the specified amount of data to the connected <see cref="T:ComponentPro.Net.ISocket" /> starting at the indicated location in the data and using the supplied flags.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="offset">The position in the data buffer to begin sending data.</param>
            <param name="count">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
            <returns>The number of bytes sent.</returns>
        </member>
        <member name="M:ComponentPro.Net.ISocket.Shutdown(System.Net.Sockets.SocketShutdown)">
            <summary>
            Disables sends and receives on the <see cref="T:ComponentPro.Net.ISocket" />.
            </summary>
            <param name="how">The <see cref="T:System.Net.Sockets.SocketShutdown" /> value specifying the operation that will no longer be allowed.</param>
            <remarks>
            See the reference for <see cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" /> for details.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.ISocket.Connected">
            <summary>
            Gets a value that indicates whether the <see cref="T:ComponentPro.Net.ISocket" /> is connected to a remote host as of the last Send or Receive operation. 
            </summary>
            <value>true if the <see cref="T:ComponentPro.Net.ISocket" /> is connected; otherwise, false.</value>
        </member>
        <member name="P:ComponentPro.Net.ISocket.LocalEndPoint">
            <summary>
            Gets the local endpoint.
            </summary>
            <value>The local endpoint that the <see cref="T:ComponentPro.Net.ISocket" /> is using for communications.</value>
            <remarks>
            The LocalEndPoint property contains the network connection information associated with the local network device.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.ISocket.RemoteEndPoint">
            <summary>
            Gets the remote endpoint.
            </summary>
            <value>The remote endpoint that the <see cref="T:ComponentPro.Net.ISocket" /> is using for communications.</value>
            <remarks>
            The RemoteEndPoint property gets the network connection information associated with
            either the remote host or the proxy server.
            RemoteEndPoint is set by the <see cref="T:ComponentPro.Net.ISocket" /> methods that establish a connection
            to a remote host.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.ISocket.Timeout">
            <summary>
            Gets or sets the length of time in milliseconds before the operation times out (specify -1 or 0 to indicate that the request does not time out which is default).
            </summary>
            <value>
            The length of time, in milliseconds, until the operation times out,
            or the value -1 or 0 to indicate that the request does not time out.
            Default is -1 (infinite).
            </value>
            <remarks>
            <p>
            The internal timeout counter is reset every time data is sent
            or received from to server.
            </p>
            <p>
            The <see cref="P:ComponentPro.Net.ISocket.Timeout" /> property only affects synchronous methods.
            </p>
            </remarks>
        </member>
        <member name="T:ComponentPro.Net.ForwardingRequestEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.SecureShellConnection.ForwardingRequest">ForwardingRequest</see> event.
            </summary>
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.SecureShellConnection.ForwardingRequest"/> event.
            </summary>[Serializable]
        </member>
        <member name="M:ComponentPro.Net.ForwardingRequestEventArgs.Accept">
            <summary>
            Accepts the request and returns the associated SSH channel.
            </summary>
            <summary>
            Accepts the request.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.ForwardingRequestEventArgs.Reject">
            <summary>
            Rejects the request.
            </summary>
            <summary>
            Rejects the request.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ForwardingRequestEventArgs.Handle">
            <summary>
            Forwarding handle.
            </summary>
            <summary>
            Gets the forwarding handle.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.NetworkException">
            <summary>
            The exception that is thrown when an error occurs while using a ComponentPro network component.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.NetworkException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.NetworkException" /> class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ComponentPro.Net.NetworkException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.NetworkException" /> class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
        </member>
        <member name="P:ComponentPro.Net.NetworkException.ProtocolCode">
            <summary>
            Gets the protocol error code, if available (usually when <see cref="P:ComponentPro.Net.NetworkException.Status" /> is set to ProtocolError).
            </summary>
            <value>Protocol error code.</value>
        </member>
        <member name="P:ComponentPro.Net.NetworkException.ProtocolMessage">
            <summary>
            Gets the protocol error message, if available (usually when <see cref="P:ComponentPro.Net.NetworkException.Status" /> is set to ProtocolError).
            </summary>
            <value>Protocol error message.</value>
        </member>
        <member name="P:ComponentPro.Net.NetworkException.Status">
            <summary>
            Gets error status.
            </summary>
            <value>One of the <see cref="T:ComponentPro.Net.NetworkExceptionStatus" /> values.</value>
        </member>
        <member name="T:ComponentPro.Net.ISocketFactory">
            <summary>
            Defines a method to create a an instance of the generalized <see cref="T:ComponentPro.Net.ISocket" /> interface.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.ISocketFactory.CreateSocket">
            <summary>
            Creates an unconnected instance of the generalized <see cref="T:ComponentPro.Net.ISocket" /> interface.
            </summary>
            <returns>An instance of <see cref="T:ComponentPro.Net.ISocket" />.</returns>
        </member>
        <member name="T:ComponentPro.Net.KeyboardInteractiveRequest">
            <summary>
            Represents one question/answer pair for the <see cref="E:ComponentPro.Net.SecureShellConnection.KeyboardInteractiveAuthentication">KeyboardInteractiveAuthentication</see> event.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.KeyboardInteractiveRequest.IsSecret">
            <summary>
            Gets a value indicating whether the response is considered secret and should not be displayed.
            </summary>
            <value>True if secret (do not display); false if not secret (safe to display).</value>
        </member>
        <member name="P:ComponentPro.Net.KeyboardInteractiveRequest.Prompt">
            <summary>
            Gets the authentication prompt (question).
            </summary>
            <value>Authentication prompt.</value>
        </member>
        <member name="P:ComponentPro.Net.KeyboardInteractiveRequest.Response">
            <summary>
            Gets or sets response to the prompt.
            </summary>
            <value>Response.</value>
        </member>
        <member name="T:ComponentPro.Net.KeyboardInteractiveRequestCollection">
            <summary>
            Collection of <see cref="T:ComponentPro.Net.KeyboardInteractiveRequest" /> objects.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.NetClient">
            <summary>
            A base class from which all ComponentPro session-based network protocol objects derive.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.NetClient.#ctor">
            <summary>
            Creates a new instance of <see cref="T:ComponentPro.Net.NetClient" /> object.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.NetClient.InstanceId">
            <summary>
            Gets instance ID (intended for logging purposes).
            </summary>
            <value>Instance ID.</value>
        </member>
        <member name="P:ComponentPro.Net.NetClient.IsAuthenticated">
            <summary>
            Gets a value indicating whether the session is authenticated.
            </summary>
            <value>True if authenticated; false otherwise.</value>
        </member>
        <member name="P:ComponentPro.Net.NetClient.IsConnected">
            <summary>
            Gets a value indicating whether the session is connected.
            </summary>
            <remarks>
            <p>
            This property returns the latest known state of the session. 
            When it returns false, the session was either never connected, or no longer connected. 
            When it returns true, the session was connected at the time of the last I/O operation.
            </p>
            <p>
            <b>Note:</b> There is no guarantee that the session is still connected even though
            <see cref="P:ComponentPro.Net.NetClient.IsConnected" /> returns true.
            </p>
            </remarks>
            <value>True if connected; false otherwise.</value>
        </member>
        <member name="P:ComponentPro.Net.NetClient.ServerName">
            <summary>
            Gets the server name, if available.
            </summary>
            <value>Server name, or null (Nothing in VB.NET).</value>
        </member>
        <member name="P:ComponentPro.Net.NetClient.ServerPort">
            <summary>
            Gets the server port, if available.
            </summary>
            <value>Server port, or 0.</value>
        </member>
        <member name="P:ComponentPro.Net.NetClient.UserName">
            <summary>
            Gets the authenticated user name, if available.
            </summary>
            <value>User name, or null (Nothing in VB.NET).</value>
        </member>
        <member name="P:ComponentPro.Net.NetClient.IsBusy">
            <summary>
            Gets a value indicating whether the server is busy.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.NetworkExceptionStatus">
            <summary>
            Defines status codes for the <see cref="T:ComponentPro.Net.NetworkException" /> class.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.UnknownError">
            <summary>
            An unclassifiable error occurred. This is the default value for <see cref="P:ComponentPro.Net.NetworkException.Status" />.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.OperationFailed">
            <summary> 
            The requested operation could not be completed. 
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.ConnectionFailed">
            <summary>
            The remote service point could not be contacted at the transport level.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.ConnectionClosed">
            <summary>
            The connection was prematurely closed.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.SocketError">
            <summary>
            The error at transport level occurred.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.UnknownHost">
            <summary>
            The name resolver service could not resolve the host name.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.ProtocolError">
            <summary>
            The response received from the server was complete but indicated a protocol-level error. For example, a protocol error such as 'file not found' would use this status.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.OperationAborted">
            <summary>
            The operation was aborted by the client.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.InvalidResponse">
            <summary>
            The server response was not a valid protocol response.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.Timeout">
            <summary>
            No response was received during the time-out period for a request.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.AsyncError">
            <summary>
            General exception in asynchronous call.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.PortRange">
            <summary>
            Represents a TCP/IP port range.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.PortRange.#ctor(System.Int32)">
            <summary>
            Creates a port range that includes a single port.
            </summary>
            <param name="port">Port</param>
        </member>
        <member name="M:ComponentPro.Net.PortRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a port range.
            </summary>
            <param name="portMin">Low bound of the range.</param>
            <param name="portMax">High bound of the range.</param>
        </member>
        <member name="M:ComponentPro.Net.PortRange.ToString">
            <summary>
            Returns the string representation of the port range.
            </summary>
            <returns>Port range.</returns>
        </member>
        <member name="F:ComponentPro.Net.PortRange.Any">
            <summary>
            Specifies a port range that makes the OS assign an available port number. 
            </summary>
        </member>
        <member name="T:ComponentPro.Net.WebProxyEx">
            <summary>
            Contains proxy settings for a socket connection.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor">
            <summary>
            Initializes an empty instance of the <see cref="T:ComponentPro.Net.WebProxyEx" /> class.
            </summary>
            <remarks>
            The default constructor initializes an empty instance of the <see cref="T:ComponentPro.Net.WebProxyEx" />
            class with the <see cref="P:ComponentPro.Net.WebProxyEx.ProxyType" /> property set to <see cref="P:ComponentPro.Net.WebProxyEx.ProxyType">ProxyType.None</see>.
            When the <see cref="P:ComponentPro.Net.WebProxyEx.ProxyType" /> is set to <see cref="P:ComponentPro.Net.WebProxyEx.ProxyType">ProxyType.None</see>, the <see cref="M:ComponentPro.Net.WebProxyEx.IsBypassed(System.Uri)" /> method
            returns <b>true</b>, and the <see cref="M:ComponentPro.Net.WebProxyEx.GetProxy(System.Uri)" /> method returns the destination address.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor(ComponentPro.Net.ProxyType,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.WebProxyEx" /> class.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor(ComponentPro.Net.ProxyType,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.WebProxyEx" /> class.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="username">A user name to submit to the proxy server for authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor(ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.Net.NetworkCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.WebProxyEx" /> class.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="authenticationMethod">Authentication method.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="credentials">A <see cref="T:System.Net.NetworkCredential" /> to submit to the proxy server for authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor(ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.Boolean,System.Net.NetworkCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.WebProxyEx" /> class.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="authenticationMethod">Authentication method.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="bypassOnLocal"><b>true</b> to bypass the proxy for local addresses; otherwise, <b>false</b>.</param>
            <param name="credentials">A <see cref="T:System.Net.NetworkCredential" /> to submit to the proxy server for authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor(ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.Boolean,System.String[],System.Net.NetworkCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.WebProxyEx" /> class.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="authenticationMethod">Authentication method.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="bypassOnLocal"><b>true</b> to bypass the proxy for local addresses; otherwise, <b>false</b>.</param>
            <param name="bypassList">An array of regular expression strings containing the URIs of the servers to bypass.</param>
            <param name="credentials">A <see cref="T:System.Net.NetworkCredential" /> to submit to the proxy server for authentication.</param>
            <remarks>Not supported by ComponentPro FTP for .NET Compact Framework.</remarks>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.Clone">
            <summary>
            Creates a copy of the <see cref="T:ComponentPro.Net.WebProxyEx" /> instance.
            </summary>
            <returns>A new <see cref="T:ComponentPro.Net.WebProxyEx" /> instance.</returns>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.CreateClone">
            <summary>
            Creates the true type of the clone.
            </summary>
            <returns>If overriden in derived class, return the derived class instance.</returns>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.GetProxy(System.Uri)">
            <summary>
            Returns the proxied URI for a destination.
            </summary>
            <param name="destination">The <see cref="T:System.Uri" /> of the requested FTP server.</param>
            <returns>The <see cref="T:System.Uri" /> of the FTP server if the resource is on the bypass list; otherwise, the <see cref="T:System.Uri" /> of the proxy.</returns>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.GetProxyAddress">
            <summary>
            Gets the proxy address.
            </summary>
            <returns>Returns the proxy address with the correct schema applied.</returns>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.GetProxyAddress(System.String,System.Int32,System.String)">
            <summary>
             Gets the proxy address.
            </summary>
            <param name="hostName">Host part of the address.</param>
            <param name="port">Port part of the address.</param>
            <param name="schema">Shema used in address.</param>
            <returns>Returns the proxy address with the correct schema applied.</returns>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.IsBypassed(System.Uri)">
            <summary>
            Indicates whether to use the proxy server for the specified host.
            </summary>
            <param name="host">The <see cref="T:System.Uri" /> of the host to check for proxy use.</param>
            <returns><b>true</b> if the proxy server should not be used for <i>host</i>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.IsBypassed(System.String,System.Int32)">
            <summary>
            Indicates whether to use the proxy server for the specified host.
            </summary>
            <param name="hostName">The host address to check for proxy use.</param>
            <param name="port">The port port.</param>
            <returns><b>true</b> if the proxy server should not be used for <i>host</i>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.ToString">
            <summary>
            Returns a string representation of this proxy.
            </summary>
            <returns>String representation of this proxy.</returns>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor(ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.WebProxyEx"/> 
            class with the specified type, hostname, port, and credentials
            with base authentification.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="authenticationMethod">Authentication method.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="domain">The domain name.</param>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <remarks>This constructor is for Medium Trust Environment.</remarks>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor(ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.WebProxyEx"/> class with the specified type, hostname, port, bypass setting, list of URIs to bypass, and credentials, with base authentification.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="authenticationMethod">Authentication method.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="bypassOnLocal"><b>true</b> to bypass the proxy for local addresses; otherwise, <b>false</b>.</param>
            <param name="domain">The domain name.</param>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <remarks>This constructor is for Medium Trust Environment.</remarks>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor(ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.Boolean,System.String[],System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.WebProxyEx"/> class with the specified type, hostname, port, bypass setting, list of URIs to bypass, and credentials.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="authenticationMethod">Authentication method.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="bypassOnLocal"><b>true</b> to bypass the proxy for local addresses; otherwise, <b>false</b>.</param>
            <param name="bypassList">An array of regular expression strings containing the URIs of the servers to bypass.</param>
            <param name="domain">The domain name.</param>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <remarks>Not supported by ComponentPro FTP for .NET Compact Framework.</remarks>
            <remarks>This constructor is for Medium Trust Environment.</remarks>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.AuthenticationMethod">
            <summary>
            Gets or sets the authentication method to use for HTTP CONNECT proxy.
            NTLM authentication is only supported by some HTTP CONNECT proxies.
            </summary>
            <value>An authentication method.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.BypassArrayList">
            <summary>
            Gets a list of addresses that do not use the proxy server.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList" /> containing a list of regular expressions that describe URIs that will not use the proxy server when accessed.</value>
            <remarks>Not supported by ComponentPro FTP for .NET Compact Framework.</remarks>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.BypassList">
            <summary>
            Gets or sets an array of addresses that do not use the proxy server.
            </summary>
            <value>An array containing a list of regular expressions that describe URIs that will not use the proxy server when accessed.</value>
            <remarks>Not supported by ComponentPro FTP for .NET Compact Framework.</remarks>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.BypassProxyOnLocal">
            <summary>
            Gets or sets a value indicating whether to bypass the proxy server for local addresses.
            </summary>
            <value><b>true</b> to bypass the proxy server for local addresses; otherwise, <b>false</b>. The default value is <b>false</b>.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.Credentials">
            <summary>
            Gets or sets the credentials to submit to the proxy server for authentication.
            Password authentication is not supported by SOCKS4 and SOCKS4a.
            </summary>
            <value>An <see cref="T:System.Net.ICredentials" /> containing the credentials to submit to the proxy server for authentication.</value>
            <remarks>Only credentials of type <see cref="T:System.Net.NetworkCredential" /> are supported.</remarks>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.Domain">
            <summary>
            Gets or sets the domain to submit to the proxy server for authentication.
            </summary>
            <value>A domain to submit to the proxy server for authentication.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.Encoding">
            <summary>
            Gets or sets the <see cref="T:System.Text.Encoding">Encoding</see> to use to encode and decode requests and responses.
            </summary>
            <value>The <see cref="T:System.Text.Encoding">Encoding</see> to use to encode and decode requests and responses. Default is <see cref="T:System.Text.Encoding">Encoding.Default</see>.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.Server">
            <summary>
            Gets or sets the hostname of the proxy server.
            </summary>
            <value>The hostname of the proxy server.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.LocalPortRange">
            <summary>
            Gets or sets the local TCP port range to which to bind the connections.
            </summary>
            <value>The port range.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.Password">
            <summary>
            Gets or sets the password to submit to the proxy server for authentication.
            Password authentication is not supported by SOCKS4 and SOCKS4a.
            </summary>
            <value>A password to submit to the proxy server for authentication.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.Port">
            <summary>
            Gets or sets the port of the proxy server.
            </summary>
            <value>The port of the proxy server.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.ProxyType">
            <summary>
            Gets or sets the type of the proxy server.
            </summary>
            <value>The type of the proxy server.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.ReceiveBufferSize">
            <summary>
            Gets or sets local TCP socket receive buffer size.
            </summary>
            <value>Receive buffer size.</value>
            <summary>
            Gets or sets the receive buffer size.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.SendBufferSize">
            <summary>
            Gets or sets local TCP socket send buffer size.
            </summary>
            <value>Send buffer size.</value>
            <summary>
            Gets or sets the send buffer size.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.SendRetryTimeout">
            <summary>
            Specifies how long (in milliseconds) to continue try sending data before giving up on slow networks. Set it to 0 or -1 means to use the same value as <see cref="T:ComponentPro.Net.ProxySocket" />'s <see cref="P:ComponentPro.Net.ProxySocket.Timeout" /> property.
            </summary>
            <value></value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.UserName">
            <summary>
            Gets or sets the username to submit to the proxy server for authentication.
            </summary>
            <value>A username to submit to the proxy server for authentication.</value>
        </member>
        <member name="T:ComponentPro.Net.ProxyHttpConnectAuthMethod">
            <summary>
            HTTP CONNECT proxy server authentication method.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxyHttpConnectAuthMethod.Basic">
            <summary>
            Basic authentication.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxyHttpConnectAuthMethod.Ntlm">
            <summary>
            NTLM authentication. This can only be used for HTTP CONNECT proxies (see <see cref="T:ComponentPro.Net.ProxyType" /> enum and <see cref="P:ComponentPro.Net.ProxySocket.ProxyType" /> property.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxyHttpConnectAuthMethod.Digest">
            <summary>
            Digest authentication. This can only be used for HTTP CONNECT proxies (see <see cref="T:ComponentPro.Net.ProxyType" /> enum and <see cref="P:ComponentPro.Net.ProxySocket.ProxyType" /> property.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.ProxySocket">
            <summary>
            Implements the subset of the Berkeley sockets interface (or the <see cref="T:System.Net.Sockets.Socket" /> class)
            and adds the ability to connect through Socks4/Socks5 or HTTP proxies.
            </summary>
            <remarks>
            <p>
            This class is suitable for extending your client applications with the ability
            to connect through proxies.
            </p>
            <p>
            This class is limited to operations supported by proxies - it is not a
            replacement for the <see cref="T:System.Net.Sockets.Socket" />. This means
            it is perfect for writing clients, but useless for writing servers.
            </p>
            <p>
            Only connection-oriented protocols are supported at the moment
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.#ctor">
            <summary>
            Initializes an empty instance of the <see cref="T:ComponentPro.Net.ProxySocket" /> class.
            </summary>
            <remarks>
            The default constructor initializes an instance of the <see cref="T:ComponentPro.Net.ProxySocket" />
            class with the <see cref="P:ComponentPro.Net.ProxySocket.ProxyType" /> property set to <see cref="P:ComponentPro.Net.ProxySocket.ProxyType">ProxyType.None</see>.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxySocket" /> class based on the specified socket.
            </summary>
            <param name="socket">Socket to base the <see cref="T:ComponentPro.Net.ProxySocket" /> instance on.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.#ctor(ComponentPro.Net.WebProxyEx)">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.ProxySocket" /> class with parameters provided in the supplied <see cref="T:ComponentPro.Net.WebProxyEx" /> object.
            </summary>
            <param name="proxy">Contains parameters used to initialize this <see cref="T:ComponentPro.Net.ProxySocket" />.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.Accept">
            <summary>
            Accepts an incoming connection.
            </summary>
            <returns>An instance of connected <see cref="T:ComponentPro.Net.ProxySocket" />.</returns>
            <remarks>
            <p>
            A call to Accept is only allowed after a call to <see cref="M:ComponentPro.Net.ProxySocket.Listen(ComponentPro.Net.ISocket)" /> or <see cref="M:ComponentPro.Net.ProxySocket.BeginListen(ComponentPro.Net.ISocket,System.AsyncCallback,System.Object)" />/<see cref="M:ComponentPro.Net.ProxySocket.EndListen(System.IAsyncResult)" /> methods.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.BeginAccept(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to accept an incoming connection.
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous request.
            </returns>
            <remarks>
            <p>
            A call to Accept is only allowed after a call to <see cref="M:ComponentPro.Net.ProxySocket.Listen(ComponentPro.Net.ISocket)" /> or <see cref="M:ComponentPro.Net.ProxySocket.BeginListen(ComponentPro.Net.ISocket,System.AsyncCallback,System.Object)" />/<see cref="M:ComponentPro.Net.ProxySocket.EndListen(System.IAsyncResult)" /> methods.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a connection to a network device.
            </summary>
            <param name="remoteEP">An <see cref="T:System.Net.IPEndPoint" /> that represents the remote device.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous connection.
            </returns>
            <remarks>
            The Connect method establishes a network connection to a host identified by the remoteEP
            parameter. Once the connection has been made, you can send data to the remote device with
            the Send method, or receive data from the remote device with the Receive method.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a connection to a network device.
            </summary>
            <param name="serverName">The hostname (or IP address) of the remote device.</param>
            <param name="serverPort">The port number associated with the hostname.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous connection.
            </returns>
            <remarks>
            The Connect method establishes a network connection to a host identified by the serverName and serverPort
            parameters. Once the connection has been made, you can send data to the remote device with
            the Send method, or receive data from the remote device with the Receive method.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.BeginListen(ComponentPro.Net.ISocket,System.AsyncCallback,System.Object)">
            <summary>
            Starts an asynchronous request to listen for an incoming connection using the specified control socket as a base.
            </summary>
            <param name="controlSocket">The control socket to use as a base.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous request.
            </returns>
            <remarks>
            <p>
            This method differs from <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />:
            <ul>
            <li>A control connection socket needs to be specified. This might be needed by a proxy server
            socket.</li>
            <li>Only a single incoming connection is accepted.</li>
            </ul>
            To accept an incoming connection, use the <see cref="M:ComponentPro.Net.ProxySocket.Accept" /> or <see cref="M:ComponentPro.Net.ProxySocket.BeginAccept(System.AsyncCallback,System.Object)" /> method.
            </p>
            <p>
            <b>Note:</b> When connected through a HTTP proxy server, this method will fail.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            Begins to asynchronously receive data from a connected <see cref="T:ComponentPro.Net.ProxySocket" />.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The position in the buffer at which to store the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.
            </returns>
            <remarks>
            <p>
            Prior to receiving data, the socket must be connected using either a call to <see cref="M:ComponentPro.Net.ProxySocket.Connect(System.Net.EndPoint)" /> method or a call to <see cref="M:ComponentPro.Net.ProxySocket.Listen(ComponentPro.Net.ISocket)" /> and <see cref="M:ComponentPro.Net.ProxySocket.Accept" /> methods.
            </p>
            <p>
            The BeginReceive method starts asynchronously reading data from a ProxySocket.
            You should create a callback method that implements the AsyncCallback delegate.
            This callback method should use the EndReceive method to complete the asynchronous operation.
            See the .NET Framework SDK Reference for more information on asynchronous methods.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            Sends data asynchronously to a connected <see cref="T:ComponentPro.Net.ProxySocket" />.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="offset">The position in the data buffer to begin sending data.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that references the asynchronous send.
            </returns>
            <remarks>
            <p>
            Prior to sending data, the socket must be connected using either a call to <see cref="M:ComponentPro.Net.ProxySocket.Connect(System.Net.EndPoint)" /> method or a call to <see cref="M:ComponentPro.Net.ProxySocket.Listen(ComponentPro.Net.ISocket)" /> and <see cref="M:ComponentPro.Net.ProxySocket.Accept" /> methods.
            </p>
            <p>
            The BeginSend method starts asynchronously sending data through a ProxySocket.
            You should create a callback method that implements the AsyncCallback delegate.
            This callback method should use the EndSend method to complete the asynchronous operation.
            See the .NET Framework SDK Reference for more information on asynchronous methods.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.Close">
            <summary>
            Forces the <see cref="T:ComponentPro.Net.ProxySocket" /> connection to close.
            </summary>
            <remarks>
            <p>
            The application should call <see cref="M:ComponentPro.Net.ProxySocket.Shutdown(System.Net.Sockets.SocketShutdown)" /> before calling Close to ensure that
            all pending data is sent or received before the Socket is closed.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.Connect(System.Net.EndPoint)">
            <summary>
            Establishes a connection to a remote device.
            </summary>
            <param name="remoteEP">An <see cref="T:System.Net.IPEndPoint" /> that represents the remote device.</param>
            <remarks>
            The Connect method establishes a network connection to a device identified by the remoteEP
            parameter. Once the connection has been made, you can send data to the remote device with
            the Send method, or receive data from the remote device with the Receive method.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.Connect(System.String,System.Int32)">
            <summary>
            Establishes a connection to a remote device.
            </summary>
            <param name="serverName">The hostname (or IP address) of the remote device.</param>
            <param name="serverPort">The port number associated with the hostname.</param>
            <remarks>
            The Connect method establishes a network connection to a host identified by the serverName and serverPort
            parameters. Once the connection has been made, you can send data to the remote device with
            the Send method, or receive data from the remote device with the Receive method.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.EndAccept(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to accept an incoming connection.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>An instance of connected <see cref="T:ComponentPro.Net.ProxySocket" />.</returns>
            <remarks>
            The EndAccept method completes a request to accept a connection that was started with the <see cref="M:ComponentPro.Net.ProxySocket.BeginAccept(System.AsyncCallback,System.Object)" /> method.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.EndConnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous connection request.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user-defined data.</param>
            <remarks>
            The EndConnect method completes a request to accept a connection that was started with the <see cref="M:ComponentPro.Net.ProxySocket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)" /> method.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.EndListen(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to listen for an incoming connection.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>The endpoint to which a connection from a remote host can be made.</returns>
            <remarks>
            The EndListen method completes a request to listen for a connection that was started with the <see cref="M:ComponentPro.Net.ProxySocket.BeginListen(ComponentPro.Net.ISocket,System.AsyncCallback,System.Object)" /> method.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.EndReceive(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous read.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user-defined data.</param>
            <returns>The number of bytes received.</returns>
            <remarks>
            The EndReceive method completes a request to accept a connection that was started with the <see cref="M:ComponentPro.Net.ProxySocket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> method.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.EndSend(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous send.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user-defined data.</param>
            <returns>The number of bytes sent.</returns>
            <remarks>
            The EndSend method completes a request to accept a connection that was started with the <see cref="M:ComponentPro.Net.ProxySocket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> method.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.GetAddressBytes(System.Net.IPAddress)">
            <summary>
            Returns an array of bytes of the IP address of the instance of IPAddress.
            </summary>
            <param name="address">An instance of IPAddress.</param>
            <returns>An array of address bytes.</returns>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.GetSessionStatus">
            <summary>
            Gets a value that indicates whether the <see cref="T:ComponentPro.Net.ProxySocket" /> is currently connected to a remote host.
            </summary>
            <value>true if the <see cref="T:ComponentPro.Net.ProxySocket" /> is connected; otherwise, false.</value>
            <remarks>
            <p>
            As long as there is still data available to be read from the socket, this method will indicate that
            the <see cref="T:ComponentPro.Net.ProxySocket" /> is connected, even though technically it might have already be considered
            disconnected based on one's point of view.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.IsValidHost(System.String)">
            <summary>
            Checks whether the host address is a valid hostname or IP address.
            </summary>
            <param name="host">Host name or IP address.</param>
            <returns>True if valid, false if otherwise.</returns>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.Listen(ComponentPro.Net.ISocket)">
            <summary>
            Starts a request to listen for an incoming connection using the specified control socket as a base.
            </summary>
            <param name="controlSocket">The control socket to use as a base.</param>
            <returns>The endpoint to which a connection from a remote host can be made.</returns>
            <remarks>
            <p>
            This method differs from <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />:
            <ul>
            <li>A control connection socket needs to be specified. This might be needed by a proxy server
            socket.</li>
            <li>Only a single incoming connection is accepted.</li>
            </ul>
            To accept an incoming connection, use the <see cref="M:ComponentPro.Net.ProxySocket.Accept" /> or <see cref="M:ComponentPro.Net.ProxySocket.BeginAccept(System.AsyncCallback,System.Object)" /> method.
            </p>
            <p>
            <b>Note:</b> When connected through a HTTP proxy server, this method will fail.
            </p>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.Poll(System.Int32,ComponentPro.Net.SocketSelectMode)">
            <summary>
            Determines the status of the socket.
            </summary>
            <param name="microSeconds">Time to wait for a response, in microseconds.</param>
            <param name="mode">Select mode.</param>
            <returns>True if data can be sent or read or if the connection was closed.</returns>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.Receive(System.Byte[])">
            <summary>
            Receives data from a connected <see cref="T:ComponentPro.Net.ProxySocket" />.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <returns>The number of bytes received.</returns>
            <remarks>
            Prior to receiving data, the socket must be connected using either a call to <see cref="M:ComponentPro.Net.ProxySocket.Connect(System.Net.EndPoint)" /> method or a call to <see cref="M:ComponentPro.Net.ProxySocket.Listen(ComponentPro.Net.ISocket)" /> and <see cref="M:ComponentPro.Net.ProxySocket.Accept" /> methods.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)">
            <summary>
            Receives data from a connected <see cref="T:ComponentPro.Net.ProxySocket" /> using the supplied flags.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
            <returns>The number of bytes received.</returns>
            <remarks>
            Prior to receiving data, the socket must be connected using either a call to <see cref="M:ComponentPro.Net.ProxySocket.Connect(System.Net.EndPoint)" /> method or a call to <see cref="M:ComponentPro.Net.ProxySocket.Listen(ComponentPro.Net.ISocket)" /> and <see cref="M:ComponentPro.Net.ProxySocket.Accept" /> methods.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receives the specified amount of data from a connected <see cref="T:ComponentPro.Net.ProxySocket" /> using the supplied flags.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
            <returns>The number of bytes received.</returns>
            <remarks>
            Prior to receiving data, the socket must be connected using either a call to <see cref="M:ComponentPro.Net.ProxySocket.Connect(System.Net.EndPoint)" /> method or a call to <see cref="M:ComponentPro.Net.ProxySocket.Listen(ComponentPro.Net.ISocket)" /> and <see cref="M:ComponentPro.Net.ProxySocket.Accept" /> methods.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receives the specified amount of data from a connected <see cref="T:ComponentPro.Net.ProxySocket" /> into a specific location of the receive buffer and using the supplied flags.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The position in the buffer at which to store the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
            <returns>The number of bytes received.</returns>
            <remarks>
            Prior to receiving data, the socket must be connected using either a call to <see cref="M:ComponentPro.Net.ProxySocket.Connect(System.Net.EndPoint)" /> method or a call to <see cref="M:ComponentPro.Net.ProxySocket.Listen(ComponentPro.Net.ISocket)" /> and <see cref="M:ComponentPro.Net.ProxySocket.Accept" /> methods.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.Send(System.Byte[])">
            <summary>
            Sends data to a connected <see cref="T:ComponentPro.Net.ProxySocket" />.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <returns>The number of bytes sent.</returns>
            <remarks>
            Prior to sending data, the socket must be connected using either a call to <see cref="M:ComponentPro.Net.ProxySocket.Connect(System.Net.EndPoint)" /> method or a call to <see cref="M:ComponentPro.Net.ProxySocket.Listen(ComponentPro.Net.ISocket)" /> and <see cref="M:ComponentPro.Net.ProxySocket.Accept" /> methods.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.Send(System.Byte[],System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data to a connected <see cref="T:ComponentPro.Net.ProxySocket" /> using the supplied flags.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
            <returns>The number of bytes sent.</returns>
            <remarks>
            Prior to sending data, the socket must be connected using either a call to <see cref="M:ComponentPro.Net.ProxySocket.Connect(System.Net.EndPoint)" /> method or a call to <see cref="M:ComponentPro.Net.ProxySocket.Listen(ComponentPro.Net.ISocket)" /> and <see cref="M:ComponentPro.Net.ProxySocket.Accept" /> methods.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends the specified amount of data to a connected <see cref="T:ComponentPro.Net.ProxySocket" /> using the supplied flags.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
            <returns>The number of bytes sent.</returns>
            <remarks>
            Prior to sending data, the socket must be connected using either a call to <see cref="M:ComponentPro.Net.ProxySocket.Connect(System.Net.EndPoint)" /> method or a call to <see cref="M:ComponentPro.Net.ProxySocket.Listen(ComponentPro.Net.ISocket)" /> and <see cref="M:ComponentPro.Net.ProxySocket.Accept" /> methods.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends the specified amount of data to a connected <see cref="T:ComponentPro.Net.ProxySocket" /> starting at the indicated location in the data and using the supplied flags.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="offset">The position in the data buffer to begin sending data.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</param>
            <returns>The number of bytes sent.</returns>
            <remarks>
            Prior to sending data, the socket must be connected using either a call to <see cref="M:ComponentPro.Net.ProxySocket.Connect(System.Net.EndPoint)" /> method or a call to <see cref="M:ComponentPro.Net.ProxySocket.Listen(ComponentPro.Net.ISocket)" /> and <see cref="M:ComponentPro.Net.ProxySocket.Accept" /> methods.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.Shutdown(System.Net.Sockets.SocketShutdown)">
            <summary>
            Disables sends and receives on the <see cref="T:ComponentPro.Net.ProxySocket" />.
            </summary>
            <param name="how">The <see cref="T:System.Net.Sockets.SocketShutdown" /> value specifying the operation that will no longer be allowed.</param>
            <remarks>
            See the reference for <see cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" /> for details.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.ToEndPoint(System.String,System.Int32)">
            <summary>
            Converts the host address and port into an IP endpoint. If the host address is not an IP address, returns null.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Host port.</param>
            <returns>IP endpoint.</returns>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.ToEndPoint(System.Net.IPHostEntry,System.Int32)">
            <summary>
            Chooses the most appropriate IP endpoint to use from the host entry.
            </summary>
            <param name="hostEntry">Host entry.</param>
            <param name="port">Port.</param>
            <returns>IP endpoint.</returns>
        </member>
        <member name="M:ComponentPro.Net.ProxySocket.#ctor(ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="proxyType">The proxy type.</param>
            <param name="authenticationMethod">The authentication method.</param>
            <param name="host">The proxy host.</param>
            <param name="port">The proxy port.</param>
            <param name="userName">The proxy username.</param>
            <param name="password">The proxy password.</param>
            <param name="domain">The domain.</param>
        </member>
        <member name="P:ComponentPro.Net.ProxySocket.AuthenticationMethod">
            <summary>
            Gets the authentication method to use for HTTP CONNECT proxy.
            NTLM authentication is only supported by some HTTP CONNECT proxies.
            </summary>
            <value>An authentication method.</value>
        </member>
        <member name="P:ComponentPro.Net.ProxySocket.Available">
            <summary>
            Gets the amount of data that has been received from the network and is available to be read.
            </summary>
            <value>
            The number of bytes of data that has been received from the network and is available
            to be read, or 0 if no data is available.
            </value>
            <remarks>
            After the socket has been closed, this property will still indicate there is data to be read
            if there is 1 byte or more data in the receive buffer. If there is no more data to be read,
            a value of 0 will be returned.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.ProxySocket.Connected">
            <summary>
            Gets a value that indicates whether the <see cref="T:ComponentPro.Net.ProxySocket" /> is connected to a remote host as of the last Send or Receive operation. 
            </summary>
            <value>true if the <see cref="T:ComponentPro.Net.ProxySocket" /> is connected; otherwise, false.</value>
            <remarks>
            <p>
            If you need to determine the current state of the connection, use the <see cref="M:ComponentPro.Net.ProxySocket.GetSessionStatus">method</see>.
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.ProxySocket.Domain">
            <summary>
            Gets the domain to submit to the proxy server for authentication.
            </summary>
            <value>A domain to submit to the proxy server for authentication.</value>
        </member>
        <member name="P:ComponentPro.Net.ProxySocket.Handle">
            <summary>
            Gets the operating system handle for the inner <see cref="T:System.Net.Sockets.Socket" />.
            </summary>
            <value>An <see cref="T:System.IntPtr" /> representing the operating system handle for the <see cref="T:System.Net.Sockets.Socket" />.</value>
        </member>
        <member name="P:ComponentPro.Net.ProxySocket.Information">
            <summary>
            Gets socket information on the underlying socket object.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ProxySocket.LocalEndPoint">
            <summary>
            Gets the local endpoint.
            </summary>
            <value>The local endpoint that the <see cref="T:ComponentPro.Net.ProxySocket" /> is using for communications.</value>
            <remarks>
            The LocalEndPoint property contains the network connection information associated with the local network device.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.ProxySocket.LocalPortRange">
            <summary>
            Gets the local TCP port range to which to bind the connections.
            </summary>
            <value>The port range.</value>
        </member>
        <member name="P:ComponentPro.Net.ProxySocket.Password">
            <summary>
            Gets the username to submit to the proxy server for authentication.
            Password authentication is not supported by SOCKS4 and SOCKS4a.
            </summary>
            <value>A username to submit to the proxy server for authentication.</value>
        </member>
        <member name="P:ComponentPro.Net.ProxySocket.ProxyHost">
            <summary>
            Gets the hostname of the proxy server.
            </summary>
            <value>The hostname of the proxy server.</value>
        </member>
        <member name="P:ComponentPro.Net.ProxySocket.ProxyPort">
            <summary>
            Gets the port of the proxy server.
            </summary>
            <value>The port of the proxy server.</value>
        </member>
        <member name="P:ComponentPro.Net.ProxySocket.ProxyType">
            <summary>
            Gets the type of the proxy server.
            </summary>
            <value>The type of the proxy server.</value>
        </member>
        <member name="P:ComponentPro.Net.ProxySocket.ReceiveBufferSize">
            <summary>
            Gets or sets receive buffer size. Must be set before calling the <see cref="M:ComponentPro.Net.ProxySocket.Connect(System.String,System.Int32)" /> method.
            </summary>
            <value>Receive buffer size.</value>
        </member>
        <member name="P:ComponentPro.Net.ProxySocket.RemoteEndPoint">
            <summary>
            Gets the remote endpoint.
            </summary>
            <value>The remote endpoint that the <see cref="T:ComponentPro.Net.ProxySocket" /> is using for communications.</value>
            <remarks>
            The RemoteEndPoint property gets the network connection information associated with
            either the remote host or the proxy server.
            RemoteEndPoint is set by <see cref="T:ComponentPro.Net.ProxySocket" /> methods that establish a connection
            to a remote host.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.ProxySocket.SendBufferSize">
            <summary>
            Gets or sets send buffer size. Must be set before calling the <see cref="M:ComponentPro.Net.ProxySocket.Connect(System.String,System.Int32)" /> method.
            </summary>
            <value>Send buffer size.</value>
        </member>
        <member name="P:ComponentPro.Net.ProxySocket.Socket">
            <summary>
            Gets the internal <see cref="T:System.Net.Sockets.Socket" /> value.
            </summary>
            <value>The internal <see cref="T:System.Net.Sockets.Socket" /> value.</value>
        </member>
        <member name="P:ComponentPro.Net.ProxySocket.Timeout">
            <summary>
            Gets or sets the length of time before the operation times out (specify -1 or 0 to indicate that the request does not time out which is default).
            </summary>
            <value>
            The length of time, in milliseconds, until the operation times out,
            or the value -1 or 0 to indicate that the request does not time out.
            Default is -1 (infinite).
            </value>
            <remarks>
            <p>
            The internal timeout counter is reset every time data is sent
            or received from to server.
            </p>
            <p>
            The <see cref="P:ComponentPro.Net.ProxySocket.Timeout" /> property only affects synchronous methods.
            </p>
            <p>
            Minimal value is 500. Setting this to a value lower than 500 will set it to 500.
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.ProxySocket.UserName">
            <summary>
            Gets the username to submit to the proxy server for authentication.
            </summary>
            <value>A username to submit to the proxy server for authentication.</value>
        </member>
        <member name="T:ComponentPro.Net.ProxySocketException">
            <summary>
            The exception that is thrown when a proxy error or socket error occurs.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.ProxySocketException.#ctor(System.Net.Sockets.SocketException)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxySocketException" /> class with the reference to the socket exception that is the cause of this exception.
            </summary>
            <param name="e">The socket exception that is the cause of the current exception.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxySocketException.#ctor(System.String,ComponentPro.Net.ProxySocketExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxySocketException" /> class with the specified error message and status.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="status">One of the <see cref="T:ComponentPro.Net.ProxySocketExceptionStatus" /> values.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxySocketException.#ctor(System.String,ComponentPro.Net.ProxySocketExceptionStatus,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxySocketException" /> class with the specified error message, status,
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="status">One of the <see cref="T:ComponentPro.Net.ProxySocketExceptionStatus" /> values.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxySocketException.GetSocketExceptionMessage(System.Net.Sockets.SocketException)">
            <summary>
            Returns an exception message for the supplied SocketException.
            </summary>
            <param name="error">Socket exception.</param>
            <returns>Exception message.</returns>
        </member>
        <member name="P:ComponentPro.Net.ProxySocketException.ErrorCode">
            <summary>
            Gets the error code associated with this exception if the error status is <see cref="T:ComponentPro.Net.ProxySocketExceptionStatus">SocketError</see> or <see cref="T:ComponentPro.Net.ProxySocketExceptionStatus">ProtocolError</see>. Returns 0 otherwise.
            </summary>
            <value>An integer error code associated with this exception (or 0).</value>
        </member>
        <member name="P:ComponentPro.Net.ProxySocketException.Status">
            <summary>
            Gets the status of the error.
            </summary>
            <value>One of the <see cref="T:ComponentPro.Net.ProxySocketExceptionStatus" /> values.</value> 
        </member>
        <member name="T:ComponentPro.Net.ProxySocketExceptionStatus">
            <summary>
            Defines status codes for the <see cref="T:ComponentPro.Net.ProxySocketException" /> class.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.ConnectionFailed">
            <summary>
            The remote service point could not be contacted at the transport level.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.ConnectionClosed">
            <summary>
            The connection was prematurely closed
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.SocketError">
            <summary>
            The error at transport level occurred.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.UnknownHost">
            <summary>
            The name resolver service could not resolve the host name.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.ProtocolError">
            <summary>
            The response received from the server was complete but indicated a protocol-level error. For example, an FTP protocol error such as 550 Access Denied would use this status.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.UnknownProxyHost">
            <summary>
            The name resolver service could not resolve the proxy host name.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.ReceiveFailure">
            <summary>
            A complete response was not received from the remote server.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.UnknownError">
            <summary>
            An unclassifiable error occurred. This is the default value for <see cref="P:ComponentPro.Net.ProxySocketException.Status" />.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.InvalidResponse">
            <summary>
            The server response was not a valid response.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.AsyncError">
            <summary>
            General exception in asynchronous call.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.NotConnected">
            <summary>
            The socket is not connected.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.SendRetryTimeout">
            <summary>
            An incomplete block of data was sent and the operation timed out.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.Timeout">
            <summary>
            Operation timed out.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.ProxyType">
            <summary>
            Type of proxy to use to connect to the remote machine.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxyType.None">
            <summary>No proxy. Direct connection.</summary>
        </member>
        <member name="F:ComponentPro.Net.ProxyType.Socks4">
            <summary>Connection through Socks4 proxy. This is a legacy proxy protocol that does not support password authentication.</summary>
        </member>
        <member name="F:ComponentPro.Net.ProxyType.Socks4A">
            <summary>Connection through Socks4A proxy (capable of resolving domain names). This is a legacy proxy protocol that does not support password authentication.</summary>
        </member>
        <member name="F:ComponentPro.Net.ProxyType.Socks5">
            <summary>Connection through Socks5 proxy.</summary>
        </member>
        <member name="F:ComponentPro.Net.ProxyType.HttpConnect">
            <summary>Connection through HTTP proxy using the CONNECT method.</summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellAuthenticationMethod">
            <summary>
            Authentication method.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellAuthenticationMethod.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellAuthenticationMethod.Password">
            <summary>
            Authentication method "password".
            </summary>		
        </member>
        <member name="F:ComponentPro.Net.SecureShellAuthenticationMethod.KeyboardInteractive">
            <summary>
            Authentication method "keyboard-interactive".
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellAuthenticationMethod.PublicKey">
            <summary>
            Authentication method "publickey".
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellAuthenticationMethod.GssapiWithMic">
            <summary>
            Authentication method "gssapi-with-mic".
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellAuthenticationMethod.Any">
            <summary>
            Any method.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellChangePasswordResult">
            <summary>
            Defines password change results.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChangePasswordResult.Success">
            <summary>
            Password has been changed and the user has been authenticated. It is not necessary to call the Authenticate method now.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChangePasswordResult.ChangedButNotAuthenticated">
            <summary>
            Password has been changed, but the user has not been authenticated. It is still necessary to call the Authenticate method.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChangePasswordResult.Failure">
            <summary>
            The password has not been changed. Either password changing was not supported, or the old password was bad.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellChannel">
            <summary>
            Represents an SSH channel.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.Close">
            <summary>
            Closes the current channel.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.Dispose">
            <summary>
            Implementation of IDisposable.Dispose()
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.GetAvailable">
            <summary>
            Gets the number of bytes available in the receive buffer. 
            If no data is available, the method will process any pending incoming packets.
            </summary>
            <returns>Number of bytes available.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.PassEnvironmentVariable(System.String,System.String)">
            <summary>
            Passes an environment variable to the shell/command to be started later.
            </summary>
            <param name="name">Variable name.</param>
            <param name="value">Variable value.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.Poll(System.Int32,ComponentPro.Net.SocketSelectMode)">
            <summary>
            Determines the status of the socket.
            </summary>
            <param name="microSeconds">Time to wait for a response, in microseconds.</param>
            <param name="mode">Select mode.</param>
            <returns>True if data can be sent or read or if the connection was closed.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.Receive(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Receives data send by the server through this channel.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The offset to the array at which to place the received data.</param>
            <param name="count">Number of bytes to receive.</param>
            <returns>The number of bytes received.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.RequestExec(System.String)">
            <summary>
            Requests an execution of the specified command.
            </summary>
            <param name="command">Command.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.RequestPseudoTerminal">
            <summary>
            Requests an 80x25 vt100 pseudo-terminal.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.RequestPseudoTerminal(System.String,System.Int32,System.Int32)">
            <summary>
            Requests a pseudo-terminal.
            </summary>
            <param name="terminal">Terminal name, e.g. "vt100".</param>
            <param name="width">Number of columns.</param>
            <param name="height">Number of rows.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.RequestShell">
            <summary>
            Requests a shell.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.RequestSubsystem(System.String)">
            <summary>
            Requests a specified subsystem.
            </summary>
            <param name="subsystem">Subsystem name, such as "sftp".</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends data to the server through this channel.
            </summary>
            <param name="buffer">The storage location of the data to be sent.</param>
            <param name="offset">The offset to the array at which the data starts.</param>
            <param name="count">Number of bytes to send.</param>
            <returns>The number of bytes sent.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.SendBreak(System.Int32)">
            <summary>
            Sends a break request to the server. This may or may not have any effect.
            </summary>
            <param name="breakLength">Break length, in milliseconds (if supported by the underlying channel).</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.SendEof">
            <summary>
            Sends EOF (end-of-file) indicator to the server. No further data should be sent after this.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.SetTerminalSize(System.Int32,System.Int32)">
            <summary>
            Sets a new terminal size.
            </summary>
            <param name="width">Number of columns.</param>
            <param name="height">Number of rows.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.Shutdown">
            <summary>
            Closes the current channel and does not wait for closure confirmation.
            </summary>
            <summary>
            Shutdowns the channel.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.ToSocket">
            <summary>
            Creates an ISocket representation of this channel.
            </summary>
            <returns>An ISocket.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.ToString">
            <summary>
            Returns a string representation of this channel.
            </summary>
            <returns>Local channel ID.</returns>
        </member>
        <member name="P:ComponentPro.Net.SecureShellChannel.Available">
            <summary>
            Gets the number of bytes available in the receive buffer.
            </summary>
            <returns>Number of bytes available.</returns>
            <remarks>Unlike the <see cref="M:ComponentPro.Net.SecureShellChannel.GetAvailable" /> method, this property will not process any pending incoming packets.</remarks>
        </member>
        <member name="P:ComponentPro.Net.SecureShellChannel.ExitStatus">
            <summary>
            Gets the channel exit status, if available. Otherwise, it returns null.
            </summary>
            <value>Channel exit status.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellChannel.ExtendedDataMode">
            <summary>
            Gets or sets the value indicating how to tread extended channel data.
            </summary>
            <value>Extended data mode.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellChannel.State">
            <summary>
            Gets the state of this channel.
            </summary>
            <value>Channel state.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellChannel.TerminalHeight">
            <summary>
            Gets the terminal height.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellChannel.TerminalWidth">
            <summary>
            Gets the terminal width.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellChannel.Type">
            <summary>
            Gets the type of this channel.
            </summary>
            <value>Channel type.</value>
        </member>
        <member name="E:ComponentPro.Net.SecureShellChannel.ExtendedDataReceived">
            <summary>
            Occurs when extended data is received from the server.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellChannelExitStatus">
            <summary>
            Channel exit status.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellChannelExitStatus.CoreDumped">
            <summary>
            Gets a value indicating whether the process failed with a core dump.
            </summary>
            <value>True if core-dumped; false otherwise.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellChannelExitStatus.ErrorMessage">
            <summary>
            Gets the process error message if available; or null.
            </summary>
            <value>Process error message.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellChannelExitStatus.ExitCode">
            <summary>
            Gets the process exit code.
            </summary>
            <value>Process exit code.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellChannelExitStatus.SignalName">
            <summary>
            Gets the process signal name if available; or null.
            </summary>
            <value>Process signal name.</value>
        </member>
        <member name="T:ComponentPro.Net.SecureShellChannelExtendedDataMode">
            <summary>
            Specifies how to tread extended channel data.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChannelExtendedDataMode.Discard">
            <summary>
            Discard extended data.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChannelExtendedDataMode.TreatAsNormalData">
            <summary>
            Treat extended data as normal data.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellChannelState">
            <summary>
            SSH channel state.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChannelState.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChannelState.Connected">
            <summary>
            Connected.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChannelState.Closed">
            <summary>
            Closed.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellChannelType">
            <summary>
            SSH channel type.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChannelType.Session">
            <summary>
            Session.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChannelType.DirectTcpIp">
            <summary>
            Direct TCP/IP tunnel.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChannelType.ForwardedTcpIp">
            <summary>
            Forwarder TCP/IP tunnel.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellCipher">
            <summary>
            Represents an SSH cipher.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellCipher.ToString">
            <summary>
            Returns a description of the cipher.
            </summary>
            <returns>Description of the cipher.</returns>
        </member>
        <member name="P:ComponentPro.Net.SecureShellCipher.HostKeyAlgorithm">
            <summary>
            Gets the host key algorithm used during key negotiation.
            </summary>
            <value>Host key algorithm.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellCipher.IncomingCompressionEnabled">
            <summary>
            Gets the value indicating whether incoming compression is used.
            </summary>
            <value>True if incoming compression is enabled; false otehrwise.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellCipher.IncomingEncryptionAlgorithm">
            <summary>
            Gets the active encryption algorithm.
            </summary>
            <value>Active encryption algorithm.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellCipher.IncomingMacAlgorithm">
            <summary>
            Gets the active message authentication code (MAC) algorithm.
            </summary>
            <value>Active MAC algorithm.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellCipher.KeyExchangeAlgorithm">
            <summary>
            Gets the key exchange algorithm used during key negotiation.
            </summary>
            <value>Key exchange algorithm.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellCipher.OutgoingCompressionEnabled">
            <summary>
            Gets the value indicating whether outgoing compression is used.
            </summary>
            <value>True if outgoing compression is enabled; false otehrwise.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellCipher.OutgoingEncryptionAlgorithm">
            <summary>
            Gets the active encryption algorithm.
            </summary>
            <value>Active encryption algorithm.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellCipher.OutgoingMacAlgorithm">
            <summary>
            Gets the active message authentication code (MAC) algorithm.
            </summary>
            <value>Active MAC algorithm.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellCipher.SignatureHashAlgorithm">
            <summary>
            Gets the hash algorithm used for host key signature.
            </summary>
            <value>Hash algorithm.</value>
            <summary>
            Specifies the signature hash algorithm.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellConfig">
            <summary>
            Security parameters.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConfig.Clone">
            <summary>
            Returns a shallow copy of the current parameters.
            </summary>
            <returns>A shallow copy of current parameters.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConfig.GetEncryptionAlgorithms">
            <summary>
            Gets a list of allowed encryption algorithms IDs and their order. See <see cref="M:ComponentPro.Net.SecureShellConfig.SetEncryptionAlgorithms(System.String[])" /> for more info.
            </summary>
            <returns>List of encryption algorithm IDs.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConfig.SetEncryptionAlgorithms(System.String[])">
            <summary>
            Specifies a list of allowed encryption algorithms IDs and their order.
            <see cref="P:ComponentPro.Net.SecureShellConfig.EncryptionAlgorithms" /> and <see cref="P:ComponentPro.Net.SecureShellConfig.EncryptionModes" /> still apply.
            Setting to null (Nothing in VB.NET) or an empty list specifies that the default list and order is to be used.
            See the remarks for a list of supported algorithm IDs.
            </summary>
            <param name="algorithmIds">List of algorithm IDs</param>
            <remarks>
            Currently, supported algorithms are:
            "aes256-ctr", "aes192-ctr", "aes128-ctr", "aes256-cbc",
            "aes192-cbc", "aes128-cbc", "3des-ctr", "3des-cbc",
            "twofish256-ctr", "twofish192-ctr", "twofish128-ctr",
            "twofish256-cbc", "twofish192-cbc", "twofish128-cbc",
            "twofish-cbc", "blowfish-ctr", "blowfish-cbc", "arcfour256",
            "arcfour128", "arcfour"
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.AuthenticationMethods">
            <summary>
            Gets or sets the group of allowed authentication methods.
            </summary>
            <value>The group of allowed authentication methods.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.EnableCompression">
            <summary>
            On clients, gets or sets a value indicating whether to prefer communication compression if supported by the server.<br />
            On servers, gets or sets a value indicating whether to enable or disable communication compression.
            </summary>
            <value>True to prefer or enable compression; False to not prefer or not enable compression (default).</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.EncryptionAlgorithms">
            <summary>
            Gets or sets the group of allowed encryption algorithms.
            </summary>
            <value>The group of allowed algorithms.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.EncryptionModes">
            <summary>
            Gets or sets the group of allowed encryption modes.
            </summary>
            <value>The group of allowed modes.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.HostKeyAlgorithms">
            <summary>
            Gets or sets the group of allowed host key (server key) algorithms.
            </summary>
            <value>The group of allowed algorithms.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.KeyExchangeAlgorithms">
            <summary>
            Gets or sets the group of allowed key exchange algorithms.
            </summary>
            <value>The group of allowed algorithms.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.MacAlgorithms">
            <summary>
            Get or sets the allowed message authentication code algorithms.
            </summary>
            <value>The group of allowed algorithms.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.MinimumDiffieHellmanKeySize">
            <summary>
            Gets or sets the minumum allowed size (in bits) of the ephemeral Diffie-Hellman prime.
            </summary>
            <remarks>
            This is only used by client sockets.
            </remarks>
            <summary>
            Get or sets the minimum Diffie-Hellman key size.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.MinimumRsaKeySize">
            <summary>
            Gets or sets the minimum RSA Key size.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.PreferredHostKeyAlgorithm">
            <summary>
            Gets or sets the preferred host key (server key) algorithm.
            </summary>
            <value>Preferred host key algorithm. Only one value can be specified.</value>
        </member>
        <member name="T:ComponentPro.Net.SecureShellConnection">
            <summary>
            Represents a client-side SSH 2.0 session.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellConnection.DefaultPort">
            <summary>
            Default SSH port (22).
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:ComponentPro.Net.SecureShellConnection" /> class.
            </summary>
            <remarks>
            The default constructor initializes an instance of the <see cref="T:ComponentPro.Net.SecureShellConnection" />.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes an instance of the <see cref="T:ComponentPro.Net.SecureShellConnection" /> class with the specified base socket.
            </summary>
            <param name="socket">Base socket.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.#ctor(ComponentPro.Net.ISocket)">
            <summary>
            Initializes an instance of the <see cref="T:ComponentPro.Net.SecureShellConnection" /> class with the specified base socket.
            </summary>
            <param name="socket">Base socket.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.AcceptTcpIpForward(ComponentPro.Net.SecureShellForwardingHandle)">
            <summary>
            Accepts a forwarded incoming connection. If there is no incoming connection in the queue, waits indefinitely.
            </summary>
            <param name="handle">Incoming tunnel handle returned by <see cref="M:ComponentPro.Net.SecureShellConnection.StartTcpIpForward(System.String,System.Int32)" />.</param>
            <returns>SSH channel.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.AcceptTcpIpForward(ComponentPro.Net.SecureShellForwardingHandle,System.Int32)">
            <summary>
            Accepts a forwarded incoming connection.
            </summary>
            <param name="handle">Incoming tunnel handle returned by <see cref="M:ComponentPro.Net.SecureShellConnection.StartTcpIpForward(System.String,System.Int32)" />.</param>
            <param name="timeout">
            Specifies an amount of time (in milliseconds) to wait for incoming connections. Use -1 to specify an infinite time and 1 to just return
            as soon as the current queue status is checked, or a higher value to wait for the specified amount of time.
            </param>
            <returns>SSH channel.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Authenticate(System.String)">
            <summary>
            Authenticates to the SSH server interactively.
            Uses <see cref="E:ComponentPro.Net.SecureShellConnection.AuthenticationRequest" /> to ask for credentials.
            </summary>
            <param name="userName">Username (optional).</param>
            <summary>
            Authenticates the specified user.
            </summary>
            <param name="userName">The user to authenticate.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Authenticate(System.String,ComponentPro.Net.SecureShellPrivateKey)">
            <summary>
            Authenticates to the SSH server using a username and an RSA or DSA private key.
            </summary>
            <param name="userName">Username.</param>
            <param name="privateKey">RSA or DSA private key for key-based authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Authenticate(System.String,System.String)">
            <summary>
            Authenticates to the SSH server using a username and password.
            </summary>
            <param name="userName">Username.</param>
            <param name="password">Password.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Authenticate(System.String,System.String,ComponentPro.Net.SecureShellPrivateKey)">
            <summary>
            Authenticates to the SSH server using a username and an RSA or DSA private key and a password.
            </summary>
            <param name="userName">Username.</param>
            <param name="password">Password.</param>
            <param name="privateKey">RSA or DSA private key for key-based authentication.</param>
            <remarks>This method is supported by GlobalScape SFTP server.</remarks>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Changes the specified user's password on the SSH server and authenticates.
            </summary>
            <param name="userName">Username.</param>
            <param name="oldPassword">Old password.</param>
            <param name="newPassword">New password.</param>
            <returns>Password change result.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Connect(System.String)">
            <summary>
            Establishes a connection to port 22 of an SSH server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Connect(System.Net.EndPoint)">
            <summary>
            Establishes a connection to an SSH server.
            </summary>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint" /> that represents the remote device.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Connect(System.String,System.Int32)">
            <summary>
            Establishes a connection to an SSH server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (e.g. 22).</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Disconnect">
            <summary>
            Terminates the SSH session.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Dispose">
            <summary>
            Disposes the <see cref="T:ComponentPro.Net.SecureShellConnection" /> object and the underlying socket object.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.KeepAlive">
            <summary>
            Sends an SSH_MSG_IGNORE packet to the server.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Negotiate">
            <summary>
            Requests and/or performs a key exchange.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.OpenChannel(ComponentPro.Net.SecureShellChannelType,System.Int32)">
            <summary>
            Opens an SSH channel of the specified type.
            </summary>
            <param name="type">Channel type.</param>
            <param name="bufferSize">Buffer size.</param>
            <returns>SSH channel.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.OpenSession">
            <summary>
            Opens an SSH session channel.
            </summary>
            <returns>SSH channel.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.OpenTcpIpTunnel(System.Net.IPEndPoint)">
            <summary>
            Opens an outgoing TCP/IP tunnel to the specified remote endpoint.
            </summary>
            <param name="remoteEP">Remote endpoint.</param>
            <returns>SSH channel.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.OpenTcpIpTunnel(System.String,System.Int32)">
            <summary>
            Opens an outgoing TCP/IP tunnel to the specified remote endpoint.
            </summary>
            <param name="hostname">Hostname.</param>
            <param name="port">Port.</param>
            <returns>SSH channel.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.StartTcpIpForward(System.String,System.Int32)">
            <summary>
            Starts incoming TCP/IP tunnel on the specified IP address and port at the SSH server.
            </summary>
            <param name="address">Remote IP address to bind to. Most SSH installations only allow 127.0.0.1.</param>
            <param name="port">Remote port to bind to. Set this to 0 to get a random port automatically.</param>
            <returns>A forwarding handle.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.StopTcpIpForward(ComponentPro.Net.SecureShellForwardingHandle)">
            <summary>
            Stops an incoming TCP/IP tunnel.
            </summary>
            <param name="handle">Incoming tunnel handle returned by <see cref="M:ComponentPro.Net.SecureShellConnection.StartTcpIpForward(System.String,System.Int32)" />.</param>
            <returns>A forwarding handle.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.ToSocketFactory">
            <summary>
            Gets a socket factory that creates socket tunneled through this SSH session.
            </summary>
            <returns>A socket factory.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.OnForwardingRequest(System.Object,ComponentPro.Net.ForwardingRequestEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.SecureShellConnection.ForwardingRequest"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.ForwardingRequestEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.OnPasswordChangeRequest(System.Object,ComponentPro.Net.PasswordChangeRequestEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.SecureShellConnection.PasswordChangeRequest"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.PasswordChangeRequestEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.OnBannerReceived(System.Object,ComponentPro.Net.BannerEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.SecureShellConnection.Banner"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.BannerEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.OnHostKeyVerifying(System.Object,ComponentPro.Net.HostKeyVerifyingEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.SecureShellConnection.HostKeyVerifying"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.HostKeyVerifyingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.OnKeyboardInteractiveAuthentication(System.Object,ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.SecureShellConnection.KeyboardInteractiveAuthentication"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.Cipher">
            <summary>
            Gets the active cipher.
            </summary>
            <value>Active cipher.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.Encoding">
            <summary>
            Gets or sets the <see cref="T:System.Text.Encoding">Encoding</see> to use to encode and decode command parameters and server responses.
            </summary>
            <value>The <see cref="T:System.Text.Encoding">Encoding</see> to use to encode and decode command parameters and server responses. Default is <see cref="T:System.Text.Encoding">Encoding.UTF8</see>.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.Fingerprint">
            <summary>
            Gets the server public key fingerprint.
            </summary>
            <value>Server fingerprint.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.Information">
            <summary>
            Gets socket information on the underlying socket object.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.IsAuthenticated">
            <summary>
            Gets a value indicating whether the session is authenticated.
            </summary>
            <value>True if authenticated; false otherwise.</value>		
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.IsConnected">
            <summary>
            Gets a value indicating whether the session is connected.
            </summary>
            <remarks>
            <p>
            This property returns the latest known state of the session. 
            When it returns false, the session was either never connected, or no longer connected. 
            When it returns true, the session was connected at the time of the last I/O operation.
            </p>
            <p>
            <b>Note:</b> There is no guarantee that the session  is still connected even though
            <see cref="P:ComponentPro.Net.SecureShellConnection.IsConnected" /> returns true.
            </p>
            </remarks>
            <value>True if connected; false otherwise.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.LocalEndPoint">
            <summary>
            Gets the local endpoint.
            </summary>
            <value>The local endpoint that the <see cref="T:ComponentPro.Net.SecureShellConnection" /> is using for communications.</value>
            <remarks>
            The LocalEndPoint property contains the network connection information associated with the local network device.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.Options">
            <summary>
            Gets or sets SecureShellConnection options.
            </summary>
            <value>SecureShellConnection options.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.Parameters">
            <summary>
            Gets or sets the security parameters of the current socket.
            </summary>
            <value>The security parameters of the current socket.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.RemoteEndPoint">
            <summary>
            Gets the remote endpoint.
            </summary>
            <value>The remote endpoint that the <see cref="T:ComponentPro.Net.SecureShellConnection" /> is using for communications.</value>
            <remarks>
            The RemoteEndPoint property gets the network connection information associated with
            the remote host.
            RemoteEndPoint is set by <see cref="T:ComponentPro.Net.SecureShellConnection" /> methods that establish a connection
            to a remote host.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.ServerIdentification">
            <summary>
            Gets the server's identification string it returns after connected.
            </summary>
            <value>Server's identification string.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.ServerKey">
            <summary>
            Gets the server public key.
            </summary>
            <value>Server public key.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.Socket">
            <summary>
            Gets the internal <see cref="T:ComponentPro.Net.ISocket" /> value.
            </summary>
            <value>The internal <see cref="T:ComponentPro.Net.ISocket" /> value.</value>
            <remarks>Use with care.</remarks>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.State">
            <summary>
            Gets the current session state.
            </summary>
            <value>Session state.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.Timeout">
            <summary>
            Gets or sets the length of time before the operation times out (specify -1 or 0 to indicate that the request does not time out).
            </summary>
            <value>
            The length of time, in milliseconds, until the operation times out,
            or the value -1 or 0 to indicate that the request does not time out.
            Default is 60000 (60 seconds).
            </value>
            <remarks>
            <p>
            The internal timeout counter is reset every time data is sent
            or received from to server. This also means that data transfers only
            time out after x milliseconds of inactivity, not after x milliseconds
            from the start of the transfer.
            </p>
            <p>
            Minimal value is 1000. Setting this to a value lower than 1000 will set it to 1000.
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.InvokeFromCurrentThreads">
            <summary>
            Gets a value indicating whether to raise events from the current thread or 
            to use a <see cref="T:System.Threading.SynchronizationContext" /> object available when an asynchronous operation was started.
            The default value is <c>false</c>.
            </summary>
            <value><c>true</c> to raise events directly from the current working thread; 
            <c>false</c> to raise them using a <see cref="T:System.Threading.SynchronizationContext" /> object.</value>
            <remarks>
            Synchronous methods always raise events from the current working thread.
            </remarks>
        </member>
        <member name="E:ComponentPro.Net.SecureShellConnection.Banner">
            <summary>
            Occurs when a banner message is received from the server.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.SecureShellConnection.HostKeyVerifying">
            <summary>
            Occurs when a fingerprint is received from the server and needs to be validated.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.SecureShellConnection.KeyboardInteractiveAuthentication">
            <summary>
            Occurs when an authentication request is received from the server that cannot be answered programatically.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.SecureShellConnection.PasswordChangeRequest">
            <summary>
            Occurs when user's password need to be changed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.SecureShellConnection.ForwardingRequest">
            <summary>
            Occurs when a forwarding request received.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.IsBusy">
            <summary>
            Gets a value indicating whether the server is busy.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellEncryptionAlgorithm">
            <summary>
            Encryption algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionAlgorithm.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionAlgorithm.RC4">
            <summary>
            RC4.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionAlgorithm.TripleDES">
            <summary>
            TripleDES.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionAlgorithm.AES">
            <summary>
            AES.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionAlgorithm.Blowfish">
            <summary>
            Blowfish.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionAlgorithm.Twofish">
            <summary>
            Twofish.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionAlgorithm.Any">
            <summary>
            Any algorithm.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellEncryptionMode">
            <summary>
            Encryption mode.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionMode.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionMode.CBC">
            <summary>
            CBC mode.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionMode.CTR">
            <summary>
            CTR mode.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionMode.Any">
            <summary>
            Any mode.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellException">
            <summary>
            The exception that is thrown when an SSH error occurs.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.SecureShellException" /> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.SecureShellException" /> class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.SecureShellException" /> class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellException.#ctor(System.String,System.Exception,ComponentPro.Net.SecureShellExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.SecureShellException" /> class with the specified error message, status, 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
            <param name="status">One of the <see cref="T:ComponentPro.Net.SecureShellExceptionStatus" /> values.</param>
        </member>
        <member name="P:ComponentPro.Net.SecureShellException.Status">
            <summary>
            Gets the exception status.
            </summary>
            <value>One of the <see cref="T:ComponentPro.Net.SecureShellExceptionStatus" /> values.</value>
        </member>
        <member name="T:ComponentPro.Net.SecureShellExceptionStatus">
            <summary>
            Defines status codes for the <see cref="T:ComponentPro.Net.SecureShellException" /> class.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.UnknownError">
            <summary>
            An unclassifiable error occurred. This is the default value for <see cref="P:ComponentPro.Net.SecureShellException.Status" />.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.ConnectionFailed">
            <summary>
            The remote service point could not be contacted at the transport level.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.ConnectionClosed">
            <summary>
            The connection was prematurely closed.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.ProtocolError">
            <summary>
            The response received from the server was complete but indicated a protocol-level error.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.UnexpectedMessage">
            <summary>
            The response received from the server was complete but unexpected.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.Timeout">
            <summary>
            No response was received during the time-out period for a request.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.OperationFailed">
            <summary>
            The requested operation could not be completed.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.PasswordChangeRequired">
            <summary>
            Password needs to be changed.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.SocketError">
            <summary>
            The error at transport level occurred.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellFingerprint">
            <summary>
            Represents the server public key fingerprint.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellFingerprint.Compute(System.Byte[])">
            <summary>
            Computes a fingerprint of the specified key.
            </summary>
            <param name="key">Key data.</param>
            <returns>Fingerprint.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellFingerprint.FromBase64String(System.String)">
            <summary>
            Computes a fingerprint of the specified Base64-encoded key.
            </summary>
            <param name="encodedKey">Base64-encoded key data.</param>
            <returns>Fingerprint.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellFingerprint.ToArray">
            <summary>
            Returns the fingerprint as a byte array.
            </summary>
            <returns>Fingerprint as a byte array.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellFingerprint.ToArray(ComponentPro.Security.Certificates.SignatureHashAlgorithm)">
            <summary>
            Returns the fingerprint produced using the specified algorithm as a byte array.
            </summary>
            <param name="algorithm">Algorithm to be used to compute the fingerprint.</param>
            <returns>Fingerprint as a byte array.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellFingerprint.ToString">
            <summary>
            Returns a string representation of the fingerprint.
            </summary>
            <returns>A string representation of the fingerprint.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellFingerprint.ToString(ComponentPro.Security.Certificates.SignatureHashAlgorithm)">
            <summary>
            Returns a string representation of the fingerprint produced using the specified algorithm.
            </summary>
            <param name="algorithm">Algorithm to be used to compute the fingerprint.</param>
            <returns>A string representation of the fingerprint.</returns>
        </member>
        <member name="T:ComponentPro.Net.SecureShellForwardingHandle">
            <summary>
            Represents a single TCP forwarding rule.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellForwardingHandle.Address">
            <summary>
            Gets the listening IP address.
            </summary>
            <value>Listening IP address.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellForwardingHandle.Port">
            <summary>
            Gets the listening port.
            </summary>
            <value>Listening port.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellForwardingHandle.Tag">
            <summary>
            Custom tag.
            </summary>
            <summary>
            Gets or sets the handle's tag.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellGssApiCredentials">
            <summary>
            Encapsulates GSSAPI credentials and preferred authentication mechanisms.
            </summary>
            <remarks>
            Only supported on Windows platforms.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.SecureShellGssApiCredentials.#ctor">
            <summary>
            Creates a new <see cref="T:ComponentPro.Net.SecureShellGssApiCredentials" /> instance.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellGssApiCredentials.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:ComponentPro.Net.SecureShellGssApiCredentials" /> instance and initializes it with the specified credentials.
            </summary>
            <param name="userName">The user name. If it is set to null ('Nothing' in VB.NET), integrated authentication (single sign-on) will be used.</param>
            <param name="domain">User's domain. If it is set to null ('Nothing' in VB.NET), it will be determined from the user name. If not available, the default domain will be used.</param>
            <param name="password">User's password.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellGssApiCredentials.Clone">
            <summary>
            Creates a copy of this <see cref="T:ComponentPro.Net.SecureShellGssApiCredentials" /> instance.
            </summary>
            <returns>A copy of this <see cref="T:ComponentPro.Net.SecureShellGssApiCredentials" /> instance.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellGssApiCredentials.GetMechanisms">
            <summary>
            Gets a list of allowed GSSAPI authentication mechanism, in order of preference.
            </summary>
            <returns>List of GSSAPI authentication methods.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellGssApiCredentials.SetMechanisms(ComponentPro.Net.SecureShellGssApiMechanisms[])">
            <summary>
            Sets a list of allowed GSSAPI authentication mechanism, in order of preference.
            </summary>
            <param name="mechanisms">Allowed GSSAPI authentication mechanism in order of preference.</param>
            <remarks>Setting an empty list will cause the default settings to be used.</remarks>
        </member>
        <member name="P:ComponentPro.Net.SecureShellGssApiCredentials.AllowDelegation">
            <summary>
            Indicates whether the authentication token supports delegation.
            This enables the server to use the context to authenticate to other servers as the client.
            </summary>
            <remarks>Only supported by Kerberos.</remarks>
        </member>
        <member name="P:ComponentPro.Net.SecureShellGssApiCredentials.Domain">
            <summary>
            Gets the user's domain. If it is set to null ('Nothing' in VB.NET), it will be determined from the user name. If not available, the default domain will be used.
            </summary>
            <value>Domain.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellGssApiCredentials.Password">
            <summary>
            Gets the user's password.
            </summary>
            <value>Password.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellGssApiCredentials.TargetName">
            <summary>
            Target name. This should contain the full SSH server's hostname.
            </summary>
            <value>Target name.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellGssApiCredentials.UserName">
            <summary>
            Gets the user name. If it is set to null ('Nothing' in VB.NET), integrated authentication (single sign-on) will be used.
            </summary>
            <value>User name.</value>
        </member>
        <member name="T:ComponentPro.Net.SecureShellGssApiMechanisms">
            <summary>
            Defines supported GSSAPI mechanisms.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellGssApiMechanisms.Ntlm">
            <summary>
            NTLM.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellGssApiMechanisms.KerberosV5">
            <summary>
            Kerberos v5.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellHostKeyAlgorithm">
            <summary>
            Host key algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellHostKeyAlgorithm.None">
            <summary>
            No algorithm
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellHostKeyAlgorithm.RSA">
            <summary>
            RSA.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellHostKeyAlgorithm.DSS">
            <summary>
            DSS.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellHostKeyAlgorithm.Certificate">
            <summary>
            X509 certificate.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellHostKeyAlgorithm.Any">
            <summary>
            Any algorithm.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellKeyExchangeAlgorithm">
            <summary>
            Key exchange algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellKeyExchangeAlgorithm.None">
            <summary>
            No algorithm
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellKeyExchangeAlgorithm.DiffieHellmanGroup1SHA1">
            <summary>
            Diffie-Hellman (Oakley Group 2) with SHA1.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellKeyExchangeAlgorithm.DiffieHellmanGroup14SHA1">
            <summary>
            Diffie-Hellman (Oakley Group 14) with SHA1.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellKeyExchangeAlgorithm.DiffieHellmanGroupExchangeSHA1">
            <summary>
            Diffie-Hellman (Group Exchange) with SHA1.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellKeyExchangeAlgorithm.DiffieHellmanGroupExchangeSHA256">
            <summary>
            Diffie-Hellman (Group Exchange) with SHA256.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellKeyExchangeAlgorithm.Any">
            <summary>
            Any algorithm.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellMacAlgorithm">
            <summary>
            MAC algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellMacAlgorithm.None">
            <summary>
            No MAC algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellMacAlgorithm.MD5">
            <summary>
            MD5 algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellMacAlgorithm.SHA1">
            <summary>
            SHA-1 algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellMacAlgorithm.SHA256">
            <summary>
            SHA-256 algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellMacAlgorithm.SHA512">
            <summary>
            SHA-512 algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellMacAlgorithm.Any">
            <summary>
            Any algorithm.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellPrivateKey">
            <summary>
            Represents SSH RSA or DSA private key. Private key data also includes the public key.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellPublicKey">
            <summary>
            Represents SSH RSA or DSA public key.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.#ctor(System.Byte[])">
            <summary>
            Loads a SSH2 public key from the specified raw data.
            </summary>
            <param name="data">Raw private key data.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.#ctor(System.String)">
            <summary>
            Loads a SSH2 public key from the specified file.
            </summary>
            <param name="path">A path to file with the public key.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.#ctor(System.IO.Stream)">
            <summary>
            Loads a SSH2 public key from the specified stream.
            </summary>
            <param name="input">A stream with the public key.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Creates a certificate-based SSH key for use with SSH/SFTP client that support X509 certificate authentication.
            </summary>
            <param name="certificate">X509 certificate.</param>
            <summary>
            Creates a certificate-based SSH key for use with SSH/SFTP servers that support X509 certificate authentication.
            </summary>
            <param name="certificate">X509 certificate.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.Equals(System.Object)">
            <summary>
            Determines whether the specified object is the same key as the specified key.
            </summary>
            <param name="obj">Object to compare with the current key.</param>
            <returns>True if the objects are the same; false otherwise.</returns>
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.Equals(ComponentPro.Net.SecureShellPublicKey)">
            <summary>
            Determines whether the specified key is the same key as the specified key.
            </summary>
            <param name="key">Key to compare with the current key.</param>
            <returns>True if the keys are the same; false otherwise.</returns>
            <summary>
            Determines whether the specified key is equal to the current object.
            </summary>
            <param name="key">The key to compare with the current object.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.GetCert">
            <summary>
            Returns the underlying X509 certificate.
            </summary>
            <summary>
            Gets the inner certificate.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.GetDSAParameters">
            <summary>
            Gets the DSA parameters for a DSA key. May only be used for DSA public keys.
            </summary>
            <returns>DSA paramaters.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.GetHashCode">
            <summary>
            A hash function for this type.
            </summary>
            <returns>A hash code for the current key.</returns>
            <summary>
            A hash code for the current object.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.GetPublicKey">
            <summary>
            Gets the public key in SSH format.
            </summary>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.GetRSAParameters">
            <summary>
            Gets the RSA parameters for a RSA key. May only be used for RSA public keys.
            </summary>
            <returns>RSA paramaters.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.SavePublicKey(System.String)">
            <summary>
            Saves the public key into the supplied stream in Base64-encoded SSH2 public key format.
            </summary>
            <param name="path">A path to a file to which to save the public key.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.SavePublicKey(System.IO.Stream)">
            <summary>
            Saves the public key into the supplied stream in Base64-encoded SSH2 public key format.
            </summary>
            <param name="output">A stream to which to save the public key.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.SavePublicKey(System.String,ComponentPro.Net.SecureShellPublicKeyFormat)">
            <summary>
            Saves the public key into the supplied stream in the specified format.
            </summary>
            <param name="path">A path to a file to which to save the public key.</param>
            <param name="format">Public key file format.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.SavePublicKey(System.IO.Stream,ComponentPro.Net.SecureShellPublicKeyFormat)">
            <summary>
            Saves the public key into the supplied stream in the specified format.
            </summary>
            <param name="output">A stream to which to save the public key.</param>
            <param name="format">Public key file format.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.VerifySignature(System.Byte[],System.Byte[],ComponentPro.Security.Certificates.SignatureHashAlgorithm)">
            <summary>
            Verifies an SSH authentication signature for the specified hash.
            </summary>
            <param name="hash">Hash.</param>
            <param name="signature">Signature to verify.</param>
            <param name="algorithm">Signature algorithm (only SHA1 is supported at the moment).</param>
            <returns>SSH authentication signature.</returns>
        </member>
        <member name="P:ComponentPro.Net.SecureShellPublicKey.Comment">
            <summary>
            Gets or sets the key comment. The comment is used while saving in some formats.
            </summary>
            <value>Key comment.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellPublicKey.Fingerprint">
            <summary>
            Gets the public key fingerprint.
            </summary>
            <value>Public key fingerprint.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellPublicKey.KeyAlgorithm">
            <summary>
            Gets the key algorithm.
            </summary>
            <value>Key algorithm.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellPublicKey.KeyAlgorithmId">
            <summary>
            Gets the key algorithm ID
            </summary>
            <value>Key algorithm ID.</value>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Creates a certificate-based SSH key for use with SSH/SFTP servers that support X509 certificate authentication.
            </summary>
            <param name="certificate">X509 certificate.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Creates an SSH private key based on the specified <see cref="T:System.Security.Cryptography.RSA" /> or <see cref="T:System.Security.Cryptography.DSA" /> object.
            </summary>
            <param name="algorithm">An <see cref="T:System.Security.Cryptography.RSA" /> or <see cref="T:System.Security.Cryptography.DSA" /> object.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.#ctor(System.String,System.String)">
            <summary>
            Loads a PKCS #8 or SSLeay-format RSA or DSA private key from the specified path.
            </summary>
            <param name="path">A path to the private key.</param>
            <param name="password">Password used to encrypted the private key, or null if no password needed.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.#ctor(System.IO.Stream,System.String)">
            <summary>
            Loads a PKCS #8 or SSLeay-format RSA or DSA private key from the specified stream.
            </summary>
            <param name="input">A stream from which to load the private key.</param>
            <param name="password">Password used to encrypted the private key, or null if no password needed.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.#ctor(System.Byte[],System.String)">
            <summary>
            Loads a PKCS #8 or SSLeay-format RSA or DSA private key from the specified raw data.
            </summary>
            <param name="data">Raw private key data.</param>
            <param name="password">Password used to encrypted the private key, or null if no password needed.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.CreateFrom(System.Security.Cryptography.RSAParameters)">
            <summary>
            Creates an SSH private key from the specified RSA parameters.
            </summary>
            <returns>SSH private key object.</returns>
            <param name="parameters">The RSA parameters.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.CreateFrom(System.Security.Cryptography.DSAParameters)">
            <summary>
            Creates an SSH private key from the specified DSA parameters.
            </summary>
            <returns>SSH private key object.</returns>
            <param name="parameters">The DSA parameters.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.CreateSignature(System.Byte[],ComponentPro.Security.Certificates.SignatureHashAlgorithm)">
            <summary>
            Creates an SSH authentication signature from the specified hash.
            </summary>
            <param name="hash">Hash.</param>
            <param name="algorithm">Signature algorithm.</param>
            <returns>SSH authentication signature.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.Create">
            <summary>
            Generates an SSH private key using the RSA algorithm with a key size of 1024 bits.
            </summary>
            <returns>SSH private key object.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.Create(ComponentPro.Net.SecureShellHostKeyAlgorithm,System.Int32)">
            <summary>
            Generates an SSH private key using the specified algorithm and key size.
            </summary>
            <param name="algorithm">Key algorithm. RSA or DSA.</param>
            <param name="keySize">Key size.</param>
            <returns>SSH private key object.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.GetDSAParameters">
            <summary>
            Gets the DSA parameters for a DSA key. May only be used for DSA private keys.
            </summary>
            <returns>DSA paramaters.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.GetPrivateKey">
            <summary>
            Gets the raw form of the private key.
            </summary>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.GetRSAParameters">
            <summary>
            Gets the RSA parameters for a RSA key. May only be used for RSA private keys.
            </summary>
            <returns>RSA paramaters.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.Save(System.IO.Stream,System.String,System.Object)">
            <summary>
            Saves the private key into the supplied stream in Base64-encoded PKCS #8 format.
            </summary>
            <param name="output">A stream to which to save the private key.</param>
            <param name="password">Password to encrypted the private key, or null if no encryption desired.</param>
            <param name="encryptionAlgorithm">The algorithm to use for encryption. Ignored if password is null. Null defaults to "3DES".</param>
            <remarks>
            The encryptionAlgorithm can accepts a String or a Type.
            Currently, the following strings and types are accepted:<br />
            TripleDES: null, "3DES", "TripleDES", "1.2.840.113549.3.7", typeof(System.Security.Cryptography.TripleDES)<br />
            DES: "DES", "1.3.14.3.2.7", typeof(System.Security.Cryptography.DES)<br />
            RC2: "RC2", "1.2.840.113549.3.2", typeof(System.Security.Cryptography.RC2)<br />
            To save the key in PuTTY format, pass the "putty" string to the encryptionAlgorithm argument.<br />
            To save the key on OpenSSH/OpenSSL SSLeay format, pass the "ssleay" or "openssh" string to the encryptionAlgorithm argument.<br />
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.Save(System.String,System.String,System.Object)">
            <summary>
            Saves the private key into the specified file in Base64-encoded PKCS #8 format.
            </summary>
            <param name="path">A path to stream to which to save the private key.</param>
            <param name="password">Password to encrypted the private key, or null if no encryption desired.</param>
            <param name="encryptionAlgorithm">The algorithm to use for encryption. Ignored if password is null. Null defaults to "3DES".</param>
            <remarks>
            The encryptionAlgorithm can accepts a String or a Type.
            Currently, the following strings and types are accepted:<br />
            TripleDES: null, "3DES", "TripleDES", "1.2.840.113549.3.7", typeof(System.Security.Cryptography.TripleDES)<br />
            DES: "DES", "1.3.14.3.2.7", typeof(System.Security.Cryptography.DES)<br />
            RC2: "RC2", "1.2.840.113549.3.2", typeof(System.Security.Cryptography.RC2)<br />
            To save the key in PuTTY format, pass the "putty" string to the encryptionAlgorithm argument.<br />
            To save the key on OpenSSH/OpenSSL SSLeay format, pass the "ssleay" or "openssh" string to the encryptionAlgorithm argument.<br />
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.Save(System.IO.Stream,System.String,ComponentPro.Net.SecureShellPrivateKeyFormat)">
            <summary>
            Saves the private key into the supplied stream in the specified format.
            </summary>
            <param name="output">A stream to which to save the private key.</param>
            <param name="password">Password to encrypted the private key, or null if no encryption desired.</param>
            <param name="format">Private key file format.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.Save(System.String,System.String,ComponentPro.Net.SecureShellPrivateKeyFormat)">
            <summary>
            Saves the private key into the supplied stream in the specified format.
            </summary>
            <param name="path">A path to stream to which to save the private key.</param>
            <param name="password">Password to encrypted the private key, or null if no encryption desired.</param>
            <param name="format">Private key file format.</param>
        </member>
        <member name="T:ComponentPro.Net.SecureShellPrivateKeyFormat">
            <summary>
            Specifies private key file format.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellPrivateKeyFormat.Pkcs8">
            <summary>PKCS #8 format.</summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellPrivateKeyFormat.Putty">
            <summary>PuTTY PPKv2 format.</summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellPrivateKeyFormat.OpenSsh">
            <summary>OpenSSH/OpenSSL SSLeay format.</summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellPublicKeyFormat">
            <summary>
            Specifies public key file format.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellPublicKeyFormat.Ssh2Base64">
            <summary>Base64-encoded SSH2 public key format.</summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellPublicKeyFormat.Ssh2Raw">
            <summary>Raw SSH2 public key format.</summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellState">
            <summary>
            SSH session state.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellState.None">
            <summary>
            Initial state.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellState.Connecting">
            <summary>
            Connecting.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellState.KeyExchange">
            <summary>
            Key exchange.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellState.Ready">
            <summary>
            Ready.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellState.Closed">
            <summary>
            Closed.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SocketInformation">
            <summary>
            Information about a socket.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SocketInformation.LocalEndPoint">
            <summary>
            Gets the local endpoint.
            </summary>
            <value>The local endpoint that the <see cref="T:ComponentPro.Net.ISocket" /> is using for communications.</value>
            <remarks>
            The LocalEndPoint property contains the network connection information associated with the local network device.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.SocketInformation.RemoteEndPoint">
            <summary>
            Gets the remote endpoint.
            </summary>
            <value>The remote endpoint that the <see cref="T:ComponentPro.Net.ISocket" /> is using for communications.</value>
            <remarks>
            The RemoteEndPoint property gets the network connection information associated with
            either the remote host or the proxy server.
            RemoteEndPoint is set by the <see cref="T:ComponentPro.Net.ISocket" /> methods that establish a connection
            to a remote host.
            </remarks>
        </member>
        <member name="T:ComponentPro.Net.SocketSelectMode">
            <summary>
            Defines the polling modes for the <see cref="M:ComponentPro.Net.ISocket.Poll(System.Int32,ComponentPro.Net.SocketSelectMode)" /> method.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SocketSelectMode.SelectRead">
            <summary>
            Read status mode.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SocketState">
            <summary>
            Defines all the possible states of an <see cref="T:ComponentPro.Net.ISocket" /> object
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SocketState.NotConnected">
            <summary>
            The <see cref="T:ComponentPro.Net.ISocket" /> was either never connected, or is no longer connected.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SocketState.Connected">
            <summary>
            The <see cref="T:ComponentPro.Net.ISocket" /> is connected or data is still available to be read.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SshOptions">
            <summary>
            SSH connection options.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SshOptions.None">
            <summary>
            No options.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SshOptions.DoNotSplitChannelPackets">
            <summary>
            Do not split channel data packets unless they are larger than maximum packet size.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SshOptions.WaitForServerWelcomeMessage">
            <summary>
            Wait for server SSH protocol welcome message before sending the client one.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SshOptions.TryPasswordFirst">
            <summary>
            When authenticating using both password and private key, try password authentication first (default is to try the private key first).
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SshOptions.PostponeChannelClose">
            <summary>
            Postpone channel close requests (workaround for older versions of ssh.com and Cisco SSH servers).
            </summary>
            <remarks>Not supported on Windows store Apps platforms.</remarks>
            <summary>
            Postpone channel close.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SshOptions.EnableSignaturePadding">
            <summary>
            Postpone channel close requests (workaround for older versions of ssh.com and Cisco SSH servers).
            </summary>
            <summary>
            Enable signature padding.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SslConfigBase">
            <summary>
            Security parameters.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SslConfigBase.Clone">
            <summary>
            Returns a shallow copy of the current parameters.
            </summary>
            <returns>A shallow copy of current parameters.</returns>
        </member>
        <member name="P:ComponentPro.Net.SslConfigBase.AcceptableAuthorities">
            <summary>
            Gets or sets the list of acceptable certificate authorities.
            </summary>
            <value>The list of acceptable certificate authorities.</value>
            <remarks>
            This is only used by server sockets.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.SslConfigBase.AllowedCurves">
            <summary>
            Gets or sets the group of allowed TLS elliptic curves.
            </summary>
            <value>The group of allowed elliptic curves.</value>
        </member>
        <member name="P:ComponentPro.Net.SslConfigBase.AllowedCipherSuites">
            <summary>
            Gets or sets the group of allowed cipher suites.
            </summary>
            <value>The group of allowed cipher suites.</value>
        </member>
        <member name="P:ComponentPro.Net.SslConfigBase.AllowVulnerableSuites">
            <summary>
            Gets or sets a value indicating whether ciphers vulnerable to FREAK security exploit
            might be enabled using <see cref="P:ComponentPro.Net.SslConfigBase.AllowedSuites" /> property.
            </summary>
            <summary>
            Gets or sets a value indicating whether to allow vulnerable cipher suites.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SslConfigBase.CertificatePolicy">
            <summary>
            Gets or sets the certificate policy for server sockets.
            </summary>
            <value>The certificate policy.</value>
            <remarks>
            This is only used by server sockets.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.SslConfigBase.CommonName">
            <summary>
            Gets or sets the common name of the server.
            </summary>
            <value>The common name of the server.</value>
        </member>
        <member name="P:ComponentPro.Net.SslConfigBase.Entity">
            <summary>
            Gets or sets the entity of a socket.
            </summary>
            <value>Connection entity.</value>
        </member>
        <member name="P:ComponentPro.Net.SslConfigBase.EphemeralDiffieHellmanParameters">
            <summary>
            Gets or sets the ephemeral Diffie-Hellman parameters for
            DHE key exchange on server sockets.
            </summary>
            <value>The ephemeral Diffie-Hellman parameters.</value>
            <remarks>
            <p>
            This is only used by server sockets.
            </p>
            <p>
            Only P and G parameters are used.
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.SslConfigBase.MinimumDiffieHellmanKeySize">
            <summary>
            Gets or sets the minumum allowed size (in bits) of the ephemeral Diffie-Hellman prime.
            </summary>
            <remarks>
            This is only used by client sockets.
            </remarks>
            <summary>
            Gets or sets the minimum diffie-hellman key size.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SslConfigBase.Session">
            <summary>
            Gets or sets the session to resume.
            </summary>
            <value>The session to resume.</value>
        </member>
        <member name="P:ComponentPro.Net.SslConfigBase.TemporaryRSAParameters">
            <summary>
            Gets or sets the temporary RSA key parameters for RSA_EXPORT
            key exchange on server sockets with certificates with key length &gt;512.
            </summary>
            <value>The ephemeral Hellman-Diffie parameters.</value>
            <remarks>
            <p>
            This is only used by server sockets.
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.SslConfigBase.AllowedTlsVersions">
            <summary>
            Gets or sets the allowed protocol versions.
            </summary>
            <value>Allowed protocol versions.</value>
        </member>
        <member name="P:ComponentPro.Net.SslConfigBase.CacheSessions">
            <summary>
            Indicates whether to cache sessions. The default value is true.
            </summary>
            <remarks>
            Mostly useful for debugging purposes.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.SslConfigBase.StayConnected">
            <summary>
            Indicates whether or not shutdown and close the underlying socket after sending
            or receiving fatal alert or close notify. The default value is true - stay connected.
            </summary>
            <value>true to stay connected - dont shutdown and close the underlying socket after sending
            or receiving fatal alert or close notify; otherwise, false.</value>
        </member>
        <member name="P:ComponentPro.Net.SslConfigBase.InsertEmptyFragment">
            <summary>
            Indicates whether to send empty record after sucessful handshake with CBC ciphers. The default value is true.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SslConfigBase.SkipRollbackDetection">
            <summary>
            Indicates whether to ignore the client version in premaster secret. This only affects server sockets. The default value is false.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SslConfigBase.SilentUnprotect">
            <summary>
            Indicates whether to force the Unprotection process to do immediate unprotect without exchange
            of CloseNotify alert messages. This is in violation of the RFC, but some broken servers need it,
            unfortunately. The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SslConfigBase.AllowCloseWhileNegotiating">
            <summary>
            Indicates whether to allow socket closure while negotiating. The default value is <c>false</c>.
            </summary>
            <remark>
            This is needed by Serv-U FTP server that behaves like this when downloading an empty file
            or directory listing. Even though this behavior is almost certainly bad and could pose
            a potential security threat, we have to enable this option for this server to be able to work
            with it.
            </remark>
        </member>
        <member name="P:ComponentPro.Net.SslConfigBase.SilentClose">
            <summary>
            Forces the TLS socket to immediately close without exchange
            of CloseNotify alert messages. This is in violation of the RFC, but some broken servers (IIS with TLS 1.1)
            need it, unfortunately. The default value is <c>false</c>.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SslSecurityMode">
            <summary>
            Specifies TLS/SSL security mode.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SslSecurityMode.None">
            <summary>
            Unsecured connection. No TLS/SSL.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SslSecurityMode.Implicit">
            <summary>
            Implicitly secured TLS/SSL connection.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SslSecurityMode.Explicit">
            <summary>
            Explicitly secured TLS/SSL connection.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.TlsBulkCipherAlgorithm">
            <summary>
            Bulk cipher algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsBulkCipherAlgorithm.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsBulkCipherAlgorithm.RC4">
            <summary>
            RC4.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsBulkCipherAlgorithm.RC2">
            <summary>
            RC2.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsBulkCipherAlgorithm.DES">
            <summary>
            DES.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsBulkCipherAlgorithm.TripleDES">
            <summary>
            TripleDES.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsBulkCipherAlgorithm.AES">
            <summary>
            AES.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsBulkCipherAlgorithm.Twofish">
            <summary>
            Twofish.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.TlsCertificatePolicy">
            <summary>
            Specifies the certificate policy for the server sockets.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCertificatePolicy.NoClientCertificate">
            <summary>
            Don't request a client certificate.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCertificatePolicy.AllowClientCertificate">
            <summary>
            Request a client certificate, but do not fail if none is provided.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCertificatePolicy.RequireClientCertificate">
            <summary>
            Request a client certificate and fail if none is provided.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.TlsCipher">
            <summary>
            Represents a TLS/SSL cipher.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.TlsCipher.ToString">
            <summary>
            Returns a description of the cipher.
            </summary>
            <returns>Description of the cipher.</returns>
        </member>
        <member name="P:ComponentPro.Net.TlsCipher.BlockSize">
            <summary>
            Gets the cipher's block size.
            </summary>
            <value>Block size.</value>
        </member>
        <member name="P:ComponentPro.Net.TlsCipher.Cbc">
            <summary>
            Gets the value indicating whether the cipher is a block cipher in CBC mode.
            </summary>
            <value>true if block cipher, false if stream cipher.</value>
        </member>
        <member name="P:ComponentPro.Net.TlsCipher.CipherAlgorithm">
            <summary>
            Gets the active cipher algorithm.
            </summary>
            <value>Active cipher algorithm.</value>
        </member>
        <member name="P:ComponentPro.Net.TlsCipher.EffectiveKeySize">
            <summary>
            Gets the effective key size.
            </summary>
            <value>Effective key size.</value>
        </member>
        <member name="P:ComponentPro.Net.TlsCipher.Exportable">
            <summary>
            Gets the value indicating whether the cipher is exportable.
            </summary>
            <value>true if exportable, false if not exportable.</value>
        </member>
        <member name="P:ComponentPro.Net.TlsCipher.KeyExchangeAlgorithm">
            <summary>
            Gets the selected key exchange algorithm.
            </summary>
            <value>Selected key exchange algorithm.</value>
        </member>
        <member name="P:ComponentPro.Net.TlsCipher.KeyMaterialSize">
            <summary>
            Gets the size of key material.
            </summary>
            <value>Size of key material.</value>
        </member>
        <member name="P:ComponentPro.Net.TlsCipher.KeySize">
            <summary>
            Gets the key size.
            </summary>
            <value>Key size.</value>
        </member>
        <member name="P:ComponentPro.Net.TlsCipher.MacAlgorithm">
            <summary>
            Gets the active message authentication code (MAC) algorithm.
            </summary>
            <value>Active MAC algorithm.</value>
        </member>
        <member name="P:ComponentPro.Net.TlsCipher.MacSize">
            <summary>
            Gets the MAC algorithm block size.
            </summary>
            <value>MAC algorithm block size.</value>
        </member>
        <member name="P:ComponentPro.Net.TlsCipher.Protocol">
            <summary>
            Gets the active protocol version.
            </summary>
            <value>The active protocol version.</value>
        </member>
        <member name="P:ComponentPro.Net.TlsCipher.Suite">
            <summary>
            Returns the cipher suite ID.
            </summary>
            <value>Cipher suite ID.</value>
        </member>
        <member name="T:ComponentPro.Net.TlsCipherSuite">
            <summary>
            Specifies the set of desired cipher suites.
            </summary>
            <remarks>
            The following ciphers are currently considered secure:<br />
            RSA_WITH_3DES_EDE_CBC_SHA<br />
            RSA_WITH_AES_128_CBC_SHA<br />
            RSA_WITH_AES_256_CBC_SHA<br />
            RSA_WITH_AES_128_CBC_SHA256<br />
            RSA_WITH_AES_256_CBC_SHA256<br />
            DHE_DSS_WITH_3DES_EDE_CBC_SHA<br />
            DHE_DSS_WITH_AES_128_CBC_SHA<br />
            DHE_DSS_WITH_AES_256_CBC_SHA<br />
            DHE_DSS_WITH_AES_128_CBC_SHA256<br />
            DHE_DSS_WITH_AES_256_CBC_SHA256<br />
            DHE_RSA_WITH_3DES_EDE_CBC_SHA<br />
            DHE_RSA_WITH_AES_128_CBC_SHA<br />
            DHE_RSA_WITH_AES_256_CBC_SHA<br />
            DHE_RSA_WITH_AES_128_CBC_SHA256<br />
            DHE_RSA_WITH_AES_256_CBC_SHA256<br />
            </remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.None">
            <summary>
            No cipher suite.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.RSA_EXPORT_WITH_RC4_40_MD5">
            <summary>
            Exportable 40bit RC4 with MD5 hash.
            </summary>
            <remarks>This cipher is considered vulnerable. Usage is strongly discouraged.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.RSA_WITH_RC4_128_MD5">
            <summary>
            128bit RC4 with MD5 hash.
            </summary>
            <remarks>This cipher is considered vulnerable. Usage is strongly discouraged.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.RSA_WITH_RC4_128_SHA">
            <summary>
            128bit RC4 with SHA-1 hash.
            </summary>
            <remarks>This cipher is considered vulnerable. Usage is strongly discouraged.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.RSA_EXPORT_WITH_RC2_CBC_40_MD5">
            <summary>
            Exportable 40bit RC2 in CBC mode with MD5 hash.
            </summary>
            <remarks>This cipher is considered vulnerable. Usage is strongly discouraged.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.RSA_EXPORT_WITH_DES40_CBC_SHA">
            <summary>
            Exportable 40bit DES in CBC mode with SHA-1 hash.
            </summary>
            <remarks>This cipher is considered vulnerable. Usage is strongly discouraged.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.RSA_WITH_DES_CBC_SHA">
            <summary>
            56bit DES in CBC mode with SHA-1 hash.
            </summary>
            <remarks>This cipher is not considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.RSA_WITH_3DES_EDE_CBC_SHA">
            <summary>
            TripleDES in CBC mode with SHA-1 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.RSA_EXPORT1024_WITH_DES_CBC_SHA">
            <summary>
            Exportable 56bit DES in CBC mode with SHA-1 hash.
            </summary>
            <remarks>This cipher is not considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.RSA_EXPORT1024_WITH_RC4_56_SHA">
            <summary>
            Exportable 56bit RC4 mode with SHA-1 hash.
            </summary>
            <remarks>This cipher is considered vulnerable. Usage is strongly discouraged.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.RSA_WITH_AES_128_CBC_SHA">
            <summary>
            128bit AES in CBC mode with SHA-1 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.RSA_WITH_AES_256_CBC_SHA">
            <summary>
            256bit AES in CBC mode with SHA-1 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DHE_DSS_EXPORT_WITH_DES40_CBC_SHA">
            <summary>
            Exportable 40bit DES in CBC mode with SHA-1 hash.
            </summary>
            <remarks>This cipher is considered vulnerable. Usage is strongly discouraged.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DHE_DSS_WITH_DES_CBC_SHA">
            <summary>
            56bit DES in CBC mode with SHA-1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DHE_DSS_WITH_3DES_EDE_CBC_SHA">
            <summary>
            TripleDES in CBC mode with SHA-1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DHE_DSS_WITH_AES_128_CBC_SHA">
            <summary>
            128bit AES in CBC mode with SHA-1 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DHE_DSS_WITH_AES_256_CBC_SHA">
            <summary>
            256bit AES in CBC mode with SHA-1 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA">
            <summary>
            Exportable 56bit DES in CBC mode with SHA-1 hash.
            </summary>
            <remarks>This cipher is not considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DHE_DSS_EXPORT1024_WITH_RC4_56_SHA">
            <summary>
            Exportable 40bit RC4 with SHA-1 hash.
            </summary>
            <remarks>This cipher is considered vulnerable. Usage is strongly discouraged.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DHE_DSS_WITH_RC4_128_SHA">
            <summary>
            128bit RC4 with SHA-1 hash.
            </summary>
            <remarks>This cipher is considered vulnerable. Usage is strongly discouraged.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DHE_RSA_EXPORT_WITH_DES40_CBC_SHA">
            <summary>
            Exportable 40bit DES in CBC mode with SHA-1 hash.
            </summary>
            <remarks>This cipher is considered vulnerable. Usage is strongly discouraged.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DHE_RSA_WITH_DES_CBC_SHA">
            <summary>
            56bit DES in CBC mode with SHA-1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DHE_RSA_WITH_3DES_EDE_CBC_SHA">
            <summary>
            TripleDES in CBC mode with SHA-1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DHE_RSA_WITH_AES_128_CBC_SHA">
            <summary>
            128bit AES in CBC mode with SHA-1 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DHE_RSA_WITH_AES_256_CBC_SHA">
            <summary>
            256bit AES in CBC mode with SHA-1 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.RSA_WITH_AES_128_CBC_SHA256">
            <summary>
            256bit AES in CBC mode with SHA-256 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
            <summary>
            128bit AES in CBC mode with SHA2 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.RSA_WITH_AES_256_CBC_SHA256">
            <summary>
            128bit AES in CBC mode with SHA-256 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
            <summary>
            256bit AES in CBC mode with SHA2 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DHE_DSS_WITH_AES_128_CBC_SHA256">
            <summary>
            128bit AES in CBC mode with SHA-256 hash.
            </summary>
            <summary>
            DHE DSS 128bit AES in CBC mode with SHA2 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DHE_RSA_WITH_AES_128_CBC_SHA256">
            <summary>
            128bit AES in CBC mode with SHA-256 hash.
            </summary>
            <summary>
            DHE RSA 128bit AES in CBC mode with SHA2 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DHE_DSS_WITH_AES_256_CBC_SHA256">
            <summary>
            256bit AES in CBC mode with SHA-256 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
            <summary>
            DHE DSS 256bit AES in CBC mode with SHA2 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DHE_RSA_WITH_AES_256_CBC_SHA256">
            <summary>
            256bit AES in CBC mode with SHA-256 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
            <summary>
            DHE RSA 256bit AES in CBC mode with SHA2 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DH_anon_WITH_RC4_128_MD5">
            <summary>
            Anonymous 128bit RC4 with MD5 hash.
            </summary>
            <remarks>This cipher is considered vulnerable. Usage is strongly discouraged.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DH_anon_WITH_3DES_EDE_CBC_SHA">
            <summary>
            Anonymous TripleDES in CBC mode with SHA-1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DH_anon_WITH_DES_CBC_SHA">
            <summary>
            Anonymous DES in CBC mode with SHA-1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DH_anon_EXPORT_WITH_RC4_40_MD5">
            <summary>
            Anonymous exportable 40bit RC4 with MD5 hash.
            </summary>
            <remarks>This cipher is considered vulnerable. Usage is strongly discouraged.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DH_anon_EXPORT_WITH_DES40_CBC_SHA">
            <summary>
            Anonymous exportable 40bit DES in CBC mode with SHA-1 hash.
            </summary>
            <remarks>This cipher is considered vulnerable. Usage is strongly discouraged.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DH_anon_WITH_AES_256_CBC_SHA256">
            <summary>
            Anonymous 256bit AES in CBC mode with SHA256 hash.
            </summary>
            <summary>
            Anonymous exportable 40bit DES in CBC mode with SHA2 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DH_anon_WITH_AES_128_CBC_SHA256">
            <summary>
            Anonymous 128bit AES in CBC mode with SHA256 hash.
            </summary>
            <summary>
            Anonymous exportable 40bit DES in CBC mode with SHA2 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DH_anon_WITH_AES_128_CBC_SHA">
            <summary>
            Anonymous 128bit AES in CBC mode with SHA-1 hash.
            </summary>
            <summary>
            Anonymous exportable 40bit DES in CBC mode with SHA1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.DH_anon_WITH_AES_256_CBC_SHA">
            <summary>
            Anonymous 256bit AES in CBC mode with SHA-1 hash.
            </summary>
            <summary>
            Anonymous exportable 40bit DES in CBC mode with SHA1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.Secure">
            <summary>
            Specifies all ciphers that are currently considered secure.
            </summary>
            <remarks>See <see cref="T:ComponentPro.Net.TlsCipherSuite" /> for the list.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.Anonymous">
            <summary>
            Specifies anonymous ciphers.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCipherSuite.All">
            <summary>
            Specifies all ciphers, including the weak ciphers, excluding anonymous ciphers.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.TlsCompressionMethod">
            <summary>
            Specifies the compression method.
            </summary>
            <remarks>
            Currently, no compression is supported.
            </remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsCompressionMethod.None">
            <summary>
            No compression.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.TlsConnectionEnd">
            <summary>
            Connection end.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsConnectionEnd.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsConnectionEnd.Server">
            <summary>
            Server socket.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsConnectionEnd.Client">
            <summary>
            Client socket.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.TlsException">
            <summary>
            The exception that is thrown when a TLS/SSL error occurs.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.TlsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.TlsException" /> class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ComponentPro.Net.TlsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.TlsException" /> class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:ComponentPro.Net.TlsKeyExchangeAlgorithm">
            <summary>
            Specifies the key exchange algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsKeyExchangeAlgorithm.None">
            <summary>
            No key exchange.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsKeyExchangeAlgorithm.RSA">
            <summary>
            The key exchange works by encrypting a random value (chosen by the client) with the server public key. This requires that the server public key is an RSA key, and that the server certificate does not prohibit encryption.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsKeyExchangeAlgorithm.DHE_RSA">
            <summary>
            RSA signature, the key exchange is an ephemeral Diffie-Hellman
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsKeyExchangeAlgorithm.DHE_DSS">
            <summary>
            DSS signature, the key exchange is an ephemeral Diffie-Hellman
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsKeyExchangeAlgorithm.DH_anon">
            <summary>
            The server uses a Diffie-Hellman key that it may have dynamically generated. The "anon" cipher suites are vulnerable to impersonating attacks (including, but not limited to, the "Man in the Middle") since they lack any kind of server authentication.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.TlsMacAlgorithm">
            <summary>
            Specifies the hashing algorithm used for TLS/SSL data packets.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsMacAlgorithm.None">
            <summary>
            No MAC algorithm is used.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsMacAlgorithm.MD5">
            <summary>
            MD5 algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsMacAlgorithm.SHA1">
            <summary>
            SHA-1 algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsMacAlgorithm.SHA256">
            <summary>
            SHA-256 algorithm.
            </summary>
            <summary>
            SHA2 algorithm.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.TlsSslProtocol">
            <summary>
            TLS/SSL protocol version.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslProtocol.None">
            <summary>
            No SSL/TLS used.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslProtocol.SSL30">
            <summary>
            SSL 3.0 protocol. Deprecated.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslProtocol.TLS10">
            <summary>
            TLS 1.0 protocol.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslProtocol.TLS11">
            <summary>
            TLS 1.1 protocol.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslProtocol.TLS12">
            <summary>
            TLS 1.2 protocol.
            </summary>
            <summary>
            TLS 1.2 protocol.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.TlsSession">
            <summary>
            Represents a cached TLS/SSL session.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.TlsSslVersion">
            <summary>
            Defines the supported versions of Transport Layer Security (TLS) and its predecessor, Secure Sockets Layer (SSL)
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslVersion.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslVersion.SSL30">
            <summary>
            SSL 3.0 protocol - deprecated.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslVersion.TLS10">
            <summary>
            TLS 1.0 protocol.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslVersion.TLS11">
            <summary>
            TLS 1.1 protocol.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslVersion.TLS12">
            <summary>
            TLS 1.2 protocol.
            </summary>
            <summary>
            TLS version 1.2.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslVersion.Any">
            <summary>
            Use any supported protocol
            </summary>
        </member>
        <member name="T:ComponentPro.Net.TransferType">
            <summary>
            Transfer type.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TransferType.Ascii">
            <summary>ASCII.</summary>
        </member>
        <member name="F:ComponentPro.Net.TransferType.Binary">
            <summary>Binary.</summary>
        </member>
        <member name="T:ComponentPro.Security.CertificateReceivedEventArgs">
            <summary>
            Provides information on the certificate that is received from the server.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.CertificateReceivedEventArgs.ServerCertificates">
            <summary>
            Gets the certificate received from the server.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.CertificateReceivedEventArgs.Status">
            <summary>
            Gets the verification status of the certificate received from the server.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.CertificateReceivedEventArgs.Accept">
            <summary>
            Gets or sets a boolean value indicating whether to accept <see cref="P:ComponentPro.Security.CertificateReceivedEventArgs.ServerCertificates">the certificated</see> received from the server.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.CertificateReceivedEventArgs.ErrorCode">
            <summary>
            Gets the verification error code.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.CertificateReceivedEventArgs.AddToTrustedRoot">
            <summary>
            Gets or sets a boolean value indicating whether to add this certificate to the trusted list.
            </summary>
        </member>
        <member name="T:ComponentPro.Security.CertificateRequiredEventArgs">
            <summary>
            Provides information on the certificate that the server requires from the client.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.CertificateRequiredEventArgs.Certificates">
            <summary>
            Gets or sets the client's certificate that is required by the server, or a null reference to try to search for the certificate in the store.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.CertificateRequiredEventArgs.Issuers">
            <summary>
            Gets the list of acceptable certificate issuers.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.ProxyClient">
            <summary>Provides client connections for TCP network services through HTTP, SOCKS v4, SOCKS v4A and SOCKS v5 proxy servers.</summary>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.#ctor">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxyClient"></see> class.</summary>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.#ctor(ComponentPro.Net.WebProxyEx)">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.ProxyClient"/> class with parameters provided in the supplied <see cref="T:ComponentPro.Net.WebProxyEx"/> object.
            </summary>
            <param name="proxy">Contains parameters used to initialize this <see cref="T:ComponentPro.Net.ProxyClient"/>.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.#ctor(System.Net.Sockets.AddressFamily)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxyClient"></see> class with the specified family.</summary>
            <param name="family">The <see cref="P:System.Net.IPAddress.AddressFamily"></see> of the IP protocol. </param>
            <exception cref="T:System.ArgumentException">family != AddressFamily.InterNetwork -or- family != AddressFamily.InterNetworkV6 </exception>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.#ctor(ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxyClient"></see> class with the specified family.</summary>
            <exception cref="T:System.ArgumentException">family != AddressFamily.InterNetwork -or- family != AddressFamily.InterNetworkV6 </exception>
            <param name="proxyType">The proxy type.</param>
            <param name="authenticationMethod">The authentication method.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
            <param name="userName">The proxy user name.</param>
            <param name="password">The proxy password.</param>
            <param name="domain">The proxy domain name.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.#ctor(System.Net.Sockets.AddressFamily,ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxyClient"></see> class with the specified family.</summary>
            <param name="family">The <see cref="P:System.Net.IPAddress.AddressFamily"></see> of the IP protocol. </param>
            <param name="authenticationMethod">The authentication method.</param>
            <param name="domain">The proxy domain name.</param>
            <param name="password">The proxy password.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
            <param name="proxyType">The proxy type.</param>
            <param name="userName">The proxy user name.</param>
            <exception cref="T:System.ArgumentException">family != AddressFamily.InterNetwork -or- family != AddressFamily.InterNetworkV6 </exception>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.#ctor(System.String,System.Int32,ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxyClient"></see> class and connects to the specified port on the specified host.</summary>
            <param name="port">The port number of the remote host to which you intend to connect. </param>
            <param name="hostname">The DNS name of the remote host to which you intend to connect. </param>
            <param name="proxyType">The <see cref="P:ComponentPro.Net.ProxyClient.ProxyType">type</see> of the proxy.</param>
            <param name="authenticationMethod">The authentication method.</param>
            <param name="proxyHost">The hostname of the proxy server.</param>
            <param name="proxyPort">The port of the proxy server.</param>
            <param name="userName">A user name to submit to the proxy server for authentication.</param>
            <param name="password">A password to submit to the proxy server for authentication.</param>
            <param name="domain">A domain to submit to the proxy server for authentication.</param>
            <exception cref="T:System.ArgumentNullException">hostname is null.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">port is not between <see cref="F:System.Net.IPEndPoint.MinPort"></see> and <see cref="F:System.Net.IPEndPoint.MaxPort"></see>. </exception>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.Close">
            <summary>Disposes this <see cref="T:ComponentPro.Net.ProxyClient"></see> instance without closing the underlying connection.</summary>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.Connect(System.Net.IPEndPoint)">
            <summary>Connects the client to a remote TCP host using the specified remote network endpoint.</summary>
            <param name="remoteEndPoint">The <see cref="T:System.Net.IPEndPoint"></see> to which you intend to connect. </param>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentNullException">remoteEp is null. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:ComponentPro.Net.ProxyClient"></see> is closed. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Net.SocketPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.Connect(System.Net.IPAddress,System.Int32)">
            <summary>Connects the client to a remote TCP host using the specified IP address and port number.</summary>
            <param name="address">The <see cref="T:System.Net.IPAddress"></see> of the host to which you intend to connect. </param>
            <param name="port">The port number to which you intend to connect. </param>
            <exception cref="T:System.ArgumentNullException">address parameter is null. </exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The port is not between <see cref="F:System.Net.IPEndPoint.MinPort"></see> and <see cref="F:System.Net.IPEndPoint.MaxPort"></see>. </exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:ComponentPro.Net.ProxyClient"></see> is closed. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Net.SocketPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.Connect(System.String,System.Int32)">
            <summary>Connects the client to the specified port on the specified host.</summary>
            <exception cref="T:System.ArgumentNullException">hostname is null. </exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">port is not between <see cref="F:System.Net.IPEndPoint.MinPort"></see> and <see cref="F:System.Net.IPEndPoint.MaxPort"></see>. </exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:ComponentPro.Net.ProxyClient"></see> is closed. </exception>
            <param name="hostname">The DNS name of the remote host to which you intend to connect. </param>
            <param name="port">The port number of the remote host to which you intend to connect. </param>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.Disconnect">
            <summary>
            Informs the proxy server that the connection is about to close and terminates the connection.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.Dispose(System.Boolean)">
            <summary>Releases the unmanaged resources used by the <see cref="T:ComponentPro.Net.ProxyClient"></see> and optionally releases the managed resources.</summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.Finalize">
            <summary>Frees resources used by the <see cref="T:ComponentPro.Net.ProxyClient"></see> class.</summary>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.GetStream">
            <summary>Returns the <see cref="T:System.Net.Sockets.NetworkStream"></see> used to send and receive data.</summary>
            <returns>The underlying <see cref="T:System.Net.Sockets.NetworkStream"></see>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:ComponentPro.Net.ProxyClient"></see> is not connected to a remote host. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:ComponentPro.Net.ProxyClient"></see> has been closed. </exception>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.OnConnectCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.ProxyClient.ConnectCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> object.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.ConnectAsync(System.Net.IPAddress,System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by an <see cref="T:System.Net.IPAddress"></see> and a port number (<see cref="T:System.Int32"></see>).</summary>
            <returns>An object that references the asynchronous connection.</returns>
            <param name="address">The <see cref="T:System.Net.IPAddress"></see> of the remote host.</param>
            <param name="userState">A user-defined object that contains information about the connect operation. This object is passed to the callback delegate when the operation is complete.</param>
            <param name="port">The port number of the remote host.</param>
            <param name="callback">An <see cref="T:System.ComponentModel.AsyncCompletedEventHandler"></see> delegate that references the method to invoke when the operation is complete. </param>
            <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <exception cref="T:System.ArgumentNullException">The address parameter is null. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Net.SocketPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/></PermissionSet>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.ConnectAsync(System.Net.IPAddress,System.Int32,System.Object)">
            <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by an <see cref="T:System.Net.IPAddress"></see> and a port number (<see cref="T:System.Int32"></see>).</summary>
            <returns>An object that references the asynchronous connection.</returns>
            <param name="address">The <see cref="T:System.Net.IPAddress"></see> of the remote host.</param>
            <param name="userState">A user-defined object that contains information about the connect operation. This object is passed to the callback delegate when the operation is complete.</param>
            <param name="port">The port number of the remote host.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <exception cref="T:System.ArgumentNullException">The address parameter is null. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Net.SocketPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.ConnectAsync(System.String,System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by a host name (<see cref="T:System.String"></see>) and a port number (<see cref="T:System.Int32"></see>).</summary>
            <returns>An object that references the asynchronous connection.</returns>
            <param name="userState">A user-defined object that contains information about the connect operation. This object is passed to the callback delegate when the operation is complete.</param>
            <param name="port">The port number of the remote host.</param>
            <param name="callback">An <see cref="T:System.ComponentModel.AsyncCompletedEventHandler"></see> delegate that references the method to invoke when the operation is complete.</param>
            <param name="host">The name of the remote host.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentNullException">The host parameter is null. </exception>
            <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Net.SocketPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/></PermissionSet>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.ConnectAsync(System.String,System.Int32,System.Object)">
            <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by a host name (<see cref="T:System.String"></see>) and a port number (<see cref="T:System.Int32"></see>).</summary>
            <returns>An object that references the asynchronous connection.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentNullException">The host parameter is null. </exception>
            <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <param name="host">The name of the remote host.</param>
            <param name="port">The port number of the remote host.</param>
            <param name="userState">A user-defined object that contains information about the connect operation. This object is passed to the callback delegate when the operation is complete.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.ConnectAsync(System.Net.IPEndPoint,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by a host name (<see cref="T:System.String"></see>) and a port number (<see cref="T:System.Int32"></see>).</summary>
            <returns>An object that references the asynchronous connection.</returns>
            <param name="remoteEndPoint">The <see cref="T:System.Net.IPEndPoint"></see> to which you intend to connect. </param>
            <param name="userState">A user-defined object that contains information about the connect operation. This object is passed to the callback delegate when the operation is complete.</param>
            <param name="callback">An <see cref="T:System.ComponentModel.AsyncCompletedEventHandler"></see> delegate that references the method to invoke when the operation is complete.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentNullException">The host parameter is null. </exception>
            <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Net.SocketPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/></PermissionSet>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.ConnectAsync(System.Net.IPEndPoint,System.Object)">
            <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by a host name (<see cref="T:System.String"></see>) and a port number (<see cref="T:System.Int32"></see>).</summary>
            <returns>An object that references the asynchronous connection.</returns>
            <param name="remoteEndPoint">The <see cref="T:System.Net.IPEndPoint"></see> to which you intend to connect. </param>
            <param name="userState">A user-defined object that contains information about the connect operation. This object is passed to the callback delegate when the operation is complete.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentNullException">The host parameter is null. </exception>
            <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Net.SocketPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.InvokeFromCurrentThreads">
            <summary>
            Gets a value indicating whether to raise events from the current thread or 
            to use a <see cref="T:System.Threading.SynchronizationContext" /> object available when an asynchronous operation was started.
            The default value is <c>false</c>.
            </summary>
            <value><c>true</c> to raise events directly from the current working thread; 
            <c>false</c> to raise them using a <see cref="T:System.Threading.SynchronizationContext" /> object.</value>
            <remarks>
            Synchronous methods always raise events from the current working thread.
            </remarks>
        </member>
        <member name="E:ComponentPro.Net.ProxyClient.ConnectCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ConnectAsync"/> operation completes.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.Active">
            <summary>Gets or set a value that indicates whether a connection has been made.</summary>
            <returns>true if the connection has been made; otherwise, false.</returns>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.Available">
            <summary>Gets the amount of data that has been received from the network and is available to be read.</summary>
            <returns>The number of bytes of data received from the network and available to be read.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.ClientSocket">
            <summary>Gets the underlying <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
            <returns>The underlying network <see cref="T:System.Net.Sockets.Socket"></see>.</returns>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.Connected">
            <summary>Gets a value indicating whether the underlying <see cref="T:System.Net.Sockets.Socket"></see> for a <see cref="T:ComponentPro.Net.ProxyClient"></see> is connected to a remote host.</summary>
            <returns>true if the <see cref="P:ComponentPro.Net.ProxyClient.ClientSocket"></see> socket was connected to a remote resource as of the most recent operation; otherwise, false.</returns>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.Timeout">
            <summary>
            Gets or sets the length of time before the operation times out (specify -1 or 0 to indicate that the request does not time out which is default).
            </summary>
            <value>
            The length of time, in milliseconds, until the operation times out,
            or the value -1 or 0 to indicate that the request does not time out.
            Default is -1 (infinite).
            </value>
            <remarks>
            <p>
            The internal timeout counter is reset every time data is sent
            or received from to server.
            </p>
            <p>
            The <see cref="P:ComponentPro.Net.ProxyClient.Timeout"/> property only affects synchronous methods.
            </p>
            <p>
            Minimal value is 500. Setting this to a value lower than 500 will set it to 500.
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.Family">
            <summary>
            Gets or sets the addressing scheme that an instance of the ProxySocket class can use.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.ProxyType">
            <summary>
            Gets or sets the proxy type.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.AuthenticationMethod">
            <summary>
            Gets or sets the authentication method.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.ProxyHost">
            <summary>
            Gets or sets the hostname of the proxy server.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.ProxyPort">
            <summary>
            Gets or sets the port of the proxy server.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.UserName">
            <summary>
            Gets or sets the user name to submit to the proxy server for authentication.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.Password">
            <summary>
            Gets or sets password to submit to the proxy server for authentication.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.Domain">
            <summary>
            Gets or sets the domain to submit to the proxy server for authentication.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.ISecureShellClient">
            <summary>
            Standardizes members of SSH client classes.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.Authenticate(System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler)">
            <summary>
            Authenticates the user to the SSH server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.Authenticate(System.String,System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler)">
            <summary>
            Authenticates the user to the SSH server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.Authenticate(System.String,System.String,ComponentPro.Net.SecureShellPrivateKey)">
            <summary>
            Authenticates the user to the SSH server using a combination of password and pkey. If password is a null reference (Nothing in VB.NET), the <paramref name="privateKey"/> must be specified to authenticate.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated, or null reference (Nothing in VB.NET).</param>
            <param name="privateKey">The RSA or DSA private key data stream for key-based authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.Authenticate(System.String,ComponentPro.Net.SecureShellPrivateKey)">
            <summary>
            Authenticates the user to the SSH server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="privateKey">The RSA or DSA private key data stream for key-based authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.Authenticate(System.String,System.String)">
            <summary>
            Authenticates the user to the SSH server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Changes the password of the specified user on the SSH server.
            </summary>
            <param name="userName">The username.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <returns>An <see cref="T:ComponentPro.Net.SecureShellChangePasswordResult"/> that represents the result of change password operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.KeepAlive">
            <summary>
            Sends a data packet to the server to keep the connection alive.
            </summary>        
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.ReuseConnection(ComponentPro.Net.SecureShellConnection)">
            <summary>
            Re-uses the specified <paramref name="connection"/> without having to connect to the SSH server and authenticate the user.
            </summary>
            <param name="connection">An SSH connection that is already connected and authenticated.</param>
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.ReuseConnection(ComponentPro.Net.ISecureShellClient)">
            <summary>
            Re-uses the underlying connection of the specified <paramref name="sshClient"/> without having to connect to the SSH server and authenticate the user.
            </summary>
            <param name="sshClient">An SSH connection that is already connected and authenticated.</param>
        </member>
        <member name="E:ComponentPro.Net.ISecureShellClient.Banner">
            <summary>
            Occurs when a banner message is received from the server.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.ISecureShellClient.HostKeyVerifying">
            <summary>
            Occurs when a fingerprint is received from the server and needs to be validated.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.ISecureShellClient.PasswordChangeRequest">
            <summary>
            Occurs when user's password need to be changed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.ISecureShellClient.KeyboardInteractiveAuthentication">
            <summary>
            Occurs when an authentication request is received from the server that cannot be answered programatically.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ISecureShellClient.ServerId">
            <summary>
            Gets the server Id (welcome message) returned after a successful connection.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ISecureShellClient.HostKey">
            <summary>
            Gets the server's host key string.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ISecureShellClient.IsAuthenticated">
            <summary>
            Gets a value indicating whether the session has already been authenticated.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ISecureShellClient.Connection">
            <summary>
            Gets or sets the underlying SSH connection.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.BannerEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.ISecureShellClient.Banner"/> event of a class implementing the <see cref="T:ComponentPro.Net.ISecureShellClient"/> interface.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.BannerEventArgs.Banner">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:ComponentPro.Net.HostKeyVerifyingEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.ISecureShellClient.HostKeyVerifying"/> event of a class implementing the <see cref="T:ComponentPro.Net.ISecureShellClient"/> interface.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.HostKeyVerifyingEventArgs.Accept">
            <summary>
            Gets and sets a value that indicates the application has verified the host key.
            </summary>
            <remarks>
            By default, this property is set to false. If you do not set this to true, then the connection establishment stops and an <see cref="T:ComponentPro.Net.SecureShellException"/> is thrown.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.HostKeyVerifyingEventArgs.Fingerprint">
            <summary>
            Gets the server's fingerprint.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.HostKeyVerifyingEventArgs.ServerKey">
            <summary>
            Gets the server key.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.HostKeyVerifyingEventArgs.HostKey">
            <summary>
            Gets the server's host key string.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.HostKeyVerifyingEventArgs.HostKeyAlgorithm">
            <summary>
            Gets the server's host key algorithm.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.Net.ISecureShellClient.KeyboardInteractiveAuthentication"/> event of a class implementing the <see cref="T:ComponentPro.Net.ISecureShellClient"/> interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.ISecureShellClient.KeyboardInteractiveAuthentication"/> event of a class implementing the <see cref="T:ComponentPro.Net.ISecureShellClient"/> interface.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs.Ignore">
            <summary>
            Ignore the authentication request. Equivalent to no event being initialized at all.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs.Name">
            <summary>
            Gets the SSH server name.
            </summary>
            <value>Server name.</value>
        </member>
        <member name="P:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs.Instructions">
            <summary>
            Gets instructions.
            </summary>
            <value>Instructions.</value>
        </member>
        <member name="P:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the authentication.
            </summary>
            <value>True to cancel the authentication; false to continue with the authentication (default).</value>
        </member>
        <member name="P:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs.Requests">
            <summary>
            Collection of prompts and answers for the authentication request.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.PasswordChangeRequestEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.ISecureShellClient.PasswordChangeRequest"/> event of 
            a class implementing the <see cref="T:ComponentPro.Net.ISecureShellClient"/> interface.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.PasswordChangeRequestEventArgs.LastAttemptFailed">
            <summary>
            Gets a boolean value indicating that the last password change attempt has failed.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.PasswordChangeRequestEventArgs.Prompt">
            <summary>
            Gets the server's prompt.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.PasswordChangeRequestEventArgs.Language">
            <summary>
            Gets the prompt's language.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.PasswordChangeRequestEventArgs.NewPassword">
            <summary>
            Gets or sets the new password to change.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.PasswordChangeRequestEventArgs.Cancel">
            <summary>
            Gets or sets a boolean value indicating whether to cancel the password change and throw an exception.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SshExtendedDataReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.SecureShellChannel.ExtendedDataReceived"/> event.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SshExtendedDataReceivedEventArgs.GetData">
            <summary>
            Gets a copy of extended data.
            </summary>
            <returns>Extended data</returns>
        </member>
        <member name="P:ComponentPro.Net.SshExtendedDataReceivedEventArgs.Length">
            <summary>
            Gets the data length.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SshExtendedDataReceivedEventArgs.TypeCode">
            <summary>
            Gets data type code.
            </summary>
            <value>Data type code.</value>
        </member>
    </members>
</doc>
